{"version":3,"sources":["webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/clip.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dropout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/elu.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/leaky-relu.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/clip.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/dropout.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/elu.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/leaky-relu.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/reduce-op.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/wasm/options-utils.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/external \"fs\"","webpack://onnxruntime-web/external \"os\"","webpack://onnxruntime-web/external \"path\"","webpack://onnxruntime-web/external \"perf_hooks\"","webpack://onnxruntime-web/external \"util\"","webpack://onnxruntime-web/external \"worker_threads\"","webpack://onnxruntime-web/external {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"names":["_scriptDir","e","document","currentScript","src","__filename","t","D","buffer","I","Z","F","r","L","n","P","a","H","o","W","i","u","s","ready","Promise","c","f","hasOwnProperty","l","d","m","p","h","g","_","window","importScripts","process","versions","node","E","ENVIRONMENT_IS_PTHREAD","v","y","T","O","w","S","A","locateFile","b","__dirname","normalize","readFileSync","Uint8Array","B","argv","length","replace","slice","on","ln","_e","exit","inspect","console","error","global","Worker","read","readbuffer","scriptArgs","arguments","quit","print","log","warn","printErr","self","location","href","indexOf","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","response","onload","status","onerror","performance","C","x","k","R","bind","N","M","shown","thisProgram","Atomics","load","store","compareExchange","wasmBinary","noExitRuntime","WebAssembly","U","G","String","fromCharCode","Y","j","charCodeAt","z","q","V","Wr","X","set","Q","K","HEAP8","Int8Array","HEAP16","Int16Array","HEAP32","Int32Array","HEAPU8","HEAPU16","Uint16Array","HEAPU32","Uint32Array","HEAPF32","Float32Array","HEAPF64","Float64Array","J","$","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","SharedArrayBuffer","Error","byteLength","ee","te","re","ne","ae","oe","preRun","fe","shift","De","ie","ue","se","mr","Le","runExitHandlers","ce","postRun","le","unshift","push","func","Hr","de","me","pe","he","monitorRunDependencies","ge","clearInterval","onAbort","stack","RuntimeError","Ee","prototype","startsWith","preloadedImages","preloadedAudios","ve","ye","Te","Oe","we","Se","Ae","fetch","credentials","then","ok","arrayBuffer","catch","resolve","be","Pr","exports","asm","Aa","instance","module","instantiate","instantiateWasm","instantiateStreaming","Ce","673802","674054","setTimeout","Jr","xe","initRuntime","arg","get","ke","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EAGAIN","EWOULDBLOCK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","ENOMSG","EIDRM","ECHRNG","EL2NSYNC","EL3HLT","EL3RST","ELNRNG","EUNATCH","ENOCSI","EL2HLT","EDEADLK","ENOLCK","EBADE","EBADR","EXFULL","ENOANO","EBADRQC","EBADSLT","EDEADLOCK","EBFONT","ENOSTR","ENODATA","ETIME","ENOSR","ENONET","ENOPKG","EREMOTE","ENOLINK","EADV","ESRMNT","ECOMM","EPROTO","EMULTIHOP","EDOTDOT","EBADMSG","ENOTUNIQ","EBADFD","EREMCHG","ELIBACC","ELIBBAD","ELIBSCN","ELIBMAX","ELIBEXEC","ENOSYS","ENOTEMPTY","ENAMETOOLONG","ELOOP","EOPNOTSUPP","EPFNOSUPPORT","ECONNRESET","ENOBUFS","EAFNOSUPPORT","EPROTOTYPE","ENOTSOCK","ENOPROTOOPT","ESHUTDOWN","ECONNREFUSED","EADDRINUSE","ECONNABORTED","ENETUNREACH","ENETDOWN","ETIMEDOUT","EHOSTDOWN","EHOSTUNREACH","EINPROGRESS","EALREADY","EDESTADDRREQ","EMSGSIZE","EPROTONOSUPPORT","ESOCKTNOSUPPORT","EADDRNOTAVAIL","ENETRESET","EISCONN","ENOTCONN","ETOOMANYREFS","EUSERS","EDQUOT","ESTALE","ENOTSUP","ENOMEDIUM","EILSEQ","EOVERFLOW","ECANCELED","ENOTRECOVERABLE","EOWNERDEAD","ESTRPIPE","Re","fn","notify","Ne","pthreads","worker","terminate","freeThreadData","runningWorkers","splice","pthread","Me","postMessage","cmd","Ie","returnWorkerToPool","_emscripten_futex_wake","Fe","unusedWorkers","initMainThreadBlock","rn","Kr","initWorker","threadExitHandlers","setThreadStatus","pop","Gr","Xr","threadExit","threadCancel","terminateAllThreads","threadInfoStruct","Br","allocatedOwnStack","stackBase","runWithoutMainThreadQueuedCalls","cn","receiveObjectTransfer","loadWasmModuleToWorker","onmessage","data","currentProxiedOperationCallerThread","targetThread","transferList","Qr","yr","thread","loaded","runPthread","threadId","text","alert","mn","returnCode","target","filename","lineno","message","urlOrBlob","mainScriptUrlOrBlob","wasmModule","allocateUnusedWorker","getNewWorker","busySpinWait","now","Pe","un","an","He","We","Ue","establishStackSpace","getNoExitRuntime","invokeEntryPoint","hrtime","__performance_now_clock_drift","dateNow","Be","Ge","Ur","Ye","Date","je","ze","DESTRUCTOR_OFFSET","REFCOUNT_OFFSET","TYPE_OFFSET","CAUGHT_OFFSET","RETHROWN_OFFSET","SIZE","qe","Ve","kt","Xe","Qe","Ke","Ze","this","excPtr","ptr","set_type","get_type","set_destructor","get_destructor","set_refcount","set_caught","get_caught","set_rethrown","get_rethrown","init","add_ref","add","release_ref","sub","Je","$e","mappings","buffers","printChar","varargs","getStr","get64","et","doAccess","tt","rt","nt","at","ot","it","ut","doMkdir","st","sn","jr","malloc","len","allocated","fd","prot","flags","offset","ct","ft","lt","dt","mt","doReadlink","pt","ht","gt","_t","Et","vt","yt","Tt","Ot","wt","St","Mt","apply","At","bt","Ct","exchange","wait","xt","copyWithin","Dt","navigator","hardwareConcurrency","nn","en","Rt","Nt","It","Ir","Ft","Lt","grow","Pt","Math","min","max","Ht","inEventHandler","removeAllEventListeners","eventHandlers","_removeHandler","deferredCalls","registerRemoveEventListeners","removeEventListenersRegistered","deferCall","targetFunction","argsList","precedence","sort","removeDeferredCalls","canPerformEventHandlerRequests","currentEventHandler","allowsDeferredCalls","runDeferredCalls","removeAllHandlersOnTarget","eventTypeString","removeEventListener","eventListenerFunc","useCapture","registerOrRemoveHandler","handlerFunc","callbackfunc","addEventListener","queueEventHandlerOnThread_iiii","tn","getTargetThreadForEventCallback","getNodeNameForTarget","screen","nodeName","fullscreenEnabled","webkitFullscreenEnabled","Wt","Ut","Bt","Gt","Yt","jt","querySelector","zt","qt","canvasSharedPtr","offscreenCanvas","controlTransferredOffscreen","GLctxObject","GLctx","getParameter","width","height","viewport","Vt","Xt","Qt","Kt","getExtension","vertexAttribDivisor","vertexAttribDivisorANGLE","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","drawElementsInstancedANGLE","Zt","createVertexArray","createVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","bindVertexArray","bindVertexArrayOES","isVertexArray","isVertexArrayOES","Jt","drawBuffers","drawBuffersWEBGL","$t","multiDrawWebgl","er","counter","programs","framebuffers","renderbuffers","textures","uniforms","shaders","vaos","contexts","offscreenCanvases","timerQueriesEXT","programInfos","stringCache","unpackAlignment","recordError","lastError","getNewId","getSource","createContext","getContext","registerContext","handle","attributes","version","majorVersion","canvas","enableExtensionsByDefault","initExtensions","makeContextCurrent","currentContext","ctx","Cr","deleteContext","initExtensionsDone","disjointTimerQueryExt","getSupportedExtensions","forEach","populateUniformTable","maxUniformLength","maxAttributeLength","maxUniformBlockNameLength","getProgramParameter","getActiveUniform","name","getUniformLocation","size","tr","rr","alpha","depth","stencil","antialias","premultipliedAlpha","preserveDrawingBuffer","powerPreference","failIfMajorPerformanceCaveat","minorVersion","explicitSwapControl","proxyContextToMainThread","renderViaOffscreenBackBuffer","nr","ar","or","ir","strings","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","ur","sr","cr","fr","lr","getStreamFromFD","doReadv","dr","_fflush","pr","hr","gr","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getTime","GMTString","_r","called","getFullYear","getTimezoneOffset","Vr","qr","Number","zr","toTimeString","match","Er","getSeconds","getMinutes","getHours","getDate","getMonth","getDay","vr","setTime","pthread_ptr","stackSize","detached","Yr","start_routine","startRoutine","time","Tr","$r","Or","wr","Zr","Sr","Ar","br","xr","Dr","kr","setDate","setMonth","setFullYear","Rr","tm_sec","tm_min","tm_hour","tm_mday","tm_mon","tm_year","tm_wday","tm_yday","tm_isdst","tm_gmtoff","tm_zone","RegExp","toString","substring","ceil","abs","Fr","Nr","Mr","Array","Lr","ca","ba","aa","ea","ga","fa","da","___wasm_call_ctors","ha","_OrtInit","ia","_OrtCreateSessionOptions","ja","_OrtAddSessionConfigEntry","ka","_OrtReleaseSessionOptions","la","_OrtCreateSession","ma","_OrtReleaseSession","na","_OrtGetInputCount","oa","_OrtGetOutputCount","pa","_OrtGetInputName","qa","_OrtGetOutputName","ra","_OrtFree","sa","_OrtCreateTensor","ta","_OrtGetTensorData","ua","_OrtReleaseTensor","va","_OrtCreateRunOptions","wa","_OrtAddRunConfigEntry","xa","_OrtReleaseRunOptions","ya","_OrtRun","za","_malloc","Ba","___errno_location","Ca","_free","Da","_pthread_self","Ea","_emscripten_get_global_libc","Fa","_memset","Ga","__get_tzname","Ha","__get_daylight","Ia","__get_timezone","Ja","___em_js__initPthreadsJS","Ka","___pthread_tsd_run_dtors","La","_emscripten_main_thread_process_queued_calls","Ma","_emscripten_current_thread_process_queued_calls","Na","_emscripten_register_main_browser_thread_id","Oa","_emscripten_main_browser_thread_id","Pa","__emscripten_do_dispatch_to_thread","Qa","_emscripten_sync_run_in_main_thread_4","Ra","_emscripten_run_in_main_runtime_thread_js","Sa","__emscripten_call_on_thread","Ta","_emscripten_tls_init","Ua","__emscripten_thread_init","Va","stackSave","Wa","stackRestore","Xa","stackAlloc","Ya","_emscripten_stack_set_limits","Za","_memalign","_a","__emscripten_allow_main_runtime_queued_calls","__emscripten_main_thread_futex","dn","setStatus","calledRun","onRuntimeInitialized","onExit","UTF8ToString","stringToUTF8","lengthBytesUTF8","PThread","ExitStatus","run","preInit","ortWasm","undefined","readyPromiseResolve","readyPromiseReject","Module","reject","key","moduleOverrides","arguments_","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","read_","readAsync","readBinary","nodeFS","nodePath","scriptDirectory","path","binary","ret","assert","ex","abort","url","xhr","out","err","ABORT","condition","UTF8Decoder","TextDecoder","UTF8ArrayToString","heap","idx","maxBytesToRead","endIdx","endPtr","subarray","decode","str","u0","u1","u2","ch","stringToUTF8Array","outIdx","maxBytesToWrite","startIdx","outPtr","allocateUTF8","writeArrayToMemory","array","writeAsciiToMemory","dontAddNull","alignUp","multiple","updateGlobalBufferAndViews","buf","wasmTable","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","addOnPreRun","callRuntimeCallbacks","preMain","addOnPostRun","cb","runDependencies","runDependencyWatcher","dependenciesFulfilled","addRunDependency","id","removeRunDependency","callback","what","hasPrefix","prefix","dataURIPrefix","isDataURI","fileURIPrefix","isFileURI","wasmBinaryFile","getBinary","file","getBinaryPromise","createWasm","info","asmLibraryArg","receiveInstance","receiveInstantiatedSource","output","instantiateArrayBuffer","receiver","reason","callbacks","ExceptionInfoAttrs","___cxa_allocate_exception","_atexit","___cxa_atexit","a0","a1","___cxa_thread_atexit","ExceptionInfo","type","destructor","refcount","caught","rethrown","value","prev","___cxa_throw","_emscripten_get_now","SYSCALLS","stream","curr","low","high","___sys_access","amode","setErrNo","___sys_fcntl64","___sys_fstat64","___sys_getdents64","dirp","count","___sys_getpid","___sys_ioctl","op","___sys_lstat64","___sys_mkdir","mode","syscallMmap2","addr","off","___sys_mmap2","syscallMunmap","___sys_munmap","___sys_open","___sys_readlink","bufsize","___sys_rmdir","___sys_stat64","___sys_unlink","_abort","_emscripten_get_now_is_monotonic","_clock_gettime","clk_id","tp","_difftime","time1","time0","_dlclose","_dlerror","_dlopen","flag","_dlsym","symbol","_emscripten_memcpy_big","dest","num","_emscripten_get_heap_size","emscripten_realloc_buffer","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","_emscripten_thread_sleep","msecs","start","ENV","getExecutableName","getEnvStrings","env","_environ_get","__environ","environ_buf","bufSize","string","_environ_sizes_get","penviron_count","penviron_buf_size","_fd_close","_fd_fdstat_get","pbuf","_fd_read","iov","iovcnt","pnum","_fd_seek","offset_low","offset_high","whence","newOffset","_fd_write","_gettimeofday","_gmtime_r","tmPtr","date","yday","_tzset","currentYear","winter","summer","winterOffset","summerOffset","stdTimezoneOffset","winterName","extractZone","summerName","winterNamePtr","summerNamePtr","_localtime_r","dst","zonePtr","_mktime","guessedOffset","dstOffset","nonDstOffset","trueOffset","_pthread_create","_pthread_join","__isLeapYear","year","__arraySum","index","sum","__MONTH_DAYS_LEAP","__MONTH_DAYS_REGULAR","__addDays","days","newDate","leap","currentMonth","daysInCurrentMonth","_strftime","maxsize","format","tm","pattern","EXPANSION_RULES_1","rule","WEEKDAYS","MONTHS","leadingSomething","digits","character","leadingNulls","compareByDay","date1","date2","sgn","compare","getFirstWeekStartDate","janFourth","getWeekBasedYear","thisDate","janFourthThisYear","janFourthNextYear","firstWeekStartThisYear","firstWeekStartNextYear","EXPANSION_RULES_2","twelveHour","janFirst","firstSunday","endDate","februaryFirstUntilEndMonth","daysDifference","firstMonday","ahead","bytes","intArrayFromString","_strftime_l","_sysconf","stringy","u8array","numBytesWritten","args","doRun","runCaller","params","pending","base64","charAt","b64","s64","encode","end","parts","chunk","join","invalidEncoding","test","EventEmitter","_listeners","evt","listeners","emit","factory","f32","f8b","writeFloat_f32_cpy","val","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","floor","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","Object","keys","alloc","MAX","slab","call","utf8","write","c1","c2","flatbuffers","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","SIZE_PREFIX_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","float32","float64","isLittleEndian","Long","create","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","position","prep","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","finish","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","result","__offset","bb_pos","vtable_offset","__union","__string","opt_encoding","__indirect","__vector","__vector_len","__has_identifier","ident","__esModule","Guid","guid","TypeError","EMPTY","isGuid","validator","gen","createEmpty","parse","raw","random","isEmpty","toJSON","wasm","Instance","unsigned","isLong","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lessThanOrEqual","lte","greaterThan","greaterThanOrEqual","gte","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","and","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","values","onnx","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","AttributeProto","properties","floats","ints","tensors","graphs","refAttrName","docString","newBuffer","emptyArray","writer","uint32","float","int64","TensorProto","fork","ldelim","GraphProto","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","isInteger","isArray","fromObject","object","LongBits","toObject","options","arrays","defaults","long","longs","enums","json","isFinite","AttributeType","constructor","toJSONOptions","ValueInfoProto","TypeProto","NodeProto","input","attribute","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","dims","floatData","int32Data","stringData","int64Data","externalData","doubleData","uint64Data","dataType","segment","rawData","dataLocation","Segment","double","uint64","DataLocation","DataType","begin","TensorShapeProto","dim","Dimension","$oneOfFields","dimValue","dimParam","denotation","oneOfGetter","oneOfSetter","oneofs","tensorType","Tensor","elemType","shape","protobuf","configure","_configure","BufferWriter","BufferReader","build","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","asPromise","endedByRPC","zero","zzEncode","zeroHash","from","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","createSessionHandler","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","initTimeout","numThreads","numCpuLogicalCores","cpus","initializeWebAssembly","promisify","readFile","handler","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","registerBackend","ortFbs","onnxruntime","experimental","fbs","_attributes","Map","attr","Attribute","getValue","getType","delete","getFloat","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","map","utf8String","byteOffset","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","initialize","dispose","webgl","WebGLBackend","resolveBackend","hint","hints","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","programInfo","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","samplers","samplerName","inputLayout","inputLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","newInputShape","squeezeInputShape","newInputLayout","JSON","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","root","has","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encodeUint8","endianness","EncodingGlslLib","decodeUint8","ArrayBuffer","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","inlineDefs","exec","split","tokens","trim","filter","regexString","regex","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","pack2unpackMap","unpack2packMap","inputs","artifact","programManager","getArtifact","createProgramInfo","setArtifact","runData","createRunData","runProgram","outputTextureData","tensor","checkAndUpdateTextureForm","inputTextureDatas","expectPackedInputs","unpack","expectPackedOutputs","getOrCreateTextureData","td","getTextureData","dataId","createTextureLayoutFromShape","unpackedTextureLayout","getOrCreateTextureLayout","unpackedTextureData","createTextureData","numberData","createTextureDataFromLayout","createTextureDataFromLayoutBindTensor","usage","texture","textureManager","createTextureFromLayout","createTextureDataFromTexture","createSharedTextureData","tensorId","textureData","_id","readTexture","setTextureData","isInitializer","isTextureLayoutCached","channels","reverseWH","getPackedShape","prefs","layoutStrategy","computeTextureWH","texWidth","texHeight","inferredDims","computeStrides","reversedWH","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","cachedId","packOpCache","WebGLPack","unpackOpCache","WebGLUnpack","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","WebGLUnaryOp","NUMBER_TYPES","glslAbs","FLOAT_TYPES","glslAcos","binaryOps","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","WebGLDepthToSpace","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLInstanceNormalization","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","reduceOps","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","WebGLReshape","WebGLResizePacked","glslSigmoid","glslSin","WebGLSliceV10","WebGLSlice","WebGLSoftmax","WebGLSplit","outputs","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUpsample","WebGLUnsqueeze","glslXor","inferenceHandler","outputShape","scale","epsilon","inputTDs","outputTD","uniformData","BatchNormalization","typeConstraint","glslFunc","resultType","isBroadcast","areEqual","usePackedTexture","ouputLayout","calcShape","aRank","bRank","aBcast","bBcast","BinaryOp","ValueBased","glslBuiltinBinary","Clip","inputShape","axis","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","allGlChannels","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","channelIdx","Concat","WebGLPackedConcat","unpackedImpl","WebGLUnpackedConcat","packedImpl","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","sizeInConcatAxis","previousSum","numberOfTensors","tensorRank","codeLines","arrayRank","kernelReshape","WebGLReshapePacked","matmul","WebGLMatMulPacked","outputReshape","xshape","kshape","kernelShape","PoolConvUtil","adjustPadsBasedOnAutoPad","dilations","pads","autoPad","group","calcOutputShape","im2col","WebGLIm2ColPacked","activation","artifacts","runDataIm2col","im2colOutput","runDataKernelReshape","kernelReshaped","hasBias","runDataMatmul","matmulOutput","outputShapeTensor","runDataOutputReshape","Conv","WebGLConvPacked","unpackedGroupedConvImpl","WebGLUnpackedGroupedConv","unpackedConvImpl","WebGLUnpackedConv","packedConvImpl","packMode","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","concat","processBias","xShape","wShape","outputChannelsPerGroup","getActicationSnippet","activationFunction","applyActivation","readSize","blockSize","createProgramInfoArray","runDataArray","createRunDataArray","wDims","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","runtDataIm2Col","draw","gl","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","find","blend","enable","BLEND","checkError","blendEquation","FUNC_ADD","blendFunc","uniform1i","disable","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","bLayout","adjustedKernelShape","kLayout","initValue","isBlendSupported","calcSharedDimReadSize","kernel","numFeatureMaps","oldRowSize","newRowSize","oldOffset","preferredBatchSize","calcBlockSize","transposePerm","firstReshapeShape","blocksize","blocksizeSqr","firstReshapedTensor","reshape","transposeProgramInfo","transposeArtifact","runDataTranspose","transposeOutput","getOutShape","inputDepth","inputHeight","inputWidth","DepthToSpace","testMode","_handler","_inputs","_programInfo","Dropout","toExponential","Elu","outputDims","flattenShape","Flatten","activationName","indexDataShape","normalizeAxis","indexCopyOps","Gather","aShape","bShape","GemmUtil","getShapeOfGemmResult","transA","transB","oShape","line","beta","Gemm","convOutputShape","wshape","im2colShape","kernelSize","unrolled","row","col","createGetBiasMethod","bias","numChannels","ImageScaler","createProgramInfos","runDatas","createRunDatas","checkInputTypes","createMeanAndVarianceProgramInfo","xLayout","xDims","channelSize","outputUnpackedShape","createComputOutputProgramInfo","scaleLayout","meanAndVarianceLayout","meanAndVarianceProgramInfo","inputTD","scaleTD","bTD","InstanceNormalization","LeakyRelu","sharedDimIndex","coordsDataType","getA","getB","MatMul","WebGLUnpackedMatMul","arank","brank","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","getOutput","getVecChannels","padShape","alayout","getPadFunction","Pad","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","countIncludePad","GlobalAveragePool","AveragePool","isGlobalOperator","adjustPoolAttributes","computePoolOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","GlobalMaxPool","MaxPool","op1","startVal","inputDims","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","reduce","cur","arrayName","iRank","idxCopy","axes","normalizeAxes","ops","getOps","keepDims","ReduceBase","WebGLGenericReduce","idxZero","needSqueezeInputData","originInputShape","inputShape3D","processDims3D","originalInputLayout","calculateReshapedDims","integerData","squeezedOutputShape","mainLoop","outputCoords","getFlattenedIndexFrom3D","originalInputTD","squeezedInputLayout","Reshape","batchDims","batch","reshapedDims","packedShape","newTextureLayout","prepareInputs","scales","roi","extrapolationEnabled","extrapolationValue","cubicCoefficientA","excludeOutside","coordinateTransformMode","every","outputHeight","outputWidth","scalesHeight","scalesWidth","getSourceFracIndex","createResizeProgramInfo","useExtrapolation","Upsample","starts","ends","Slice","some","SliceV10","ind","sliceOps","pi","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","createComputScaleProgramInfo","xlayout","createComputeMaxProgramInfo","sizeToDimension","sizeFromDimension","computeMaxProgramInfo","computeScaleProgramInfo","Softmax","getProgramCount","results","rundata","SplitUtil","splitShape","numOutputs","Split","Squeeze","sumLine","Sum","tileOps","Tile","getOutputShape","inputShapes","perm","getAdjustedPerm","sortBasedOnPerm","unpackedOutputShape","getPermFunctionBody","getPositionalFunction","Positional","reverseFunc","Transpose","encoder","getEncoder","allocateTexture","UnaryOp","glslBuiltinUnary","inputTexture","isScalar","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","Unsqueeze","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","doDraw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","texturePosition","bindTexture","uniform1fv","uniform1f","uniform1iv","uniformHandle","bindTextureToUniform","getAttribLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","createInferenceHandler","onGraphInitialized","initializers","getValues","addInitializer","opsets","resolveOperator","internalFormat","R32F","RED","textureType","RGBA32F","RGBA","textureSize","dataSize","RedFloat32DataEncoder","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","Uint8DataEncoder","wsize","hsize","totalSize","sqrt","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","ax","isInt","dimsToSkip","config","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","updateTexture","toTextureData","toTensorData","deleteTexture","_dataType","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","toUpperCase","createNewWebGLContext","createElement","createCanvas","WebGLContext","webgl2","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","scissor","readPixels","isFramebufferReady","getActiveTexture","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","getNodes","_ops","KernelOp","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","execNodeFn","checkInputs","outputList","downstreamNodes","to","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","thisValue","ExecutionPlan","Graph","graphProto","GraphImpl","_from","_to","ProtoUtil","tensorValueTypeFromProto","_nodeProto","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","tensorDataTypeFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","dimLength","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","fill","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","fuseConvActivationNodes","_severity","_content","_category","severity","content","category","color","SEVERITY_VALUE","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","toISOString","previousConfig","logLevel","startTime","endCallback","timer","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","stop","logOneEvent","isPromise","flush","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","_opsets","_graph","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","momentum","spatial","mean","var_","inputType","inputDimensionality","supportedModes","ratio","isOptionalC","ceilMode","PoolBase","storageOrder","opset","_node","isResize","scalesValidataion","needRoiInput","nearestMode","useNearest2xOptimization","roiInputIdx","scalesInputIdx","sizesInputIdx","parseRoiData","outputSizes","scalesTensor","parseScalesData","sizesTensor","parseScalesDataFromOutputSize","computeOutputShape","yDims","matchSelector","selector","endsWith","rangeStart","pair","rangeEnd","rules","versionSelector","opConstructor","DimensionValueType","TensorDataType","NodeType","__init","getRootAsShape","Shape","getSizePrefixedRootAsShape","startShape","builder","addDim","createDimVector","startDimVector","numElems","endShape","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","optionalEncoding","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","UNKNOWN","startDimensionValue","addDimType","addDimValue","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","NONE","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawDataLength","rawDataArray","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","floatsLength","graphsLength","startAttribute","addF","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","inputNames","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","graphInputTypes","graphInputDims","_model","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","createView","getData","_strides","tensorProto","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","INT32","INT16","UINT16","INT8","UINT8","BOOL","INT64","DOUBLE","UINT32","UINT64","element","fromData","ortTensor","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","targetIndex","sourceIndex","leftShape","transLeft","rightShape","transRight","biasShape","kDim","typeProto","tensorDataTypeStringToEnum","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","shape1","shape2","total","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","dilation","padHeadIndex","padTailIndex","dkernel","padNeeded","iterateExtraOptions","seen","entries","allocWasmString","allocs","getInstance","dataLength","dataOffset","setRunOptions","runOptionsHandle","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","extra","WeakSet","keyDataOffset","valueDataOffset","ortInit","tensorDataTypeEnumToString","numericTensorTypeToTypedArray","BigInt64Array","BigUint64Array","errorCode","getLogLevel","modelDataOffset","sessionOptionsHandle","setSessionOptions","sessionHandle","inputCount","outputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","fetches","inputArray","inputIndices","kvp","inputValues","inputDataOffsets","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","tensorDataIndex","typedArray","sessionOptions","graphOptimizationLevel","getGraphOptimzationLevel","enableCpuMemArena","enableMemPattern","executionMode","getExecutionMode","logIdDataOffset","logId","enableProfiling","initialized","initializing","aborted","timeout","useThreads","MessageChannel","port1","validate","isMultiThreadSupported","isTimeout","tasks","Blob","scriptSourceCode","fileName","URL","createObjectURL","race","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","Symbol","toStringTag","__webpack_exports__"],"mappings":"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AK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,KAAK,IAAI,OAAO,GAAG,KAAK,GAAG,OA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AI,KAAK,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,OAAO,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,WAAW,KAAK,GAAG,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,KAAK,GAAG,OAAO,GAAG,KAAK,GAAG,KAAK,GAAG,OAAO,KAAK,KAAK,EAAE,OAAO,QAAQ,KAAK,EAAE,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,GAAG,OAAO,IAAI,KAAK,EAAE,OAAO,IAAI,KAAK,IAAI,OAAO,GAAG,KAAK,GA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G,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MACvnC,IAAIuJ,QACT,MAAO5M,IAcT,SAASmuC,EAAKnQ,EAAKC,EAAM4Y,GAMrBr7B,KAAKwiB,IAAY,EAANA,EAMXxiB,KAAKyiB,KAAc,EAAPA,EAMZziB,KAAKq7B,WAAaA,EAoCtB,SAASC,EAAOhF,GACZ,OAAsC,KAA9BA,GAAOA,EAAgB,YAXnC3D,EAAK3iC,UAAUurC,WAEfpK,OAAOqK,eAAe7I,EAAK3iC,UAAW,aAAc,CAAEiyB,OAAO,IAkB7D0Q,EAAK2I,OAASA,EAOd,IAAIG,EAAY,GAOZC,EAAa,GAQjB,SAASC,EAAQ1Z,EAAOoZ,GACpB,IAAI/E,EAAKsF,EAAWC,EACpB,OAAIR,GAEIQ,EAAS,IADb5Z,KAAW,IACgBA,EAAQ,OAC/B2Z,EAAYF,EAAWzZ,IAEZ2Z,GAEftF,EAAMwF,EAAS7Z,GAAgB,EAARA,GAAa,GAAK,EAAI,GAAG,GAC5C4Z,IACAH,EAAWzZ,GAASqU,GACjBA,IAGHuF,GAAU,MADd5Z,GAAS,IACqBA,EAAQ,OAClC2Z,EAAYH,EAAUxZ,IAEX2Z,GAEftF,EAAMwF,EAAS7Z,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtC4Z,IACAJ,EAAUxZ,GAASqU,GAChBA,GAmBf,SAASyF,EAAW9Z,EAAOoZ,GACvB,GAAIrM,MAAM/M,GACN,OAAOoZ,EAAWW,EAAQnJ,EAC9B,GAAIwI,EAAU,CACV,GAAIpZ,EAAQ,EACR,OAAO+Z,EACX,GAAI/Z,GAASga,EACT,OAAOC,MACR,CACH,GAAIja,IAAUka,EACV,OAAOC,EACX,GAAIna,EAAQ,GAAKka,EACb,OAAOE,EAEf,OAAIpa,EAAQ,EACD8Z,GAAY9Z,EAAOoZ,GAAUiB,MACjCR,EAAU7Z,EAAQsa,EAAkB,EAAIta,EAAQsa,EAAkB,EAAGlB,GAmBhF,SAASS,EAASU,EAASC,EAAUpB,GACjC,OAAO,IAAI1I,EAAK6J,EAASC,EAAUpB,GA5CvC1I,EAAKgJ,QAAUA,EAkCfhJ,EAAKoJ,WAAaA,EAsBlBpJ,EAAKmJ,SAAWA,EAShB,IAAIY,EAAUt3B,KAAKiqB,IASnB,SAASsN,EAAWjf,EAAK2d,EAAUuB,GAC/B,GAAmB,IAAflf,EAAI11B,OACJ,MAAM4F,MAAM,gBAChB,GAAY,QAAR8vB,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAC9D,OAAOmV,EASX,GARwB,iBAAbwI,GAEPuB,EAAQvB,EACRA,GAAW,GAEXA,IAAcA,GAElBuB,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SAErB,IAAIv2C,EACJ,IAAKA,EAAIo3B,EAAIl0B,QAAQ,MAAQ,EACzB,MAAMoE,MAAM,mBACX,GAAU,IAANtH,EACL,OAAOq2C,EAAWjf,EAAIhK,UAAU,GAAI2nB,EAAUuB,GAAON,MAQzD,IAHA,IAAIQ,EAAef,EAAWW,EAAQE,EAAO,IAEzCnD,EAAS5G,EACJltC,EAAI,EAAGA,EAAI+3B,EAAI11B,OAAQrC,GAAK,EAAG,CACpC,IAAIwnB,EAAO/H,KAAKC,IAAI,EAAGqY,EAAI11B,OAASrC,GAChCs8B,EAAQ8a,SAASrf,EAAIhK,UAAU/tB,EAAGA,EAAIwnB,GAAOyvB,GACjD,GAAIzvB,EAAO,EAAG,CACV,IAAI6vB,EAAQjB,EAAWW,EAAQE,EAAOzvB,IACtCssB,EAASA,EAAOwD,IAAID,GAAOl8B,IAAIi7B,EAAW9Z,SAG1CwX,GADAA,EAASA,EAAOwD,IAAIH,IACJh8B,IAAIi7B,EAAW9Z,IAIvC,OADAwX,EAAO4B,SAAWA,EACX5B,EAoBX,SAASyD,EAAU9O,EAAKiN,GACpB,MAAmB,iBAARjN,EACA2N,EAAW3N,EAAKiN,GACR,iBAARjN,EACAuO,EAAWvO,EAAKiN,GAEpBS,EAAS1N,EAAI5L,IAAK4L,EAAI3L,KAA0B,kBAAb4Y,EAAyBA,EAAWjN,EAAIiN,UAftF1I,EAAKgK,WAAaA,EAyBlBhK,EAAKuK,UAAYA,EAUjB,IAcIX,EAAiBY,WAOjBlB,EAAiBM,EAAiBA,EAOlCJ,EAAiBF,EAAiB,EAOlCmB,EAAazB,EA5BI,GAAK,IAkCtB9I,EAAO8I,EAAQ,GAMnBhJ,EAAKE,KAAOA,EAMZ,IAAImJ,EAAQL,EAAQ,GAAG,GAMvBhJ,EAAKqJ,MAAQA,EAMb,IAAIqB,EAAM1B,EAAQ,GAMlBhJ,EAAK0K,IAAMA,EAMX,IAAIC,EAAO3B,EAAQ,GAAG,GAMtBhJ,EAAK2K,KAAOA,EAMZ,IAAIC,EAAU5B,GAAS,GAMvBhJ,EAAK4K,QAAUA,EAMf,IAAIlB,EAAYP,GAAS,EAAc,YAAc,GAMrDnJ,EAAK0J,UAAYA,EAMjB,IAAIH,EAAqBJ,GAAS,GAAc,GAAc,GAM9DnJ,EAAKuJ,mBAAqBA,EAM1B,IAAIE,EAAYN,EAAS,GAAG,YAAc,GAM1CnJ,EAAKyJ,UAAYA,EAMjB,IAAIoB,EAAgB7K,EAAK3iC,UAMzBwtC,EAAcC,MAAQ,WAClB,OAAOz9B,KAAKq7B,SAAWr7B,KAAKwiB,MAAQ,EAAIxiB,KAAKwiB,KAOjDgb,EAAcE,SAAW,WACrB,OAAI19B,KAAKq7B,UACIr7B,KAAKyiB,OAAS,GAAK8Z,GAAmBv8B,KAAKwiB,MAAQ,GACzDxiB,KAAKyiB,KAAO8Z,GAAkBv8B,KAAKwiB,MAAQ,IAUtDgb,EAAc/pB,SAAW,SAAkBmpB,GAEvC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAClB,MAAMC,WAAW,SACrB,GAAI78B,KAAK29B,SACL,MAAO,IACX,GAAI39B,KAAK49B,aAAc,CACnB,GAAI59B,KAAK69B,GAAGzB,GAAY,CAGpB,IAAI0B,EAAY/B,EAAWa,GACvBmB,EAAM/9B,KAAK+9B,IAAID,GACfE,EAAOD,EAAId,IAAIa,GAAW98B,IAAIhB,MAClC,OAAO+9B,EAAItqB,SAASmpB,GAASoB,EAAKP,QAAQhqB,SAASmpB,GAEnD,MAAO,IAAM58B,KAAKs8B,MAAM7oB,SAASmpB,GAQzC,IAHA,IAAIE,EAAef,EAAWW,EAAQE,EAAO,GAAI58B,KAAKq7B,UAClD4C,EAAMj+B,KACNy5B,EAAS,KACA,CACT,IAAIyE,EAASD,EAAIF,IAAIjB,GAEjBnS,GADSsT,EAAIj9B,IAAIk9B,EAAOjB,IAAIH,IAAeW,UAAY,GACvChqB,SAASmpB,GAE7B,IADAqB,EAAMC,GACEP,SACJ,OAAOhT,EAAS8O,EAEhB,KAAO9O,EAAO3iC,OAAS,GACnB2iC,EAAS,IAAMA,EACnB8O,EAAS,GAAK9O,EAAS8O,IASnC+D,EAAcW,YAAc,WACxB,OAAOn+B,KAAKyiB,MAOhB+a,EAAcY,oBAAsB,WAChC,OAAOp+B,KAAKyiB,OAAS,GAOzB+a,EAAca,WAAa,WACvB,OAAOr+B,KAAKwiB,KAOhBgb,EAAcc,mBAAqB,WAC/B,OAAOt+B,KAAKwiB,MAAQ,GAOxBgb,EAAce,cAAgB,WAC1B,GAAIv+B,KAAK49B,aACL,OAAO59B,KAAK69B,GAAGzB,GAAa,GAAKp8B,KAAKs8B,MAAMiC,gBAEhD,IADA,IAAInQ,EAAmB,GAAbpuB,KAAKyiB,KAAYziB,KAAKyiB,KAAOziB,KAAKwiB,IACnCgc,EAAM,GAAIA,EAAM,GACK,IAArBpQ,EAAO,GAAKoQ,GADOA,KAG5B,OAAoB,GAAbx+B,KAAKyiB,KAAY+b,EAAM,GAAKA,EAAM,GAO7ChB,EAAcG,OAAS,WACnB,OAAqB,IAAd39B,KAAKyiB,MAA2B,IAAbziB,KAAKwiB,KAOnCgb,EAAciB,IAAMjB,EAAcG,OAMlCH,EAAcI,WAAa,WACvB,OAAQ59B,KAAKq7B,UAAYr7B,KAAKyiB,KAAO,GAOzC+a,EAAckB,WAAa,WACvB,OAAO1+B,KAAKq7B,UAAYr7B,KAAKyiB,MAAQ,GAOzC+a,EAAcmB,MAAQ,WAClB,OAA0B,IAAP,EAAX3+B,KAAKwiB,MAOjBgb,EAAcoB,OAAS,WACnB,OAA0B,IAAP,EAAX5+B,KAAKwiB,MAQjBgb,EAAczK,OAAS,SAAgBC,GAGnC,OAFKsI,EAAOtI,KACRA,EAAQkK,EAAUlK,KAClBhzB,KAAKq7B,WAAarI,EAAMqI,UAAar7B,KAAKyiB,OAAS,IAAQ,GAAMuQ,EAAMvQ,OAAS,IAAQ,IAErFziB,KAAKyiB,OAASuQ,EAAMvQ,MAAQziB,KAAKwiB,MAAQwQ,EAAMxQ,KAS1Dgb,EAAcK,GAAKL,EAAczK,OAOjCyK,EAAcqB,UAAY,SAAmB7L,GACzC,OAAQhzB,KAAK69B,GAAmB7K,IASpCwK,EAAcsB,IAAMtB,EAAcqB,UAQlCrB,EAAcvvC,GAAKuvC,EAAcqB,UAOjCrB,EAAcuB,SAAW,SAAkB/L,GACvC,OAAOhzB,KAAKg/B,KAAqBhM,GAAS,GAS9CwK,EAAcz6B,GAAKy6B,EAAcuB,SAOjCvB,EAAcyB,gBAAkB,SAAyBjM,GACrD,OAAOhzB,KAAKg/B,KAAqBhM,IAAU,GAS/CwK,EAAc0B,IAAM1B,EAAcyB,gBAQlCzB,EAAcxuC,GAAKwuC,EAAcyB,gBAOjCzB,EAAc2B,YAAc,SAAqBnM,GAC7C,OAAOhzB,KAAKg/B,KAAqBhM,GAAS,GAS9CwK,EAAcn6B,GAAKm6B,EAAc2B,YAOjC3B,EAAc4B,mBAAqB,SAA4BpM,GAC3D,OAAOhzB,KAAKg/B,KAAqBhM,IAAU,GAS/CwK,EAAc6B,IAAM7B,EAAc4B,mBAQlC5B,EAAc9tC,GAAK8tC,EAAc4B,mBAQjC5B,EAActS,QAAU,SAAiB8H,GAGrC,GAFKsI,EAAOtI,KACRA,EAAQkK,EAAUlK,IAClBhzB,KAAK69B,GAAG7K,GACR,OAAO,EACX,IAAIsM,EAAUt/B,KAAK49B,aACf2B,EAAWvM,EAAM4K,aACrB,OAAI0B,IAAYC,GACJ,GACPD,GAAWC,EACL,EAENv/B,KAAKq7B,SAGFrI,EAAMvQ,OAAS,EAAMziB,KAAKyiB,OAAS,GAAOuQ,EAAMvQ,OAASziB,KAAKyiB,MAASuQ,EAAMxQ,MAAQ,EAAMxiB,KAAKwiB,MAAQ,GAAO,EAAI,EAFhHxiB,KAAKgB,IAAIgyB,GAAO4K,cAAgB,EAAI,GAYnDJ,EAAcwB,KAAOxB,EAActS,QAMnCsS,EAAcgC,OAAS,WACnB,OAAKx/B,KAAKq7B,UAAYr7B,KAAK69B,GAAGzB,GACnBA,EACJp8B,KAAKy/B,MAAM3+B,IAAIu8B,IAQ1BG,EAAclB,IAAMkB,EAAcgC,OAOlChC,EAAc18B,IAAM,SAAa4+B,GACxBpE,EAAOoE,KACRA,EAASxC,EAAUwC,IAIvB,IAAIC,EAAM3/B,KAAKyiB,OAAS,GACpBmd,EAAkB,MAAZ5/B,KAAKyiB,KACXod,EAAM7/B,KAAKwiB,MAAQ,GACnBsd,EAAiB,MAAX9/B,KAAKwiB,IAEXud,EAAML,EAAOjd,OAAS,GACtBud,EAAoB,MAAdN,EAAOjd,KACbwd,EAAMP,EAAOld,MAAQ,GAGrB0d,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAYrC,OAVAD,IADAC,GAAOP,GAHgB,MAAbJ,EAAOld,QAIF,GAGf2d,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAENjE,GANPsE,GAAO,QAMiB,IATxBC,GAAO,QAQPH,GAAO,QACoC,IAH3CC,GAAO,OAG+CngC,KAAKq7B,WAQ/DmC,EAAc8C,SAAW,SAAkBC,GAGvC,OAFKjF,EAAOiF,KACRA,EAAarD,EAAUqD,IACpBvgC,KAAKc,IAAIy/B,EAAWjE,QAS/BkB,EAAcx8B,IAAMw8B,EAAc8C,SAOlC9C,EAAcgD,SAAW,SAAkBC,GACvC,GAAIzgC,KAAK29B,SACL,OAAO9K,EAKX,GAJKyI,EAAOmF,KACRA,EAAavD,EAAUuD,IAGvBtF,EAKA,OAAOW,EAJGX,EAAK8B,IAAIj9B,KAAKwiB,IACLxiB,KAAKyiB,KACLge,EAAWje,IACXie,EAAWhe,MACT0Y,EAAKuF,WAAY1gC,KAAKq7B,UAG/C,GAAIoF,EAAW9C,SACX,OAAO9K,EACX,GAAI7yB,KAAK69B,GAAGzB,GACR,OAAOqE,EAAW9B,QAAUvC,EAAYvJ,EAC5C,GAAI4N,EAAW5C,GAAGzB,GACd,OAAOp8B,KAAK2+B,QAAUvC,EAAYvJ,EAEtC,GAAI7yB,KAAK49B,aACL,OAAI6C,EAAW7C,aACJ59B,KAAKs8B,MAAMW,IAAIwD,EAAWnE,OAE1Bt8B,KAAKs8B,MAAMW,IAAIwD,GAAYnE,MACnC,GAAImE,EAAW7C,aAClB,OAAO59B,KAAKi9B,IAAIwD,EAAWnE,OAAOA,MAGtC,GAAIt8B,KAAK+C,GAAGq6B,IAAeqD,EAAW19B,GAAGq6B,GACrC,OAAOrB,EAAW/7B,KAAK09B,WAAa+C,EAAW/C,WAAY19B,KAAKq7B,UAKpE,IAAIsE,EAAM3/B,KAAKyiB,OAAS,GACpBmd,EAAkB,MAAZ5/B,KAAKyiB,KACXod,EAAM7/B,KAAKwiB,MAAQ,GACnBsd,EAAiB,MAAX9/B,KAAKwiB,IAEXud,EAAMU,EAAWhe,OAAS,GAC1Bud,EAAwB,MAAlBS,EAAWhe,KACjBwd,EAAMQ,EAAWje,MAAQ,GACzBme,EAAuB,MAAjBF,EAAWje,IAEjB0d,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAAGC,EAAM,EAqBrC,OAnBAD,IADAC,GAAOP,EAAMa,KACE,GAGfR,IADAC,GAAOP,EAAMc,KACE,GACfP,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMe,KACE,GACfR,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMgB,EAAMf,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1CjE,GAZPsE,GAAO,QAYiB,IAlBxBC,GAAO,QAiBPH,GAAO,QACoC,IAH3CC,GAAO,OAG+CngC,KAAKq7B,WAS/DmC,EAAcP,IAAMO,EAAcgD,SAQlChD,EAAcoD,OAAS,SAAgBC,GAGnC,GAFKvF,EAAOuF,KACRA,EAAU3D,EAAU2D,IACpBA,EAAQlD,SACR,MAAM/vC,MAAM,oBAaZ,IAWAkzC,EAAQ7C,EAAK8C,EArBjB,GAAI5F,EAIA,OAAKn7B,KAAKq7B,WACS,aAAfr7B,KAAKyiB,OACY,IAAjBoe,EAAQre,MAAgC,IAAlBqe,EAAQpe,KAU3BqZ,GANI97B,KAAKq7B,SAAWF,EAAK6F,MAAQ7F,EAAK8F,OACzCjhC,KAAKwiB,IACLxiB,KAAKyiB,KACLoe,EAAQre,IACRqe,EAAQpe,MAES0Y,EAAKuF,WAAY1gC,KAAKq7B,UARhCr7B,KAWf,GAAIA,KAAK29B,SACL,OAAO39B,KAAKq7B,SAAWW,EAAQnJ,EAEnC,GAAK7yB,KAAKq7B,SA6BH,CAKH,GAFKwF,EAAQxF,WACTwF,EAAUA,EAAQK,cAClBL,EAAQx9B,GAAGrD,MACX,OAAOg8B,EACX,GAAI6E,EAAQx9B,GAAGrD,KAAKmhC,KAAK,IACrB,OAAO7D,EACXyD,EAAM/E,MAtCU,CAGhB,GAAIh8B,KAAK69B,GAAGzB,GACR,OAAIyE,EAAQhD,GAAGR,IAAQwD,EAAQhD,GAAGN,GACvBnB,EACFyE,EAAQhD,GAAGzB,GACTiB,GAIPyD,EADe9gC,KAAKohC,IAAI,GACNrD,IAAI8C,GAASQ,IAAI,IACxBxD,GAAGhL,GACHgO,EAAQjD,aAAeP,EAAME,GAEpCU,EAAMj+B,KAAKgB,IAAI6/B,EAAQ5D,IAAI6D,IAC3BC,EAAMD,EAAOhgC,IAAIm9B,EAAIF,IAAI8C,KAI9B,GAAIA,EAAQhD,GAAGzB,GAClB,OAAOp8B,KAAKq7B,SAAWW,EAAQnJ,EACnC,GAAI7yB,KAAK49B,aACL,OAAIiD,EAAQjD,aACD59B,KAAKs8B,MAAMyB,IAAI8C,EAAQvE,OAC3Bt8B,KAAKs8B,MAAMyB,IAAI8C,GAASvE,MAC5B,GAAIuE,EAAQjD,aACf,OAAO59B,KAAK+9B,IAAI8C,EAAQvE,OAAOA,MACnCyE,EAAMlO,EAmBV,IADAoL,EAAMj+B,KACCi+B,EAAIoB,IAAIwB,IAAU,CAGrBC,EAAS17B,KAAKE,IAAI,EAAGF,KAAK+pB,MAAM8O,EAAIP,WAAamD,EAAQnD,aAWzD,IAPA,IAAI4D,EAAOl8B,KAAKuO,KAAKvO,KAAKlc,IAAI43C,GAAU17B,KAAKgqB,KACzCmS,EAASD,GAAQ,GAAM,EAAI5E,EAAQ,EAAG4E,EAAO,IAI7CE,EAAYzF,EAAW+E,GACvBW,EAAYD,EAAUvE,IAAI4D,GACvBY,EAAU7D,cAAgB6D,EAAUp+B,GAAG46B,IAG1CwD,GADAD,EAAYzF,EADZ+E,GAAUS,EACqBvhC,KAAKq7B,WACd4B,IAAI4D,GAK1BW,EAAU7D,WACV6D,EAAYnE,GAEhB0D,EAAMA,EAAIjgC,IAAI0gC,GACdvD,EAAMA,EAAIj9B,IAAIygC,GAElB,OAAOV,GASXvD,EAAcO,IAAMP,EAAcoD,OAOlCpD,EAAckE,OAAS,SAAgBb,GAKnC,OAJKvF,EAAOuF,KACRA,EAAU3D,EAAU2D,IAGpB1F,EAOOW,GANI97B,KAAKq7B,SAAWF,EAAKwG,MAAQxG,EAAKyG,OACzC5hC,KAAKwiB,IACLxiB,KAAKyiB,KACLoe,EAAQre,IACRqe,EAAQpe,MAES0Y,EAAKuF,WAAY1gC,KAAKq7B,UAGxCr7B,KAAKgB,IAAIhB,KAAK+9B,IAAI8C,GAAS5D,IAAI4D,KAS1CrD,EAAcvM,IAAMuM,EAAckE,OAQlClE,EAAcS,IAAMT,EAAckE,OAMlClE,EAAciC,IAAM,WAChB,OAAO3D,GAAU97B,KAAKwiB,KAAMxiB,KAAKyiB,KAAMziB,KAAKq7B,WAQhDmC,EAAcqE,IAAM,SAAa7O,GAG7B,OAFKsI,EAAOtI,KACRA,EAAQkK,EAAUlK,IACf8I,EAAS97B,KAAKwiB,IAAMwQ,EAAMxQ,IAAKxiB,KAAKyiB,KAAOuQ,EAAMvQ,KAAMziB,KAAKq7B,WAQvEmC,EAAcpvB,GAAK,SAAY4kB,GAG3B,OAFKsI,EAAOtI,KACRA,EAAQkK,EAAUlK,IACf8I,EAAS97B,KAAKwiB,IAAMwQ,EAAMxQ,IAAKxiB,KAAKyiB,KAAOuQ,EAAMvQ,KAAMziB,KAAKq7B,WAQvEmC,EAAcsE,IAAM,SAAa9O,GAG7B,OAFKsI,EAAOtI,KACRA,EAAQkK,EAAUlK,IACf8I,EAAS97B,KAAKwiB,IAAMwQ,EAAMxQ,IAAKxiB,KAAKyiB,KAAOuQ,EAAMvQ,KAAMziB,KAAKq7B,WAQvEmC,EAAcuE,UAAY,SAAmBC,GAGzC,OAFI1G,EAAO0G,KACPA,EAAUA,EAAQvE,SACE,IAAnBuE,GAAW,IACLhiC,KACFgiC,EAAU,GACRlG,EAAS97B,KAAKwiB,KAAOwf,EAAUhiC,KAAKyiB,MAAQuf,EAAYhiC,KAAKwiB,MAAS,GAAKwf,EAAWhiC,KAAKq7B,UAE3FS,EAAS,EAAG97B,KAAKwiB,KAAQwf,EAAU,GAAKhiC,KAAKq7B,WAS5DmC,EAAc6D,IAAM7D,EAAcuE,UAOlCvE,EAAcyE,WAAa,SAAoBD,GAG3C,OAFI1G,EAAO0G,KACPA,EAAUA,EAAQvE,SACE,IAAnBuE,GAAW,IACLhiC,KACFgiC,EAAU,GACRlG,EAAU97B,KAAKwiB,MAAQwf,EAAYhiC,KAAKyiB,MAAS,GAAKuf,EAAWhiC,KAAKyiB,MAAQuf,EAAShiC,KAAKq7B,UAE5FS,EAAS97B,KAAKyiB,MAASuf,EAAU,GAAKhiC,KAAKyiB,MAAQ,EAAI,GAAK,EAAGziB,KAAKq7B,WASnFmC,EAAc4D,IAAM5D,EAAcyE,WAOlCzE,EAAc0E,mBAAqB,SAA4BF,GAI3D,GAHI1G,EAAO0G,KACPA,EAAUA,EAAQvE,SAEN,IADhBuE,GAAW,IAEP,OAAOhiC,KAEP,IAAIyiB,EAAOziB,KAAKyiB,KAChB,OAAIuf,EAAU,GAEHlG,EADG97B,KAAKwiB,MACUwf,EAAYvf,GAAS,GAAKuf,EAAWvf,IAASuf,EAAShiC,KAAKq7B,UAE9ES,EADY,KAAZkG,EACSvf,EAEAA,IAAUuf,EAAU,GAFd,EAAGhiC,KAAKq7B,WAY1CmC,EAAc2D,KAAO3D,EAAc0E,mBAQnC1E,EAAc2E,MAAQ3E,EAAc0E,mBAMpC1E,EAAc4E,SAAW,WACrB,OAAKpiC,KAAKq7B,SAEHS,EAAS97B,KAAKwiB,IAAKxiB,KAAKyiB,MAAM,GAD1BziB,MAQfw9B,EAAc0D,WAAa,WACvB,OAAIlhC,KAAKq7B,SACEr7B,KACJ87B,EAAS97B,KAAKwiB,IAAKxiB,KAAKyiB,MAAM,IAQzC+a,EAAc6E,QAAU,SAAiBrzC,GACrC,OAAOA,EAAKgR,KAAKsiC,YAActiC,KAAKuiC,aAOxC/E,EAAc8E,UAAY,WACtB,IAAIxR,EAAK9wB,KAAKyiB,KACVoO,EAAK7wB,KAAKwiB,IACd,MAAO,CACS,IAAZqO,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,GACK,IAAZC,EACAA,IAAQ,EAAI,IACZA,IAAO,GAAK,IACZA,IAAO,KAQf0M,EAAc+E,UAAY,WACtB,IAAIzR,EAAK9wB,KAAKyiB,KACVoO,EAAK7wB,KAAKwiB,IACd,MAAO,CACHsO,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,EACAD,IAAO,GACPA,IAAO,GAAK,IACZA,IAAQ,EAAI,IACA,IAAZA,IAWR8B,EAAK6P,UAAY,SAAmBpW,EAAOiP,EAAUrsC,GACjD,OAAOA,EAAK2jC,EAAK8P,YAAYrW,EAAOiP,GAAY1I,EAAK+P,YAAYtW,EAAOiP,IAS5E1I,EAAK8P,YAAc,SAAqBrW,EAAOiP,GAC3C,OAAO,IAAI1I,EACPvG,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,GACNA,EAAM,IAAO,EACbA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZiP,IAUR1I,EAAK+P,YAAc,SAAqBtW,EAAOiP,GAC3C,OAAO,IAAI1I,EACPvG,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNA,EAAM,IAAM,GACZA,EAAM,IAAM,GACZA,EAAM,IAAO,EACbA,EAAM,GACNiP,K,kCCryCR,IA6BYsH,EAAiBC,EAdrBC,EAfJC,EAAY,EAAQ,MAGpBC,EAAUD,EAAUE,OAAQC,EAAUH,EAAUI,OAAQC,EAAQL,EAAUM,KAG1EC,EAAQP,EAAUQ,MAAe,UAAMR,EAAUQ,MAAe,QAAI,IAExED,EAAMR,OAOEA,EAAO,IAaNU,SACGZ,EAAa,IAAIC,EAASzR,OAAOyB,OAAO+P,IACrCA,EAAW,GAAK,kBAAoB,EAC3CC,EAAOD,EAAW,GAAK,yBAA2B,EAClDC,EAAOD,EAAW,GAAK,yBAA2B,EAClDC,EAAOD,EAAW,GAAK,wBAA0B,EACjDC,EAAOD,EAAW,GAAK,wBAA0B,EACjDC,EAAOD,EAAW,GAAK,cAAgB,EAChCC,GAGXC,EAAKW,eAAiB,WA8BlB,SAASA,EAAeC,GAMpB,GALAzjC,KAAK0jC,OAAS,GACd1jC,KAAK2jC,KAAO,GACZ3jC,KAAKsO,QAAU,GACftO,KAAK4jC,QAAU,GACf5jC,KAAK6jC,OAAS,GACVJ,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAoqBhD,OA3pBA69C,EAAexzC,UAAUid,KAAO,GAQhCu2B,EAAexzC,UAAU8zC,YAAc,GAQvCN,EAAexzC,UAAU+zC,UAAY,GAQrCP,EAAexzC,UAAU4xB,KAAO,EAQhC4hB,EAAexzC,UAAU/J,EAAI,EAQ7Bu9C,EAAexzC,UAAUrK,EAAIw9C,EAAMxQ,KAAOwQ,EAAMxQ,KAAKmJ,SAAS,EAAE,GAAE,GAAS,EAQ3E0H,EAAexzC,UAAUnK,EAAIs9C,EAAMa,UAAU,IAQ7CR,EAAexzC,UAAUnL,EAAI,KAQ7B2+C,EAAexzC,UAAUxJ,EAAI,KAQ7Bg9C,EAAexzC,UAAU0zC,OAASP,EAAMc,WAQxCT,EAAexzC,UAAU2zC,KAAOR,EAAMc,WAQtCT,EAAexzC,UAAUse,QAAU60B,EAAMc,WAQzCT,EAAexzC,UAAU4zC,QAAUT,EAAMc,WAQzCT,EAAexzC,UAAU6zC,OAASV,EAAMc,WAUxCT,EAAe5Q,OAAS,SAAgB6Q,GACpC,OAAO,IAAID,EAAeC,IAY9BD,EAAepW,OAAS,SAAgB5vB,EAAS0mC,GAe7C,GAdKA,IACDA,EAASjB,EAAQrQ,UACD,MAAhBp1B,EAAQyP,MAAgBzP,EAAQtX,eAAe,SAC/Cg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQyP,MAC3C,MAAbzP,EAAQvX,GAAauX,EAAQtX,eAAe,MAC5Cg+C,EAAOC,OAA8B,IAAIC,MAAM5mC,EAAQvX,GAC1C,MAAbuX,EAAQ7X,GAAa6X,EAAQtX,eAAe,MAC5Cg+C,EAAOC,OAA8B,IAAIE,MAAM7mC,EAAQ7X,GAC1C,MAAb6X,EAAQ3X,GAAa2X,EAAQtX,eAAe,MAC5Cg+C,EAAOC,OAA8B,IAAI/X,MAAM5uB,EAAQ3X,GAC1C,MAAb2X,EAAQ3Y,GAAa2Y,EAAQtX,eAAe,MAC5Cm9C,EAAMR,KAAKyB,YAAYlX,OAAO5vB,EAAQ3Y,EAAGq/C,EAAOC,OAA8B,IAAII,QAAQC,SAC7E,MAAbhnC,EAAQhX,GAAagX,EAAQtX,eAAe,MAC5Cm9C,EAAMR,KAAK4B,WAAWrX,OAAO5vB,EAAQhX,EAAG09C,EAAOC,OAA8B,IAAII,QAAQC,SACvE,MAAlBhnC,EAAQkmC,QAAkBlmC,EAAQkmC,OAAO17C,OAAQ,CACjDk8C,EAAOC,OAA8B,IAAII,OACzC,IAAK,IAAI5+C,EAAI,EAAGA,EAAI6X,EAAQkmC,OAAO17C,SAAUrC,EACzCu+C,EAAOE,MAAM5mC,EAAQkmC,OAAO/9C,IAChCu+C,EAAOM,SAEX,GAAoB,MAAhBhnC,EAAQmmC,MAAgBnmC,EAAQmmC,KAAK37C,OAAQ,CAE7C,IADAk8C,EAAOC,OAA8B,IAAII,OAChC5+C,EAAI,EAAGA,EAAI6X,EAAQmmC,KAAK37C,SAAUrC,EACvCu+C,EAAOG,MAAM7mC,EAAQmmC,KAAKh+C,IAC9Bu+C,EAAOM,SAEX,GAAuB,MAAnBhnC,EAAQ8Q,SAAmB9Q,EAAQ8Q,QAAQtmB,OAC3C,IAASrC,EAAI,EAAGA,EAAI6X,EAAQ8Q,QAAQtmB,SAAUrC,EAC1Cu+C,EAAOC,OAA8B,IAAI/X,MAAM5uB,EAAQ8Q,QAAQ3oB,IACvE,GAAuB,MAAnB6X,EAAQomC,SAAmBpmC,EAAQomC,QAAQ57C,OAC3C,IAASrC,EAAI,EAAGA,EAAI6X,EAAQomC,QAAQ57C,SAAUrC,EAC1C09C,EAAMR,KAAKyB,YAAYlX,OAAO5vB,EAAQomC,QAAQj+C,GAAIu+C,EAAOC,OAA+B,IAAII,QAAQC,SAC5G,GAAsB,MAAlBhnC,EAAQqmC,QAAkBrmC,EAAQqmC,OAAO77C,OACzC,IAASrC,EAAI,EAAGA,EAAI6X,EAAQqmC,OAAO77C,SAAUrC,EACzC09C,EAAMR,KAAK4B,WAAWrX,OAAO5vB,EAAQqmC,OAAOl+C,GAAIu+C,EAAOC,OAA+B,IAAII,QAAQC,SAO1G,OANyB,MAArBhnC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,cACpDg+C,EAAOC,OAA+B,KAAK3d,OAAOhpB,EAAQumC,WAC1C,MAAhBvmC,EAAQokB,MAAgBpkB,EAAQtX,eAAe,SAC/Cg+C,EAAOC,OAA+B,KAAK5R,MAAM/0B,EAAQokB,MAClC,MAAvBpkB,EAAQsmC,aAAuBtmC,EAAQtX,eAAe,gBACtDg+C,EAAOC,OAA+B,KAAK3d,OAAOhpB,EAAQsmC,aACvDI,GAYXV,EAAekB,gBAAkB,SAAyBlnC,EAAS0mC,GAC/D,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxChB,EAAe/lB,OAAS,SAAgBknB,EAAQ38C,GACtC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKW,eACrFmB,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQyP,KAAO03B,EAAOne,SACtB,MACJ,KAAK,GACDhpB,EAAQsmC,YAAca,EAAOne,SAC7B,MACJ,KAAK,GACDhpB,EAAQumC,UAAYY,EAAOne,SAC3B,MACJ,KAAK,GACDhpB,EAAQokB,KAAO+iB,EAAOpS,QACtB,MACJ,KAAK,EACD/0B,EAAQvX,EAAI0+C,EAAOP,QACnB,MACJ,KAAK,EACD5mC,EAAQ7X,EAAIg/C,EAAON,QACnB,MACJ,KAAK,EACD7mC,EAAQ3X,EAAI8+C,EAAOvY,QACnB,MACJ,KAAK,EACD5uB,EAAQ3Y,EAAIw+C,EAAMR,KAAKyB,YAAY7mB,OAAOknB,EAAQA,EAAOR,UACzD,MACJ,KAAK,EACD3mC,EAAQhX,EAAI68C,EAAMR,KAAK4B,WAAWhnB,OAAOknB,EAAQA,EAAOR,UACxD,MACJ,KAAK,EAGD,GAFM3mC,EAAQkmC,QAAUlmC,EAAQkmC,OAAO17C,SACnCwV,EAAQkmC,OAAS,IACH,IAAP,EAANkB,GAED,IADA,IAAIC,EAAOF,EAAOR,SAAWQ,EAAOtW,IAC7BsW,EAAOtW,IAAMwW,GAChBrnC,EAAQkmC,OAAOx0C,KAAKy1C,EAAOP,cAE/B5mC,EAAQkmC,OAAOx0C,KAAKy1C,EAAOP,SAC/B,MACJ,KAAK,EAGD,GAFM5mC,EAAQmmC,MAAQnmC,EAAQmmC,KAAK37C,SAC/BwV,EAAQmmC,KAAO,IACD,IAAP,EAANiB,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOtW,IAC7BsW,EAAOtW,IAAMwW,GAChBrnC,EAAQmmC,KAAKz0C,KAAKy1C,EAAON,cAE7B7mC,EAAQmmC,KAAKz0C,KAAKy1C,EAAON,SAC7B,MACJ,KAAK,EACK7mC,EAAQ8Q,SAAW9Q,EAAQ8Q,QAAQtmB,SACrCwV,EAAQ8Q,QAAU,IACtB9Q,EAAQ8Q,QAAQpf,KAAKy1C,EAAOvY,SAC5B,MACJ,KAAK,GACK5uB,EAAQomC,SAAWpmC,EAAQomC,QAAQ57C,SACrCwV,EAAQomC,QAAU,IACtBpmC,EAAQomC,QAAQ10C,KAAKm0C,EAAMR,KAAKyB,YAAY7mB,OAAOknB,EAAQA,EAAOR,WAClE,MACJ,KAAK,GACK3mC,EAAQqmC,QAAUrmC,EAAQqmC,OAAO77C,SACnCwV,EAAQqmC,OAAS,IACrBrmC,EAAQqmC,OAAO30C,KAAKm0C,EAAMR,KAAK4B,WAAWhnB,OAAOknB,EAAQA,EAAOR,WAChE,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaXgmC,EAAeuB,gBAAkB,SAAyBJ,GAGtD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCX,EAAewB,OAAS,SAAgBxnC,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC1Ci9C,EAAM8B,SAASznC,EAAQyP,MACxB,MAAO,wBACf,GAA2B,MAAvBzP,EAAQsmC,aAAuBtmC,EAAQtX,eAAe,iBACjDi9C,EAAM8B,SAASznC,EAAQsmC,aACxB,MAAO,+BACf,GAAyB,MAArBtmC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eAC/Ci9C,EAAM8B,SAASznC,EAAQumC,WACxB,MAAO,6BACf,GAAoB,MAAhBvmC,EAAQokB,MAAgBpkB,EAAQtX,eAAe,QAC/C,OAAQsX,EAAQokB,MAChB,QACI,MAAO,4BACX,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,IAGT,GAAiB,MAAbpkB,EAAQvX,GAAauX,EAAQtX,eAAe,MACnB,iBAAdsX,EAAQvX,EACf,MAAO,qBACf,GAAiB,MAAbuX,EAAQ7X,GAAa6X,EAAQtX,eAAe,QACvCi9C,EAAM+B,UAAU1nC,EAAQ7X,IAAQ6X,EAAQ7X,GAAKw9C,EAAM+B,UAAU1nC,EAAQ7X,EAAE68B,MAAQ2gB,EAAM+B,UAAU1nC,EAAQ7X,EAAE88B,OAC1G,MAAO,2BACf,GAAiB,MAAbjlB,EAAQ3X,GAAa2X,EAAQtX,eAAe,QACtCsX,EAAQ3X,GAAiC,iBAArB2X,EAAQ3X,EAAEmC,QAAuBm7C,EAAM8B,SAASznC,EAAQ3X,IAC9E,MAAO,qBACf,GAAiB,MAAb2X,EAAQ3Y,GAAa2Y,EAAQtX,eAAe,OACxCuC,EAAQ46C,EAAMR,KAAKyB,YAAYU,OAAOxnC,EAAQ3Y,IAE9C,MAAO,KAAO4D,EAEtB,GAAiB,MAAb+U,EAAQhX,GAAagX,EAAQtX,eAAe,OACxCuC,EAAQ46C,EAAMR,KAAK4B,WAAWO,OAAOxnC,EAAQhX,IAE7C,MAAO,KAAOiC,EAEtB,GAAsB,MAAlB+U,EAAQkmC,QAAkBlmC,EAAQtX,eAAe,UAAW,CAC5D,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQkmC,QACvB,MAAO,yBACX,IAAK,IAAI/9C,EAAI,EAAGA,EAAI6X,EAAQkmC,OAAO17C,SAAUrC,EACzC,GAAiC,iBAAtB6X,EAAQkmC,OAAO/9C,GACtB,MAAO,4BAEnB,GAAoB,MAAhB6X,EAAQmmC,MAAgBnmC,EAAQtX,eAAe,QAAS,CACxD,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQmmC,MACvB,MAAO,uBACX,IAASh+C,EAAI,EAAGA,EAAI6X,EAAQmmC,KAAK37C,SAAUrC,EACvC,KAAKw9C,EAAM+B,UAAU1nC,EAAQmmC,KAAKh+C,KAAS6X,EAAQmmC,KAAKh+C,IAAMw9C,EAAM+B,UAAU1nC,EAAQmmC,KAAKh+C,GAAG68B,MAAQ2gB,EAAM+B,UAAU1nC,EAAQmmC,KAAKh+C,GAAG88B,OAClI,MAAO,gCAEnB,GAAuB,MAAnBjlB,EAAQ8Q,SAAmB9Q,EAAQtX,eAAe,WAAY,CAC9D,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQ8Q,SACvB,MAAO,0BACX,IAAS3oB,EAAI,EAAGA,EAAI6X,EAAQ8Q,QAAQtmB,SAAUrC,EAC1C,KAAM6X,EAAQ8Q,QAAQ3oB,IAA2C,iBAA9B6X,EAAQ8Q,QAAQ3oB,GAAGqC,QAAuBm7C,EAAM8B,SAASznC,EAAQ8Q,QAAQ3oB,KACxG,MAAO,6BAEnB,GAAuB,MAAnB6X,EAAQomC,SAAmBpmC,EAAQtX,eAAe,WAAY,CAC9D,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQomC,SACvB,MAAO,0BACX,IAASj+C,EAAI,EAAGA,EAAI6X,EAAQomC,QAAQ57C,SAAUrC,EAE1C,GADI8C,EAAQ46C,EAAMR,KAAKyB,YAAYU,OAAOxnC,EAAQomC,QAAQj+C,IAEtD,MAAO,WAAa8C,EAGhC,GAAsB,MAAlB+U,EAAQqmC,QAAkBrmC,EAAQtX,eAAe,UAAW,CAC5D,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQqmC,QACvB,MAAO,yBACX,IAASl+C,EAAI,EAAGA,EAAI6X,EAAQqmC,OAAO77C,SAAUrC,EAAG,CAC5C,IAAI8C,EACJ,GADIA,EAAQ46C,EAAMR,KAAK4B,WAAWO,OAAOxnC,EAAQqmC,OAAOl+C,IAEpD,MAAO,UAAY8C,GAG/B,OAAO,MAWX+6C,EAAe4B,WAAa,SAAoBC,GAC5C,GAAIA,aAAkBhC,EAAMR,KAAKW,eAC7B,OAAO6B,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKW,eAO7B,OANmB,MAAf6B,EAAOp4B,OACPzP,EAAQyP,KAAO1hB,OAAO85C,EAAOp4B,OACP,MAAtBo4B,EAAOvB,cACPtmC,EAAQsmC,YAAcv4C,OAAO85C,EAAOvB,cAChB,MAApBuB,EAAOtB,YACPvmC,EAAQumC,UAAYx4C,OAAO85C,EAAOtB,YAC9BsB,EAAOzjB,MACf,IAAK,YACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,MACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,QACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,SACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,OACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,UACL,KAAK,EACDpkB,EAAQokB,KAAO,EACf,MACJ,IAAK,SACL,KAAK,GACDpkB,EAAQokB,KAAO,GAmBnB,GAhBgB,MAAZyjB,EAAOp/C,IACPuX,EAAQvX,EAAIyqB,OAAO20B,EAAOp/C,IACd,MAAZo/C,EAAO1/C,IACHw9C,EAAMxQ,MACLn1B,EAAQ7X,EAAIw9C,EAAMxQ,KAAKuK,UAAUmI,EAAO1/C,IAAI01C,UAAW,EAC/B,iBAAbgK,EAAO1/C,EACnB6X,EAAQ7X,EAAIo3C,SAASsI,EAAO1/C,EAAG,IACN,iBAAb0/C,EAAO1/C,EACnB6X,EAAQ7X,EAAI0/C,EAAO1/C,EACM,iBAAb0/C,EAAO1/C,IACnB6X,EAAQ7X,EAAI,IAAIw9C,EAAMmC,SAASD,EAAO1/C,EAAE68B,MAAQ,EAAG6iB,EAAO1/C,EAAE88B,OAAS,GAAGib,aAChE,MAAZ2H,EAAOx/C,IACiB,iBAAbw/C,EAAOx/C,EACds9C,EAAMnW,OAAOvP,OAAO4nB,EAAOx/C,EAAG2X,EAAQ3X,EAAIs9C,EAAMa,UAAUb,EAAMnW,OAAOhlC,OAAOq9C,EAAOx/C,IAAK,GACrFw/C,EAAOx/C,EAAEmC,SACdwV,EAAQ3X,EAAIw/C,EAAOx/C,IACX,MAAZw/C,EAAOxgD,EAAW,CAClB,GAAwB,iBAAbwgD,EAAOxgD,EACd,MAAM21C,UAAU,2CACpBh9B,EAAQ3Y,EAAIw+C,EAAMR,KAAKyB,YAAYc,WAAWC,EAAOxgD,GAEzD,GAAgB,MAAZwgD,EAAO7+C,EAAW,CAClB,GAAwB,iBAAb6+C,EAAO7+C,EACd,MAAMg0C,UAAU,2CACpBh9B,EAAQhX,EAAI68C,EAAMR,KAAK4B,WAAWW,WAAWC,EAAO7+C,GAExD,GAAI6+C,EAAO3B,OAAQ,CACf,IAAK1vB,MAAMmxB,QAAQE,EAAO3B,QACtB,MAAMlJ,UAAU,+CACpBh9B,EAAQkmC,OAAS,GACjB,IAAK,IAAI/9C,EAAI,EAAGA,EAAI0/C,EAAO3B,OAAO17C,SAAUrC,EACxC6X,EAAQkmC,OAAO/9C,GAAK+qB,OAAO20B,EAAO3B,OAAO/9C,IAEjD,GAAI0/C,EAAO1B,KAAM,CACb,IAAK3vB,MAAMmxB,QAAQE,EAAO1B,MACtB,MAAMnJ,UAAU,6CAEpB,IADAh9B,EAAQmmC,KAAO,GACNh+C,EAAI,EAAGA,EAAI0/C,EAAO1B,KAAK37C,SAAUrC,EAClCw9C,EAAMxQ,MACLn1B,EAAQmmC,KAAKh+C,GAAKw9C,EAAMxQ,KAAKuK,UAAUmI,EAAO1B,KAAKh+C,KAAK01C,UAAW,EACrC,iBAAnBgK,EAAO1B,KAAKh+C,GACxB6X,EAAQmmC,KAAKh+C,GAAKo3C,SAASsI,EAAO1B,KAAKh+C,GAAI,IACZ,iBAAnB0/C,EAAO1B,KAAKh+C,GACxB6X,EAAQmmC,KAAKh+C,GAAK0/C,EAAO1B,KAAKh+C,GACC,iBAAnB0/C,EAAO1B,KAAKh+C,KACxB6X,EAAQmmC,KAAKh+C,GAAK,IAAIw9C,EAAMmC,SAASD,EAAO1B,KAAKh+C,GAAG68B,MAAQ,EAAG6iB,EAAO1B,KAAKh+C,GAAG88B,OAAS,GAAGib,YAEtG,GAAI2H,EAAO/2B,QAAS,CAChB,IAAK0F,MAAMmxB,QAAQE,EAAO/2B,SACtB,MAAMksB,UAAU,gDAEpB,IADAh9B,EAAQ8Q,QAAU,GACT3oB,EAAI,EAAGA,EAAI0/C,EAAO/2B,QAAQtmB,SAAUrC,EACR,iBAAtB0/C,EAAO/2B,QAAQ3oB,GACtBw9C,EAAMnW,OAAOvP,OAAO4nB,EAAO/2B,QAAQ3oB,GAAI6X,EAAQ8Q,QAAQ3oB,GAAKw9C,EAAMa,UAAUb,EAAMnW,OAAOhlC,OAAOq9C,EAAO/2B,QAAQ3oB,KAAM,GAChH0/C,EAAO/2B,QAAQ3oB,GAAGqC,SACvBwV,EAAQ8Q,QAAQ3oB,GAAK0/C,EAAO/2B,QAAQ3oB,IAEhD,GAAI0/C,EAAOzB,QAAS,CAChB,IAAK5vB,MAAMmxB,QAAQE,EAAOzB,SACtB,MAAMpJ,UAAU,gDAEpB,IADAh9B,EAAQomC,QAAU,GACTj+C,EAAI,EAAGA,EAAI0/C,EAAOzB,QAAQ57C,SAAUrC,EAAG,CAC5C,GAAiC,iBAAtB0/C,EAAOzB,QAAQj+C,GACtB,MAAM60C,UAAU,iDACpBh9B,EAAQomC,QAAQj+C,GAAK09C,EAAMR,KAAKyB,YAAYc,WAAWC,EAAOzB,QAAQj+C,KAG9E,GAAI0/C,EAAOxB,OAAQ,CACf,IAAK7vB,MAAMmxB,QAAQE,EAAOxB,QACtB,MAAMrJ,UAAU,+CAEpB,IADAh9B,EAAQqmC,OAAS,GACRl+C,EAAI,EAAGA,EAAI0/C,EAAOxB,OAAO77C,SAAUrC,EAAG,CAC3C,GAAgC,iBAArB0/C,EAAOxB,OAAOl+C,GACrB,MAAM60C,UAAU,gDACpBh9B,EAAQqmC,OAAOl+C,GAAK09C,EAAMR,KAAK4B,WAAWW,WAAWC,EAAOxB,OAAOl+C,KAG3E,OAAO6X,GAYXgmC,EAAe+B,SAAW,SAAkB/nC,EAASgoC,GAC5CA,IACDA,EAAU,IACd,IAAIH,EAAS,GAQb,IAPIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAO3B,OAAS,GAChB2B,EAAO1B,KAAO,GACd0B,EAAO/2B,QAAU,GACjB+2B,EAAOzB,QAAU,GACjByB,EAAOxB,OAAS,IAEhB2B,EAAQE,SAAU,CAGlB,GAFAL,EAAOp4B,KAAO,GACdo4B,EAAOp/C,EAAI,EACPk9C,EAAMxQ,KAAM,CACZ,IAAIgT,EAAO,IAAIxC,EAAMxQ,KAAK,EAAG,GAAG,GAChC0S,EAAO1/C,EAAI6/C,EAAQI,QAAUr6C,OAASo6C,EAAKlyB,WAAa+xB,EAAQI,QAAUl1B,OAASi1B,EAAKjI,WAAaiI,OAErGN,EAAO1/C,EAAI6/C,EAAQI,QAAUr6C,OAAS,IAAM,EAC5Ci6C,EAAQpZ,QAAU7gC,OAClB85C,EAAOx/C,EAAI,IAEXw/C,EAAOx/C,EAAI,GACP2/C,EAAQpZ,QAAUpY,QAClBqxB,EAAOx/C,EAAIs9C,EAAMa,UAAUqB,EAAOx/C,KAE1Cw/C,EAAOxgD,EAAI,KACXwgD,EAAO7+C,EAAI,KACX6+C,EAAOtB,UAAY,GACnBsB,EAAOzjB,KAAO4jB,EAAQK,QAAUt6C,OAAS,YAAc,EACvD85C,EAAOvB,YAAc,GAiBzB,GAfoB,MAAhBtmC,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC/Cm/C,EAAOp4B,KAAOzP,EAAQyP,MACT,MAAbzP,EAAQvX,GAAauX,EAAQtX,eAAe,OAC5Cm/C,EAAOp/C,EAAIu/C,EAAQM,OAASC,SAASvoC,EAAQvX,GAAKsF,OAAOiS,EAAQvX,GAAKuX,EAAQvX,GACjE,MAAbuX,EAAQ7X,GAAa6X,EAAQtX,eAAe,OACnB,iBAAdsX,EAAQ7X,EACf0/C,EAAO1/C,EAAI6/C,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQ7X,GAAK6X,EAAQ7X,EAElE0/C,EAAO1/C,EAAI6/C,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQ7X,GAAK6/C,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQ7X,EAAE68B,MAAQ,EAAGhlB,EAAQ7X,EAAE88B,OAAS,GAAGib,WAAalgC,EAAQ7X,GAC3L,MAAb6X,EAAQ3X,GAAa2X,EAAQtX,eAAe,OAC5Cm/C,EAAOx/C,EAAI2/C,EAAQpZ,QAAU7gC,OAAS43C,EAAMnW,OAAOI,OAAO5vB,EAAQ3X,EAAG,EAAG2X,EAAQ3X,EAAEmC,QAAUw9C,EAAQpZ,QAAUpY,MAAQA,MAAMhkB,UAAU9H,MAAMspC,KAAKh0B,EAAQ3X,GAAK2X,EAAQ3X,GACzJ,MAAb2X,EAAQ3Y,GAAa2Y,EAAQtX,eAAe,OAC5Cm/C,EAAOxgD,EAAIw+C,EAAMR,KAAKyB,YAAYiB,SAAS/nC,EAAQ3Y,EAAG2gD,IACzC,MAAbhoC,EAAQhX,GAAagX,EAAQtX,eAAe,OAC5Cm/C,EAAO7+C,EAAI68C,EAAMR,KAAK4B,WAAWc,SAAS/nC,EAAQhX,EAAGg/C,IACrDhoC,EAAQkmC,QAAUlmC,EAAQkmC,OAAO17C,OAAQ,CACzCq9C,EAAO3B,OAAS,GAChB,IAAK,IAAIh4C,EAAI,EAAGA,EAAI8R,EAAQkmC,OAAO17C,SAAU0D,EACzC25C,EAAO3B,OAAOh4C,GAAK85C,EAAQM,OAASC,SAASvoC,EAAQkmC,OAAOh4C,IAAMH,OAAOiS,EAAQkmC,OAAOh4C,IAAM8R,EAAQkmC,OAAOh4C,GAErH,GAAI8R,EAAQmmC,MAAQnmC,EAAQmmC,KAAK37C,OAE7B,IADAq9C,EAAO1B,KAAO,GACLj4C,EAAI,EAAGA,EAAI8R,EAAQmmC,KAAK37C,SAAU0D,EACR,iBAApB8R,EAAQmmC,KAAKj4C,GACpB25C,EAAO1B,KAAKj4C,GAAK85C,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQmmC,KAAKj4C,IAAM8R,EAAQmmC,KAAKj4C,GAEnF25C,EAAO1B,KAAKj4C,GAAK85C,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQmmC,KAAKj4C,IAAM85C,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQmmC,KAAKj4C,GAAG82B,MAAQ,EAAGhlB,EAAQmmC,KAAKj4C,GAAG+2B,OAAS,GAAGib,WAAalgC,EAAQmmC,KAAKj4C,GAE7O,GAAI8R,EAAQ8Q,SAAW9Q,EAAQ8Q,QAAQtmB,OAEnC,IADAq9C,EAAO/2B,QAAU,GACR5iB,EAAI,EAAGA,EAAI8R,EAAQ8Q,QAAQtmB,SAAU0D,EAC1C25C,EAAO/2B,QAAQ5iB,GAAK85C,EAAQpZ,QAAU7gC,OAAS43C,EAAMnW,OAAOI,OAAO5vB,EAAQ8Q,QAAQ5iB,GAAI,EAAG8R,EAAQ8Q,QAAQ5iB,GAAG1D,QAAUw9C,EAAQpZ,QAAUpY,MAAQA,MAAMhkB,UAAU9H,MAAMspC,KAAKh0B,EAAQ8Q,QAAQ5iB,IAAM8R,EAAQ8Q,QAAQ5iB,GAE1N,GAAI8R,EAAQomC,SAAWpmC,EAAQomC,QAAQ57C,OAEnC,IADAq9C,EAAOzB,QAAU,GACRl4C,EAAI,EAAGA,EAAI8R,EAAQomC,QAAQ57C,SAAU0D,EAC1C25C,EAAOzB,QAAQl4C,GAAK23C,EAAMR,KAAKyB,YAAYiB,SAAS/nC,EAAQomC,QAAQl4C,GAAI85C,GAEhF,GAAIhoC,EAAQqmC,QAAUrmC,EAAQqmC,OAAO77C,OAEjC,IADAq9C,EAAOxB,OAAS,GACPn4C,EAAI,EAAGA,EAAI8R,EAAQqmC,OAAO77C,SAAU0D,EACzC25C,EAAOxB,OAAOn4C,GAAK23C,EAAMR,KAAK4B,WAAWc,SAAS/nC,EAAQqmC,OAAOn4C,GAAI85C,GAQ7E,OANyB,MAArBhoC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eACpDm/C,EAAOtB,UAAYvmC,EAAQumC,WACX,MAAhBvmC,EAAQokB,MAAgBpkB,EAAQtX,eAAe,UAC/Cm/C,EAAOzjB,KAAO4jB,EAAQK,QAAUt6C,OAAS83C,EAAMR,KAAKW,eAAewC,cAAcxoC,EAAQokB,MAAQpkB,EAAQokB,MAClF,MAAvBpkB,EAAQsmC,aAAuBtmC,EAAQtX,eAAe,iBACtDm/C,EAAOvB,YAActmC,EAAQsmC,aAC1BuB,GAUX7B,EAAexzC,UAAUkrC,OAAS,WAC9B,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAmB1D1C,EAAewC,cAAgB,WAC3B,IAAIrD,EAAa,GAAIC,EAASzR,OAAOyB,OAAO+P,GAY5C,OAXAC,EAAOD,EAAW,GAAK,aAAe,EACtCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,OAAS,EAChCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,IAAM,UAAY,GAC7BC,EAboB,GAgBxBY,EA3sBW,GA8sBtBX,EAAKsD,eAAiB,WAmBlB,SAASA,EAAe1C,GACpB,GAAIA,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAmNhD,OA1MAwgD,EAAen2C,UAAUid,KAAO,GAQhCk5B,EAAen2C,UAAU4xB,KAAO,KAQhCukB,EAAen2C,UAAU+zC,UAAY,GAUrCoC,EAAevT,OAAS,SAAgB6Q,GACpC,OAAO,IAAI0C,EAAe1C,IAY9B0C,EAAe/Y,OAAS,SAAgB5vB,EAAS0mC,GAS7C,OARKA,IACDA,EAASjB,EAAQrQ,UACD,MAAhBp1B,EAAQyP,MAAgBzP,EAAQtX,eAAe,SAC/Cg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQyP,MACxC,MAAhBzP,EAAQokB,MAAgBpkB,EAAQtX,eAAe,SAC/Cm9C,EAAMR,KAAKuD,UAAUhZ,OAAO5vB,EAAQokB,KAAMsiB,EAAOC,OAA8B,IAAII,QAAQC,SACtE,MAArBhnC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,cACpDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQumC,WACrDG,GAYXiC,EAAezB,gBAAkB,SAAyBlnC,EAAS0mC,GAC/D,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxC2B,EAAe1oB,OAAS,SAAgBknB,EAAQ38C,GACtC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKsD,eACrFxB,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQyP,KAAO03B,EAAOne,SACtB,MACJ,KAAK,EACDhpB,EAAQokB,KAAOyhB,EAAMR,KAAKuD,UAAU3oB,OAAOknB,EAAQA,EAAOR,UAC1D,MACJ,KAAK,EACD3mC,EAAQumC,UAAYY,EAAOne,SAC3B,MACJ,QACIme,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX2oC,EAAepB,gBAAkB,SAAyBJ,GAGtD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCgC,EAAenB,OAAS,SAAgBxnC,GACpC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC1Ci9C,EAAM8B,SAASznC,EAAQyP,MACxB,MAAO,wBACf,GAAoB,MAAhBzP,EAAQokB,MAAgBpkB,EAAQtX,eAAe,QAAS,CACxD,IAAIuC,EAAQ46C,EAAMR,KAAKuD,UAAUpB,OAAOxnC,EAAQokB,MAChD,GAAIn5B,EACA,MAAO,QAAUA,EAEzB,OAAyB,MAArB+U,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eAC/Ci9C,EAAM8B,SAASznC,EAAQumC,WACjB,6BACR,MAWXoC,EAAef,WAAa,SAAoBC,GAC5C,GAAIA,aAAkBhC,EAAMR,KAAKsD,eAC7B,OAAOd,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKsD,eAG7B,GAFmB,MAAfd,EAAOp4B,OACPzP,EAAQyP,KAAO1hB,OAAO85C,EAAOp4B,OACd,MAAfo4B,EAAOzjB,KAAc,CACrB,GAA2B,iBAAhByjB,EAAOzjB,KACd,MAAM4Y,UAAU,8CACpBh9B,EAAQokB,KAAOyhB,EAAMR,KAAKuD,UAAUhB,WAAWC,EAAOzjB,MAI1D,OAFwB,MAApByjB,EAAOtB,YACPvmC,EAAQumC,UAAYx4C,OAAO85C,EAAOtB,YAC/BvmC,GAYX2oC,EAAeZ,SAAW,SAAkB/nC,EAASgoC,GAC5CA,IACDA,EAAU,IACd,IAAIH,EAAS,GAYb,OAXIG,EAAQE,WACRL,EAAOp4B,KAAO,GACdo4B,EAAOzjB,KAAO,KACdyjB,EAAOtB,UAAY,IAEH,MAAhBvmC,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC/Cm/C,EAAOp4B,KAAOzP,EAAQyP,MACN,MAAhBzP,EAAQokB,MAAgBpkB,EAAQtX,eAAe,UAC/Cm/C,EAAOzjB,KAAOyhB,EAAMR,KAAKuD,UAAUb,SAAS/nC,EAAQokB,KAAM4jB,IACrC,MAArBhoC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eACpDm/C,EAAOtB,UAAYvmC,EAAQumC,WACxBsB,GAUXc,EAAen2C,UAAUkrC,OAAS,WAC9B,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDC,EA1OW,GA6OtBtD,EAAKwD,UAAY,WAuBb,SAASA,EAAU5C,GAIf,GAHAzjC,KAAKsmC,MAAQ,GACbtmC,KAAK+gB,OAAS,GACd/gB,KAAKumC,UAAY,GACb9C,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAsVhD,OA7UA0gD,EAAUr2C,UAAUs2C,MAAQnD,EAAMc,WAQlCoC,EAAUr2C,UAAU+wB,OAASoiB,EAAMc,WAQnCoC,EAAUr2C,UAAUid,KAAO,GAQ3Bo5B,EAAUr2C,UAAUw2C,OAAS,GAQ7BH,EAAUr2C,UAAUy2C,OAAS,GAQ7BJ,EAAUr2C,UAAUu2C,UAAYpD,EAAMc,WAQtCoC,EAAUr2C,UAAU+zC,UAAY,GAUhCsC,EAAUzT,OAAS,SAAgB6Q,GAC/B,OAAO,IAAI4C,EAAU5C,IAYzB4C,EAAUjZ,OAAS,SAAgB5vB,EAAS0mC,GAGxC,GAFKA,IACDA,EAASjB,EAAQrQ,UACA,MAAjBp1B,EAAQ8oC,OAAiB9oC,EAAQ8oC,MAAMt+C,OACvC,IAAK,IAAIrC,EAAI,EAAGA,EAAI6X,EAAQ8oC,MAAMt+C,SAAUrC,EACxCu+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQ8oC,MAAM3gD,IACtE,GAAsB,MAAlB6X,EAAQujB,QAAkBvjB,EAAQujB,OAAO/4B,OACzC,IAASrC,EAAI,EAAGA,EAAI6X,EAAQujB,OAAO/4B,SAAUrC,EACzCu+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQujB,OAAOp7B,IAKvE,GAJoB,MAAhB6X,EAAQyP,MAAgBzP,EAAQtX,eAAe,SAC/Cg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQyP,MACtC,MAAlBzP,EAAQgpC,QAAkBhpC,EAAQtX,eAAe,WACjDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQgpC,QACnC,MAArBhpC,EAAQ+oC,WAAqB/oC,EAAQ+oC,UAAUv+C,OAC/C,IAASrC,EAAI,EAAGA,EAAI6X,EAAQ+oC,UAAUv+C,SAAUrC,EAC5C09C,EAAMR,KAAKW,eAAepW,OAAO5vB,EAAQ+oC,UAAU5gD,GAAIu+C,EAAOC,OAA8B,IAAII,QAAQC,SAKhH,OAJyB,MAArBhnC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,cACpDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQumC,WACtC,MAAlBvmC,EAAQipC,QAAkBjpC,EAAQtX,eAAe,WACjDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQipC,QACrDvC,GAYXmC,EAAU3B,gBAAkB,SAAyBlnC,EAAS0mC,GAC1D,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxC6B,EAAU5oB,OAAS,SAAgBknB,EAAQ38C,GACjC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKwD,UACrF1B,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACKpnC,EAAQ8oC,OAAS9oC,EAAQ8oC,MAAMt+C,SACjCwV,EAAQ8oC,MAAQ,IACpB9oC,EAAQ8oC,MAAMp3C,KAAKy1C,EAAOne,UAC1B,MACJ,KAAK,EACKhpB,EAAQujB,QAAUvjB,EAAQujB,OAAO/4B,SACnCwV,EAAQujB,OAAS,IACrBvjB,EAAQujB,OAAO7xB,KAAKy1C,EAAOne,UAC3B,MACJ,KAAK,EACDhpB,EAAQyP,KAAO03B,EAAOne,SACtB,MACJ,KAAK,EACDhpB,EAAQgpC,OAAS7B,EAAOne,SACxB,MACJ,KAAK,EACDhpB,EAAQipC,OAAS9B,EAAOne,SACxB,MACJ,KAAK,EACKhpB,EAAQ+oC,WAAa/oC,EAAQ+oC,UAAUv+C,SACzCwV,EAAQ+oC,UAAY,IACxB/oC,EAAQ+oC,UAAUr3C,KAAKm0C,EAAMR,KAAKW,eAAe/lB,OAAOknB,EAAQA,EAAOR,WACvE,MACJ,KAAK,EACD3mC,EAAQumC,UAAYY,EAAOne,SAC3B,MACJ,QACIme,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX6oC,EAAUtB,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCkC,EAAUrB,OAAS,SAAgBxnC,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAqB,MAAjBA,EAAQ8oC,OAAiB9oC,EAAQtX,eAAe,SAAU,CAC1D,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQ8oC,OACvB,MAAO,wBACX,IAAK,IAAI3gD,EAAI,EAAGA,EAAI6X,EAAQ8oC,MAAMt+C,SAAUrC,EACxC,IAAKw9C,EAAM8B,SAASznC,EAAQ8oC,MAAM3gD,IAC9B,MAAO,2BAEnB,GAAsB,MAAlB6X,EAAQujB,QAAkBvjB,EAAQtX,eAAe,UAAW,CAC5D,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQujB,QACvB,MAAO,yBACX,IAASp7B,EAAI,EAAGA,EAAI6X,EAAQujB,OAAO/4B,SAAUrC,EACzC,IAAKw9C,EAAM8B,SAASznC,EAAQujB,OAAOp7B,IAC/B,MAAO,4BAEnB,GAAoB,MAAhB6X,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC1Ci9C,EAAM8B,SAASznC,EAAQyP,MACxB,MAAO,wBACf,GAAsB,MAAlBzP,EAAQgpC,QAAkBhpC,EAAQtX,eAAe,YAC5Ci9C,EAAM8B,SAASznC,EAAQgpC,QACxB,MAAO,0BACf,GAAsB,MAAlBhpC,EAAQipC,QAAkBjpC,EAAQtX,eAAe,YAC5Ci9C,EAAM8B,SAASznC,EAAQipC,QACxB,MAAO,0BACf,GAAyB,MAArBjpC,EAAQ+oC,WAAqB/oC,EAAQtX,eAAe,aAAc,CAClE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQ+oC,WACvB,MAAO,4BACX,IAAS5gD,EAAI,EAAGA,EAAI6X,EAAQ+oC,UAAUv+C,SAAUrC,EAAG,CAC/C,IAAI8C,EAAQ46C,EAAMR,KAAKW,eAAewB,OAAOxnC,EAAQ+oC,UAAU5gD,IAC/D,GAAI8C,EACA,MAAO,aAAeA,GAGlC,OAAyB,MAArB+U,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eAC/Ci9C,EAAM8B,SAASznC,EAAQumC,WACjB,6BACR,MAWXsC,EAAUjB,WAAa,SAAoBC,GACvC,GAAIA,aAAkBhC,EAAMR,KAAKwD,UAC7B,OAAOhB,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKwD,UAC7B,GAAIhB,EAAOiB,MAAO,CACd,IAAKtyB,MAAMmxB,QAAQE,EAAOiB,OACtB,MAAM9L,UAAU,yCACpBh9B,EAAQ8oC,MAAQ,GAChB,IAAK,IAAI3gD,EAAI,EAAGA,EAAI0/C,EAAOiB,MAAMt+C,SAAUrC,EACvC6X,EAAQ8oC,MAAM3gD,GAAK4F,OAAO85C,EAAOiB,MAAM3gD,IAE/C,GAAI0/C,EAAOtkB,OAAQ,CACf,IAAK/M,MAAMmxB,QAAQE,EAAOtkB,QACtB,MAAMyZ,UAAU,0CAEpB,IADAh9B,EAAQujB,OAAS,GACRp7B,EAAI,EAAGA,EAAI0/C,EAAOtkB,OAAO/4B,SAAUrC,EACxC6X,EAAQujB,OAAOp7B,GAAK4F,OAAO85C,EAAOtkB,OAAOp7B,IAQjD,GANmB,MAAf0/C,EAAOp4B,OACPzP,EAAQyP,KAAO1hB,OAAO85C,EAAOp4B,OACZ,MAAjBo4B,EAAOmB,SACPhpC,EAAQgpC,OAASj7C,OAAO85C,EAAOmB,SACd,MAAjBnB,EAAOoB,SACPjpC,EAAQipC,OAASl7C,OAAO85C,EAAOoB,SAC/BpB,EAAOkB,UAAW,CAClB,IAAKvyB,MAAMmxB,QAAQE,EAAOkB,WACtB,MAAM/L,UAAU,6CAEpB,IADAh9B,EAAQ+oC,UAAY,GACX5gD,EAAI,EAAGA,EAAI0/C,EAAOkB,UAAUv+C,SAAUrC,EAAG,CAC9C,GAAmC,iBAAxB0/C,EAAOkB,UAAU5gD,GACxB,MAAM60C,UAAU,8CACpBh9B,EAAQ+oC,UAAU5gD,GAAK09C,EAAMR,KAAKW,eAAe4B,WAAWC,EAAOkB,UAAU5gD,KAKrF,OAFwB,MAApB0/C,EAAOtB,YACPvmC,EAAQumC,UAAYx4C,OAAO85C,EAAOtB,YAC/BvmC,GAYX6oC,EAAUd,SAAW,SAAkB/nC,EAASgoC,GACvCA,IACDA,EAAU,IACd,IAAIH,EAAS,GAYb,IAXIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOiB,MAAQ,GACfjB,EAAOtkB,OAAS,GAChBskB,EAAOkB,UAAY,IAEnBf,EAAQE,WACRL,EAAOp4B,KAAO,GACdo4B,EAAOmB,OAAS,GAChBnB,EAAOtB,UAAY,GACnBsB,EAAOoB,OAAS,IAEhBjpC,EAAQ8oC,OAAS9oC,EAAQ8oC,MAAMt+C,OAAQ,CACvCq9C,EAAOiB,MAAQ,GACf,IAAK,IAAI56C,EAAI,EAAGA,EAAI8R,EAAQ8oC,MAAMt+C,SAAU0D,EACxC25C,EAAOiB,MAAM56C,GAAK8R,EAAQ8oC,MAAM56C,GAExC,GAAI8R,EAAQujB,QAAUvjB,EAAQujB,OAAO/4B,OAEjC,IADAq9C,EAAOtkB,OAAS,GACPr1B,EAAI,EAAGA,EAAI8R,EAAQujB,OAAO/4B,SAAU0D,EACzC25C,EAAOtkB,OAAOr1B,GAAK8R,EAAQujB,OAAOr1B,GAM1C,GAJoB,MAAhB8R,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC/Cm/C,EAAOp4B,KAAOzP,EAAQyP,MACJ,MAAlBzP,EAAQgpC,QAAkBhpC,EAAQtX,eAAe,YACjDm/C,EAAOmB,OAAShpC,EAAQgpC,QACxBhpC,EAAQ+oC,WAAa/oC,EAAQ+oC,UAAUv+C,OAEvC,IADAq9C,EAAOkB,UAAY,GACV76C,EAAI,EAAGA,EAAI8R,EAAQ+oC,UAAUv+C,SAAU0D,EAC5C25C,EAAOkB,UAAU76C,GAAK23C,EAAMR,KAAKW,eAAe+B,SAAS/nC,EAAQ+oC,UAAU76C,GAAI85C,GAMvF,OAJyB,MAArBhoC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eACpDm/C,EAAOtB,UAAYvmC,EAAQumC,WACT,MAAlBvmC,EAAQipC,QAAkBjpC,EAAQtX,eAAe,YACjDm/C,EAAOoB,OAASjpC,EAAQipC,QACrBpB,GAUXgB,EAAUr2C,UAAUkrC,OAAS,WACzB,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDG,EApXM,GAuXjBxD,EAAK6D,WAAa,WAyBd,SAASA,EAAWjD,GAGhB,GAFAzjC,KAAK2mC,YAAc,GACnB3mC,KAAK4mC,cAAgB,GACjBnD,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAuZhD,OA9YA+gD,EAAW12C,UAAU62C,UAAY1D,EAAMxQ,KAAOwQ,EAAMxQ,KAAKmJ,SAAS,EAAE,GAAE,GAAS,EAQ/E4K,EAAW12C,UAAU22C,YAAcxD,EAAMc,WAQzCyC,EAAW12C,UAAU82C,aAAe,GAQpCJ,EAAW12C,UAAU+2C,gBAAkB,GAQvCL,EAAW12C,UAAUy2C,OAAS,GAQ9BC,EAAW12C,UAAUg3C,aAAe7D,EAAMxQ,KAAOwQ,EAAMxQ,KAAKmJ,SAAS,EAAE,GAAE,GAAS,EAQlF4K,EAAW12C,UAAU+zC,UAAY,GAQjC2C,EAAW12C,UAAUi3C,MAAQ,KAQ7BP,EAAW12C,UAAU42C,cAAgBzD,EAAMc,WAU3CyC,EAAW9T,OAAS,SAAgB6Q,GAChC,OAAO,IAAIiD,EAAWjD,IAY1BiD,EAAWtZ,OAAS,SAAgB5vB,EAAS0mC,GAiBzC,GAhBKA,IACDA,EAASjB,EAAQrQ,UACI,MAArBp1B,EAAQqpC,WAAqBrpC,EAAQtX,eAAe,cACpDg+C,EAAOC,OAA8B,GAAGE,MAAM7mC,EAAQqpC,WAC9B,MAAxBrpC,EAAQspC,cAAwBtpC,EAAQtX,eAAe,iBACvDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQspC,cAC7B,MAA3BtpC,EAAQupC,iBAA2BvpC,EAAQtX,eAAe,oBAC1Dg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQupC,iBACtC,MAAlBvpC,EAAQipC,QAAkBjpC,EAAQtX,eAAe,WACjDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQipC,QAChC,MAAxBjpC,EAAQwpC,cAAwBxpC,EAAQtX,eAAe,iBACvDg+C,EAAOC,OAA8B,IAAIE,MAAM7mC,EAAQwpC,cAClC,MAArBxpC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,cACpDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQumC,WACvC,MAAjBvmC,EAAQypC,OAAiBzpC,EAAQtX,eAAe,UAChDm9C,EAAMR,KAAK4B,WAAWrX,OAAO5vB,EAAQypC,MAAO/C,EAAOC,OAA8B,IAAII,QAAQC,SACtE,MAAvBhnC,EAAQmpC,aAAuBnpC,EAAQmpC,YAAY3+C,OACnD,IAAK,IAAIrC,EAAI,EAAGA,EAAI6X,EAAQmpC,YAAY3+C,SAAUrC,EAC9C09C,EAAMR,KAAKqE,mBAAmB9Z,OAAO5vB,EAAQmpC,YAAYhhD,GAAIu+C,EAAOC,OAA8B,IAAII,QAAQC,SACtH,GAA6B,MAAzBhnC,EAAQopC,eAAyBppC,EAAQopC,cAAc5+C,OACvD,IAASrC,EAAI,EAAGA,EAAI6X,EAAQopC,cAAc5+C,SAAUrC,EAChD09C,EAAMR,KAAKsE,uBAAuB/Z,OAAO5vB,EAAQopC,cAAcjhD,GAAIu+C,EAAOC,OAA+B,KAAKI,QAAQC,SAC9H,OAAON,GAYXwC,EAAWhC,gBAAkB,SAAyBlnC,EAAS0mC,GAC3D,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxCkC,EAAWjpB,OAAS,SAAgBknB,EAAQ38C,GAClC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAK6D,WACrF/B,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQqpC,UAAYlC,EAAON,QAC3B,MACJ,KAAK,EACK7mC,EAAQmpC,aAAenpC,EAAQmpC,YAAY3+C,SAC7CwV,EAAQmpC,YAAc,IAC1BnpC,EAAQmpC,YAAYz3C,KAAKm0C,EAAMR,KAAKqE,mBAAmBzpB,OAAOknB,EAAQA,EAAOR,WAC7E,MACJ,KAAK,EACD3mC,EAAQspC,aAAenC,EAAOne,SAC9B,MACJ,KAAK,EACDhpB,EAAQupC,gBAAkBpC,EAAOne,SACjC,MACJ,KAAK,EACDhpB,EAAQipC,OAAS9B,EAAOne,SACxB,MACJ,KAAK,EACDhpB,EAAQwpC,aAAerC,EAAON,QAC9B,MACJ,KAAK,EACD7mC,EAAQumC,UAAYY,EAAOne,SAC3B,MACJ,KAAK,EACDhpB,EAAQypC,MAAQ5D,EAAMR,KAAK4B,WAAWhnB,OAAOknB,EAAQA,EAAOR,UAC5D,MACJ,KAAK,GACK3mC,EAAQopC,eAAiBppC,EAAQopC,cAAc5+C,SACjDwV,EAAQopC,cAAgB,IAC5BppC,EAAQopC,cAAc13C,KAAKm0C,EAAMR,KAAKsE,uBAAuB1pB,OAAOknB,EAAQA,EAAOR,WACnF,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaXkpC,EAAW3B,gBAAkB,SAAyBJ,GAGlD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCuC,EAAW1B,OAAS,SAAgBxnC,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAyB,MAArBA,EAAQqpC,WAAqBrpC,EAAQtX,eAAe,gBAC/Ci9C,EAAM+B,UAAU1nC,EAAQqpC,YAAgBrpC,EAAQqpC,WAAa1D,EAAM+B,UAAU1nC,EAAQqpC,UAAUrkB,MAAQ2gB,EAAM+B,UAAU1nC,EAAQqpC,UAAUpkB,OAC1I,MAAO,mCACf,GAA2B,MAAvBjlB,EAAQmpC,aAAuBnpC,EAAQtX,eAAe,eAAgB,CACtE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQmpC,aACvB,MAAO,8BACX,IAAK,IAAIhhD,EAAI,EAAGA,EAAI6X,EAAQmpC,YAAY3+C,SAAUrC,EAE9C,GADI8C,EAAQ46C,EAAMR,KAAKqE,mBAAmBlC,OAAOxnC,EAAQmpC,YAAYhhD,IAEjE,MAAO,eAAiB8C,EAGpC,GAA4B,MAAxB+U,EAAQspC,cAAwBtpC,EAAQtX,eAAe,kBAClDi9C,EAAM8B,SAASznC,EAAQspC,cACxB,MAAO,gCACf,GAA+B,MAA3BtpC,EAAQupC,iBAA2BvpC,EAAQtX,eAAe,qBACrDi9C,EAAM8B,SAASznC,EAAQupC,iBACxB,MAAO,mCACf,GAAsB,MAAlBvpC,EAAQipC,QAAkBjpC,EAAQtX,eAAe,YAC5Ci9C,EAAM8B,SAASznC,EAAQipC,QACxB,MAAO,0BACf,GAA4B,MAAxBjpC,EAAQwpC,cAAwBxpC,EAAQtX,eAAe,mBAClDi9C,EAAM+B,UAAU1nC,EAAQwpC,eAAmBxpC,EAAQwpC,cAAgB7D,EAAM+B,UAAU1nC,EAAQwpC,aAAaxkB,MAAQ2gB,EAAM+B,UAAU1nC,EAAQwpC,aAAavkB,OACtJ,MAAO,sCACf,GAAyB,MAArBjlB,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eAC/Ci9C,EAAM8B,SAASznC,EAAQumC,WACxB,MAAO,6BACf,GAAqB,MAAjBvmC,EAAQypC,OAAiBzpC,EAAQtX,eAAe,WAC5CuC,EAAQ46C,EAAMR,KAAK4B,WAAWO,OAAOxnC,EAAQypC,QAE7C,MAAO,SAAWx+C,EAE1B,GAA6B,MAAzB+U,EAAQopC,eAAyBppC,EAAQtX,eAAe,iBAAkB,CAC1E,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQopC,eACvB,MAAO,gCACX,IAASjhD,EAAI,EAAGA,EAAI6X,EAAQopC,cAAc5+C,SAAUrC,EAAG,CACnD,IAAI8C,EACJ,GADIA,EAAQ46C,EAAMR,KAAKsE,uBAAuBnC,OAAOxnC,EAAQopC,cAAcjhD,IAEvE,MAAO,iBAAmB8C,GAGtC,OAAO,MAWXi+C,EAAWtB,WAAa,SAAoBC,GACxC,GAAIA,aAAkBhC,EAAMR,KAAK6D,WAC7B,OAAOrB,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAK6D,WAU7B,GATwB,MAApBrB,EAAOwB,YACH1D,EAAMxQ,MACLn1B,EAAQqpC,UAAY1D,EAAMxQ,KAAKuK,UAAUmI,EAAOwB,YAAYxL,UAAW,EACvC,iBAArBgK,EAAOwB,UACnBrpC,EAAQqpC,UAAY9J,SAASsI,EAAOwB,UAAW,IACd,iBAArBxB,EAAOwB,UACnBrpC,EAAQqpC,UAAYxB,EAAOwB,UACM,iBAArBxB,EAAOwB,YACnBrpC,EAAQqpC,UAAY,IAAI1D,EAAMmC,SAASD,EAAOwB,UAAUrkB,MAAQ,EAAG6iB,EAAOwB,UAAUpkB,OAAS,GAAGib,aACpG2H,EAAOsB,YAAa,CACpB,IAAK3yB,MAAMmxB,QAAQE,EAAOsB,aACtB,MAAMnM,UAAU,gDACpBh9B,EAAQmpC,YAAc,GACtB,IAAK,IAAIhhD,EAAI,EAAGA,EAAI0/C,EAAOsB,YAAY3+C,SAAUrC,EAAG,CAChD,GAAqC,iBAA1B0/C,EAAOsB,YAAYhhD,GAC1B,MAAM60C,UAAU,iDACpBh9B,EAAQmpC,YAAYhhD,GAAK09C,EAAMR,KAAKqE,mBAAmB9B,WAAWC,EAAOsB,YAAYhhD,KAoB7F,GAjB2B,MAAvB0/C,EAAOyB,eACPtpC,EAAQspC,aAAev7C,OAAO85C,EAAOyB,eACX,MAA1BzB,EAAO0B,kBACPvpC,EAAQupC,gBAAkBx7C,OAAO85C,EAAO0B,kBACvB,MAAjB1B,EAAOoB,SACPjpC,EAAQipC,OAASl7C,OAAO85C,EAAOoB,SACR,MAAvBpB,EAAO2B,eACH7D,EAAMxQ,MACLn1B,EAAQwpC,aAAe7D,EAAMxQ,KAAKuK,UAAUmI,EAAO2B,eAAe3L,UAAW,EAC1C,iBAAxBgK,EAAO2B,aACnBxpC,EAAQwpC,aAAejK,SAASsI,EAAO2B,aAAc,IACjB,iBAAxB3B,EAAO2B,aACnBxpC,EAAQwpC,aAAe3B,EAAO2B,aACM,iBAAxB3B,EAAO2B,eACnBxpC,EAAQwpC,aAAe,IAAI7D,EAAMmC,SAASD,EAAO2B,aAAaxkB,MAAQ,EAAG6iB,EAAO2B,aAAavkB,OAAS,GAAGib,aACzF,MAApB2H,EAAOtB,YACPvmC,EAAQumC,UAAYx4C,OAAO85C,EAAOtB,YAClB,MAAhBsB,EAAO4B,MAAe,CACtB,GAA4B,iBAAjB5B,EAAO4B,MACd,MAAMzM,UAAU,2CACpBh9B,EAAQypC,MAAQ5D,EAAMR,KAAK4B,WAAWW,WAAWC,EAAO4B,OAE5D,GAAI5B,EAAOuB,cAAe,CACtB,IAAK5yB,MAAMmxB,QAAQE,EAAOuB,eACtB,MAAMpM,UAAU,kDAEpB,IADAh9B,EAAQopC,cAAgB,GACfjhD,EAAI,EAAGA,EAAI0/C,EAAOuB,cAAc5+C,SAAUrC,EAAG,CAClD,GAAuC,iBAA5B0/C,EAAOuB,cAAcjhD,GAC5B,MAAM60C,UAAU,mDACpBh9B,EAAQopC,cAAcjhD,GAAK09C,EAAMR,KAAKsE,uBAAuB/B,WAAWC,EAAOuB,cAAcjhD,KAGrG,OAAO6X,GAYXkpC,EAAWnB,SAAW,SAAkB/nC,EAASgoC,GACxCA,IACDA,EAAU,IACd,IAAIH,EAAS,GAKb,IAJIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOsB,YAAc,GACrBtB,EAAOuB,cAAgB,IAEvBpB,EAAQE,SAAU,CAClB,GAAIvC,EAAMxQ,KAAM,CACZ,IAAIgT,EAAO,IAAIxC,EAAMxQ,KAAK,EAAG,GAAG,GAChC0S,EAAOwB,UAAYrB,EAAQI,QAAUr6C,OAASo6C,EAAKlyB,WAAa+xB,EAAQI,QAAUl1B,OAASi1B,EAAKjI,WAAaiI,OAE7GN,EAAOwB,UAAYrB,EAAQI,QAAUr6C,OAAS,IAAM,EACxD85C,EAAOyB,aAAe,GACtBzB,EAAO0B,gBAAkB,GACzB1B,EAAOoB,OAAS,GACZtD,EAAMxQ,MACFgT,EAAO,IAAIxC,EAAMxQ,KAAK,EAAG,GAAG,GAChC0S,EAAO2B,aAAexB,EAAQI,QAAUr6C,OAASo6C,EAAKlyB,WAAa+xB,EAAQI,QAAUl1B,OAASi1B,EAAKjI,WAAaiI,GAEhHN,EAAO2B,aAAexB,EAAQI,QAAUr6C,OAAS,IAAM,EAC3D85C,EAAOtB,UAAY,GACnBsB,EAAO4B,MAAQ,KAsBnB,GApByB,MAArBzpC,EAAQqpC,WAAqBrpC,EAAQtX,eAAe,eACnB,iBAAtBsX,EAAQqpC,UACfxB,EAAOwB,UAAYrB,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQqpC,WAAarpC,EAAQqpC,UAElFxB,EAAOwB,UAAYrB,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQqpC,WAAarB,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQqpC,UAAUrkB,MAAQ,EAAGhlB,EAAQqpC,UAAUpkB,OAAS,GAAGib,WAAalgC,EAAQqpC,WAChN,MAAxBrpC,EAAQspC,cAAwBtpC,EAAQtX,eAAe,kBACvDm/C,EAAOyB,aAAetpC,EAAQspC,cACH,MAA3BtpC,EAAQupC,iBAA2BvpC,EAAQtX,eAAe,qBAC1Dm/C,EAAO0B,gBAAkBvpC,EAAQupC,iBACf,MAAlBvpC,EAAQipC,QAAkBjpC,EAAQtX,eAAe,YACjDm/C,EAAOoB,OAASjpC,EAAQipC,QACA,MAAxBjpC,EAAQwpC,cAAwBxpC,EAAQtX,eAAe,kBACnB,iBAAzBsX,EAAQwpC,aACf3B,EAAO2B,aAAexB,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQwpC,cAAgBxpC,EAAQwpC,aAExF3B,EAAO2B,aAAexB,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQwpC,cAAgBxB,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQwpC,aAAaxkB,MAAQ,EAAGhlB,EAAQwpC,aAAavkB,OAAS,GAAGib,WAAalgC,EAAQwpC,cAC/N,MAArBxpC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eACpDm/C,EAAOtB,UAAYvmC,EAAQumC,WACV,MAAjBvmC,EAAQypC,OAAiBzpC,EAAQtX,eAAe,WAChDm/C,EAAO4B,MAAQ5D,EAAMR,KAAK4B,WAAWc,SAAS/nC,EAAQypC,MAAOzB,IAC7DhoC,EAAQmpC,aAAenpC,EAAQmpC,YAAY3+C,OAAQ,CACnDq9C,EAAOsB,YAAc,GACrB,IAAK,IAAIj7C,EAAI,EAAGA,EAAI8R,EAAQmpC,YAAY3+C,SAAU0D,EAC9C25C,EAAOsB,YAAYj7C,GAAK23C,EAAMR,KAAKqE,mBAAmB3B,SAAS/nC,EAAQmpC,YAAYj7C,GAAI85C,GAE/F,GAAIhoC,EAAQopC,eAAiBppC,EAAQopC,cAAc5+C,OAE/C,IADAq9C,EAAOuB,cAAgB,GACdl7C,EAAI,EAAGA,EAAI8R,EAAQopC,cAAc5+C,SAAU0D,EAChD25C,EAAOuB,cAAcl7C,GAAK23C,EAAMR,KAAKsE,uBAAuB5B,SAAS/nC,EAAQopC,cAAcl7C,GAAI85C,GAEvG,OAAOH,GAUXqB,EAAW12C,UAAUkrC,OAAS,WAC1B,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDQ,EAtbO,GAyblB7D,EAAKsE,uBAAyB,WAkB1B,SAASA,EAAuB1D,GAC5B,GAAIA,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAyLhD,OAhLAwhD,EAAuBn3C,UAAUurB,IAAM,GAQvC4rB,EAAuBn3C,UAAUiyB,MAAQ,GAUzCklB,EAAuBvU,OAAS,SAAgB6Q,GAC5C,OAAO,IAAI0D,EAAuB1D,IAYtC0D,EAAuB/Z,OAAS,SAAgB5vB,EAAS0mC,GAOrD,OANKA,IACDA,EAASjB,EAAQrQ,UACF,MAAfp1B,EAAQ+d,KAAe/d,EAAQtX,eAAe,QAC9Cg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQ+d,KACvC,MAAjB/d,EAAQykB,OAAiBzkB,EAAQtX,eAAe,UAChDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQykB,OACrDiiB,GAYXiD,EAAuBzC,gBAAkB,SAAyBlnC,EAAS0mC,GACvE,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxC2C,EAAuB1pB,OAAS,SAAgBknB,EAAQ38C,GAC9C28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKsE,uBACrFxC,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQ+d,IAAMopB,EAAOne,SACrB,MACJ,KAAK,EACDhpB,EAAQykB,MAAQ0iB,EAAOne,SACvB,MACJ,QACIme,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX2pC,EAAuBpC,gBAAkB,SAAyBJ,GAG9D,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCgD,EAAuBnC,OAAS,SAAgBxnC,GAC5C,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACQ,MAAfA,EAAQ+d,KAAe/d,EAAQtX,eAAe,SACzCi9C,EAAM8B,SAASznC,EAAQ+d,KACjB,uBACM,MAAjB/d,EAAQykB,OAAiBzkB,EAAQtX,eAAe,WAC3Ci9C,EAAM8B,SAASznC,EAAQykB,OACjB,yBACR,MAWXklB,EAAuB/B,WAAa,SAAoBC,GACpD,GAAIA,aAAkBhC,EAAMR,KAAKsE,uBAC7B,OAAO9B,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKsE,uBAK7B,OAJkB,MAAd9B,EAAO9pB,MACP/d,EAAQ+d,IAAMhwB,OAAO85C,EAAO9pB,MACZ,MAAhB8pB,EAAOpjB,QACPzkB,EAAQykB,MAAQ12B,OAAO85C,EAAOpjB,QAC3BzkB,GAYX2pC,EAAuB5B,SAAW,SAAkB/nC,EAASgoC,GACpDA,IACDA,EAAU,IACd,IAAIH,EAAS,GASb,OARIG,EAAQE,WACRL,EAAO9pB,IAAM,GACb8pB,EAAOpjB,MAAQ,IAEA,MAAfzkB,EAAQ+d,KAAe/d,EAAQtX,eAAe,SAC9Cm/C,EAAO9pB,IAAM/d,EAAQ+d,KACJ,MAAjB/d,EAAQykB,OAAiBzkB,EAAQtX,eAAe,WAChDm/C,EAAOpjB,MAAQzkB,EAAQykB,OACpBojB,GAUX8B,EAAuBn3C,UAAUkrC,OAAS,WACtC,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDiB,EA/MmB,GAkN9BtE,EAAKuE,iBAAmB,WAkBpB,SAASA,EAAiB3D,GAEtB,GADAzjC,KAAKqnC,0BAA4B,GAC7B5D,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KA6MhD,OApMAyhD,EAAiBp3C,UAAUs3C,WAAa,GAQxCF,EAAiBp3C,UAAUq3C,0BAA4BlE,EAAMc,WAU7DmD,EAAiBxU,OAAS,SAAgB6Q,GACtC,OAAO,IAAI2D,EAAiB3D,IAYhC2D,EAAiBha,OAAS,SAAgB5vB,EAAS0mC,GAK/C,GAJKA,IACDA,EAASjB,EAAQrQ,UACK,MAAtBp1B,EAAQ8pC,YAAsB9pC,EAAQtX,eAAe,eACrDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQ8pC,YACnB,MAArC9pC,EAAQ6pC,2BAAqC7pC,EAAQ6pC,0BAA0Br/C,OAC/E,IAAK,IAAIrC,EAAI,EAAGA,EAAI6X,EAAQ6pC,0BAA0Br/C,SAAUrC,EAC5D09C,EAAMR,KAAKsE,uBAAuB/Z,OAAO5vB,EAAQ6pC,0BAA0B1hD,GAAIu+C,EAAOC,OAA8B,IAAII,QAAQC,SACxI,OAAON,GAYXkD,EAAiB1C,gBAAkB,SAAyBlnC,EAAS0mC,GACjE,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxC4C,EAAiB3pB,OAAS,SAAgBknB,EAAQ38C,GACxC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKuE,iBACrFzC,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQ8pC,WAAa3C,EAAOne,SAC5B,MACJ,KAAK,EACKhpB,EAAQ6pC,2BAA6B7pC,EAAQ6pC,0BAA0Br/C,SACzEwV,EAAQ6pC,0BAA4B,IACxC7pC,EAAQ6pC,0BAA0Bn4C,KAAKm0C,EAAMR,KAAKsE,uBAAuB1pB,OAAOknB,EAAQA,EAAOR,WAC/F,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX4pC,EAAiBrC,gBAAkB,SAAyBJ,GAGxD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCiD,EAAiBpC,OAAS,SAAgBxnC,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAA0B,MAAtBA,EAAQ8pC,YAAsB9pC,EAAQtX,eAAe,gBAChDi9C,EAAM8B,SAASznC,EAAQ8pC,YACxB,MAAO,8BACf,GAAyC,MAArC9pC,EAAQ6pC,2BAAqC7pC,EAAQtX,eAAe,6BAA8B,CAClG,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQ6pC,2BACvB,MAAO,4CACX,IAAK,IAAI1hD,EAAI,EAAGA,EAAI6X,EAAQ6pC,0BAA0Br/C,SAAUrC,EAAG,CAC/D,IAAI8C,EAAQ46C,EAAMR,KAAKsE,uBAAuBnC,OAAOxnC,EAAQ6pC,0BAA0B1hD,IACvF,GAAI8C,EACA,MAAO,6BAA+BA,GAGlD,OAAO,MAWX2+C,EAAiBhC,WAAa,SAAoBC,GAC9C,GAAIA,aAAkBhC,EAAMR,KAAKuE,iBAC7B,OAAO/B,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKuE,iBAG7B,GAFyB,MAArB/B,EAAOiC,aACP9pC,EAAQ8pC,WAAa/7C,OAAO85C,EAAOiC,aACnCjC,EAAOgC,0BAA2B,CAClC,IAAKrzB,MAAMmxB,QAAQE,EAAOgC,2BACtB,MAAM7M,UAAU,oEACpBh9B,EAAQ6pC,0BAA4B,GACpC,IAAK,IAAI1hD,EAAI,EAAGA,EAAI0/C,EAAOgC,0BAA0Br/C,SAAUrC,EAAG,CAC9D,GAAmD,iBAAxC0/C,EAAOgC,0BAA0B1hD,GACxC,MAAM60C,UAAU,qEACpBh9B,EAAQ6pC,0BAA0B1hD,GAAK09C,EAAMR,KAAKsE,uBAAuB/B,WAAWC,EAAOgC,0BAA0B1hD,KAG7H,OAAO6X,GAYX4pC,EAAiB7B,SAAW,SAAkB/nC,EAASgoC,GAC9CA,IACDA,EAAU,IACd,IAAIH,EAAS,GAOb,IANIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOgC,0BAA4B,IACnC7B,EAAQE,WACRL,EAAOiC,WAAa,IACE,MAAtB9pC,EAAQ8pC,YAAsB9pC,EAAQtX,eAAe,gBACrDm/C,EAAOiC,WAAa9pC,EAAQ8pC,YAC5B9pC,EAAQ6pC,2BAA6B7pC,EAAQ6pC,0BAA0Br/C,OAAQ,CAC/Eq9C,EAAOgC,0BAA4B,GACnC,IAAK,IAAI37C,EAAI,EAAGA,EAAI8R,EAAQ6pC,0BAA0Br/C,SAAU0D,EAC5D25C,EAAOgC,0BAA0B37C,GAAK23C,EAAMR,KAAKsE,uBAAuB5B,SAAS/nC,EAAQ6pC,0BAA0B37C,GAAI85C,GAE/H,OAAOH,GAUX+B,EAAiBp3C,UAAUkrC,OAAS,WAChC,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDkB,EApOa,GAuOxBvE,EAAK4B,WAAa,WAwBd,SAASA,EAAWhB,GAOhB,GANAzjC,KAAKlZ,KAAO,GACZkZ,KAAKunC,YAAc,GACnBvnC,KAAKsmC,MAAQ,GACbtmC,KAAK+gB,OAAS,GACd/gB,KAAKwnC,UAAY,GACjBxnC,KAAKynC,uBAAyB,GAC1BhE,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAibhD,OAxaA8+C,EAAWz0C,UAAUlJ,KAAOq8C,EAAMc,WAQlCQ,EAAWz0C,UAAUid,KAAO,GAQ5Bw3B,EAAWz0C,UAAUu3C,YAAcpE,EAAMc,WAQzCQ,EAAWz0C,UAAU+zC,UAAY,GAQjCU,EAAWz0C,UAAUs2C,MAAQnD,EAAMc,WAQnCQ,EAAWz0C,UAAU+wB,OAASoiB,EAAMc,WAQpCQ,EAAWz0C,UAAUw3C,UAAYrE,EAAMc,WAQvCQ,EAAWz0C,UAAUy3C,uBAAyBtE,EAAMc,WAUpDQ,EAAW7R,OAAS,SAAgB6Q,GAChC,OAAO,IAAIgB,EAAWhB,IAY1BgB,EAAWrX,OAAS,SAAgB5vB,EAAS0mC,GAGzC,GAFKA,IACDA,EAASjB,EAAQrQ,UACD,MAAhBp1B,EAAQ1W,MAAgB0W,EAAQ1W,KAAKkB,OACrC,IAAK,IAAIrC,EAAI,EAAGA,EAAI6X,EAAQ1W,KAAKkB,SAAUrC,EACvC09C,EAAMR,KAAKwD,UAAUjZ,OAAO5vB,EAAQ1W,KAAKnB,GAAIu+C,EAAOC,OAA8B,IAAII,QAAQC,SAGtG,GAFoB,MAAhBhnC,EAAQyP,MAAgBzP,EAAQtX,eAAe,SAC/Cg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQyP,MACjC,MAAvBzP,EAAQ+pC,aAAuB/pC,EAAQ+pC,YAAYv/C,OACnD,IAASrC,EAAI,EAAGA,EAAI6X,EAAQ+pC,YAAYv/C,SAAUrC,EAC9C09C,EAAMR,KAAKyB,YAAYlX,OAAO5vB,EAAQ+pC,YAAY5hD,GAAIu+C,EAAOC,OAA8B,IAAII,QAAQC,SAG/G,GAFyB,MAArBhnC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,cACpDg+C,EAAOC,OAA+B,IAAI3d,OAAOhpB,EAAQumC,WACxC,MAAjBvmC,EAAQ8oC,OAAiB9oC,EAAQ8oC,MAAMt+C,OACvC,IAASrC,EAAI,EAAGA,EAAI6X,EAAQ8oC,MAAMt+C,SAAUrC,EACxC09C,EAAMR,KAAKsD,eAAe/Y,OAAO5vB,EAAQ8oC,MAAM3gD,GAAIu+C,EAAOC,OAA+B,IAAII,QAAQC,SAC7G,GAAsB,MAAlBhnC,EAAQujB,QAAkBvjB,EAAQujB,OAAO/4B,OACzC,IAASrC,EAAI,EAAGA,EAAI6X,EAAQujB,OAAO/4B,SAAUrC,EACzC09C,EAAMR,KAAKsD,eAAe/Y,OAAO5vB,EAAQujB,OAAOp7B,GAAIu+C,EAAOC,OAA+B,IAAII,QAAQC,SAC9G,GAAyB,MAArBhnC,EAAQgqC,WAAqBhqC,EAAQgqC,UAAUx/C,OAC/C,IAASrC,EAAI,EAAGA,EAAI6X,EAAQgqC,UAAUx/C,SAAUrC,EAC5C09C,EAAMR,KAAKsD,eAAe/Y,OAAO5vB,EAAQgqC,UAAU7hD,GAAIu+C,EAAOC,OAA+B,KAAKI,QAAQC,SAClH,GAAsC,MAAlChnC,EAAQiqC,wBAAkCjqC,EAAQiqC,uBAAuBz/C,OACzE,IAASrC,EAAI,EAAGA,EAAI6X,EAAQiqC,uBAAuBz/C,SAAUrC,EACzD09C,EAAMR,KAAKuE,iBAAiBha,OAAO5vB,EAAQiqC,uBAAuB9hD,GAAIu+C,EAAOC,OAA+B,KAAKI,QAAQC,SACjI,OAAON,GAYXO,EAAWC,gBAAkB,SAAyBlnC,EAAS0mC,GAC3D,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxCC,EAAWhnB,OAAS,SAAgBknB,EAAQ38C,GAClC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAK4B,WACrFE,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACKpnC,EAAQ1W,MAAQ0W,EAAQ1W,KAAKkB,SAC/BwV,EAAQ1W,KAAO,IACnB0W,EAAQ1W,KAAKoI,KAAKm0C,EAAMR,KAAKwD,UAAU5oB,OAAOknB,EAAQA,EAAOR,WAC7D,MACJ,KAAK,EACD3mC,EAAQyP,KAAO03B,EAAOne,SACtB,MACJ,KAAK,EACKhpB,EAAQ+pC,aAAe/pC,EAAQ+pC,YAAYv/C,SAC7CwV,EAAQ+pC,YAAc,IAC1B/pC,EAAQ+pC,YAAYr4C,KAAKm0C,EAAMR,KAAKyB,YAAY7mB,OAAOknB,EAAQA,EAAOR,WACtE,MACJ,KAAK,GACD3mC,EAAQumC,UAAYY,EAAOne,SAC3B,MACJ,KAAK,GACKhpB,EAAQ8oC,OAAS9oC,EAAQ8oC,MAAMt+C,SACjCwV,EAAQ8oC,MAAQ,IACpB9oC,EAAQ8oC,MAAMp3C,KAAKm0C,EAAMR,KAAKsD,eAAe1oB,OAAOknB,EAAQA,EAAOR,WACnE,MACJ,KAAK,GACK3mC,EAAQujB,QAAUvjB,EAAQujB,OAAO/4B,SACnCwV,EAAQujB,OAAS,IACrBvjB,EAAQujB,OAAO7xB,KAAKm0C,EAAMR,KAAKsD,eAAe1oB,OAAOknB,EAAQA,EAAOR,WACpE,MACJ,KAAK,GACK3mC,EAAQgqC,WAAahqC,EAAQgqC,UAAUx/C,SACzCwV,EAAQgqC,UAAY,IACxBhqC,EAAQgqC,UAAUt4C,KAAKm0C,EAAMR,KAAKsD,eAAe1oB,OAAOknB,EAAQA,EAAOR,WACvE,MACJ,KAAK,GACK3mC,EAAQiqC,wBAA0BjqC,EAAQiqC,uBAAuBz/C,SACnEwV,EAAQiqC,uBAAyB,IACrCjqC,EAAQiqC,uBAAuBv4C,KAAKm0C,EAAMR,KAAKuE,iBAAiB3pB,OAAOknB,EAAQA,EAAOR,WACtF,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaXinC,EAAWM,gBAAkB,SAAyBJ,GAGlD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCM,EAAWO,OAAS,SAAgBxnC,GAChC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQ1W,MAAgB0W,EAAQtX,eAAe,QAAS,CACxD,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQ1W,MACvB,MAAO,uBACX,IAAK,IAAInB,EAAI,EAAGA,EAAI6X,EAAQ1W,KAAKkB,SAAUrC,EAEvC,GADI8C,EAAQ46C,EAAMR,KAAKwD,UAAUrB,OAAOxnC,EAAQ1W,KAAKnB,IAEjD,MAAO,QAAU8C,EAG7B,GAAoB,MAAhB+U,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC1Ci9C,EAAM8B,SAASznC,EAAQyP,MACxB,MAAO,wBACf,GAA2B,MAAvBzP,EAAQ+pC,aAAuB/pC,EAAQtX,eAAe,eAAgB,CACtE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQ+pC,aACvB,MAAO,8BACX,IAAS5hD,EAAI,EAAGA,EAAI6X,EAAQ+pC,YAAYv/C,SAAUrC,EAE9C,GADI8C,EAAQ46C,EAAMR,KAAKyB,YAAYU,OAAOxnC,EAAQ+pC,YAAY5hD,IAE1D,MAAO,eAAiB8C,EAGpC,GAAyB,MAArB+U,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eAC/Ci9C,EAAM8B,SAASznC,EAAQumC,WACxB,MAAO,6BACf,GAAqB,MAAjBvmC,EAAQ8oC,OAAiB9oC,EAAQtX,eAAe,SAAU,CAC1D,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQ8oC,OACvB,MAAO,wBACX,IAAS3gD,EAAI,EAAGA,EAAI6X,EAAQ8oC,MAAMt+C,SAAUrC,EAExC,GADI8C,EAAQ46C,EAAMR,KAAKsD,eAAenB,OAAOxnC,EAAQ8oC,MAAM3gD,IAEvD,MAAO,SAAW8C,EAG9B,GAAsB,MAAlB+U,EAAQujB,QAAkBvjB,EAAQtX,eAAe,UAAW,CAC5D,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQujB,QACvB,MAAO,yBACX,IAASp7B,EAAI,EAAGA,EAAI6X,EAAQujB,OAAO/4B,SAAUrC,EAEzC,GADI8C,EAAQ46C,EAAMR,KAAKsD,eAAenB,OAAOxnC,EAAQujB,OAAOp7B,IAExD,MAAO,UAAY8C,EAG/B,GAAyB,MAArB+U,EAAQgqC,WAAqBhqC,EAAQtX,eAAe,aAAc,CAClE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQgqC,WACvB,MAAO,4BACX,IAAS7hD,EAAI,EAAGA,EAAI6X,EAAQgqC,UAAUx/C,SAAUrC,EAE5C,GADI8C,EAAQ46C,EAAMR,KAAKsD,eAAenB,OAAOxnC,EAAQgqC,UAAU7hD,IAE3D,MAAO,aAAe8C,EAGlC,GAAsC,MAAlC+U,EAAQiqC,wBAAkCjqC,EAAQtX,eAAe,0BAA2B,CAC5F,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQiqC,wBACvB,MAAO,yCACX,IAAS9hD,EAAI,EAAGA,EAAI6X,EAAQiqC,uBAAuBz/C,SAAUrC,EAAG,CAC5D,IAAI8C,EACJ,GADIA,EAAQ46C,EAAMR,KAAKuE,iBAAiBpC,OAAOxnC,EAAQiqC,uBAAuB9hD,IAE1E,MAAO,0BAA4B8C,GAG/C,OAAO,MAWXg8C,EAAWW,WAAa,SAAoBC,GACxC,GAAIA,aAAkBhC,EAAMR,KAAK4B,WAC7B,OAAOY,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAK4B,WAC7B,GAAIY,EAAOv+C,KAAM,CACb,IAAKktB,MAAMmxB,QAAQE,EAAOv+C,MACtB,MAAM0zC,UAAU,yCACpBh9B,EAAQ1W,KAAO,GACf,IAAK,IAAInB,EAAI,EAAGA,EAAI0/C,EAAOv+C,KAAKkB,SAAUrC,EAAG,CACzC,GAA8B,iBAAnB0/C,EAAOv+C,KAAKnB,GACnB,MAAM60C,UAAU,0CACpBh9B,EAAQ1W,KAAKnB,GAAK09C,EAAMR,KAAKwD,UAAUjB,WAAWC,EAAOv+C,KAAKnB,KAKtE,GAFmB,MAAf0/C,EAAOp4B,OACPzP,EAAQyP,KAAO1hB,OAAO85C,EAAOp4B,OAC7Bo4B,EAAOkC,YAAa,CACpB,IAAKvzB,MAAMmxB,QAAQE,EAAOkC,aACtB,MAAM/M,UAAU,gDAEpB,IADAh9B,EAAQ+pC,YAAc,GACb5hD,EAAI,EAAGA,EAAI0/C,EAAOkC,YAAYv/C,SAAUrC,EAAG,CAChD,GAAqC,iBAA1B0/C,EAAOkC,YAAY5hD,GAC1B,MAAM60C,UAAU,iDACpBh9B,EAAQ+pC,YAAY5hD,GAAK09C,EAAMR,KAAKyB,YAAYc,WAAWC,EAAOkC,YAAY5hD,KAKtF,GAFwB,MAApB0/C,EAAOtB,YACPvmC,EAAQumC,UAAYx4C,OAAO85C,EAAOtB,YAClCsB,EAAOiB,MAAO,CACd,IAAKtyB,MAAMmxB,QAAQE,EAAOiB,OACtB,MAAM9L,UAAU,0CAEpB,IADAh9B,EAAQ8oC,MAAQ,GACP3gD,EAAI,EAAGA,EAAI0/C,EAAOiB,MAAMt+C,SAAUrC,EAAG,CAC1C,GAA+B,iBAApB0/C,EAAOiB,MAAM3gD,GACpB,MAAM60C,UAAU,2CACpBh9B,EAAQ8oC,MAAM3gD,GAAK09C,EAAMR,KAAKsD,eAAef,WAAWC,EAAOiB,MAAM3gD,KAG7E,GAAI0/C,EAAOtkB,OAAQ,CACf,IAAK/M,MAAMmxB,QAAQE,EAAOtkB,QACtB,MAAMyZ,UAAU,2CAEpB,IADAh9B,EAAQujB,OAAS,GACRp7B,EAAI,EAAGA,EAAI0/C,EAAOtkB,OAAO/4B,SAAUrC,EAAG,CAC3C,GAAgC,iBAArB0/C,EAAOtkB,OAAOp7B,GACrB,MAAM60C,UAAU,4CACpBh9B,EAAQujB,OAAOp7B,GAAK09C,EAAMR,KAAKsD,eAAef,WAAWC,EAAOtkB,OAAOp7B,KAG/E,GAAI0/C,EAAOmC,UAAW,CAClB,IAAKxzB,MAAMmxB,QAAQE,EAAOmC,WACtB,MAAMhN,UAAU,8CAEpB,IADAh9B,EAAQgqC,UAAY,GACX7hD,EAAI,EAAGA,EAAI0/C,EAAOmC,UAAUx/C,SAAUrC,EAAG,CAC9C,GAAmC,iBAAxB0/C,EAAOmC,UAAU7hD,GACxB,MAAM60C,UAAU,+CACpBh9B,EAAQgqC,UAAU7hD,GAAK09C,EAAMR,KAAKsD,eAAef,WAAWC,EAAOmC,UAAU7hD,KAGrF,GAAI0/C,EAAOoC,uBAAwB,CAC/B,IAAKzzB,MAAMmxB,QAAQE,EAAOoC,wBACtB,MAAMjN,UAAU,2DAEpB,IADAh9B,EAAQiqC,uBAAyB,GACxB9hD,EAAI,EAAGA,EAAI0/C,EAAOoC,uBAAuBz/C,SAAUrC,EAAG,CAC3D,GAAgD,iBAArC0/C,EAAOoC,uBAAuB9hD,GACrC,MAAM60C,UAAU,4DACpBh9B,EAAQiqC,uBAAuB9hD,GAAK09C,EAAMR,KAAKuE,iBAAiBhC,WAAWC,EAAOoC,uBAAuB9hD,KAGjH,OAAO6X,GAYXinC,EAAWc,SAAW,SAAkB/nC,EAASgoC,GACxCA,IACDA,EAAU,IACd,IAAIH,EAAS,GAab,IAZIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOv+C,KAAO,GACdu+C,EAAOkC,YAAc,GACrBlC,EAAOiB,MAAQ,GACfjB,EAAOtkB,OAAS,GAChBskB,EAAOmC,UAAY,GACnBnC,EAAOoC,uBAAyB,IAEhCjC,EAAQE,WACRL,EAAOp4B,KAAO,GACdo4B,EAAOtB,UAAY,IAEnBvmC,EAAQ1W,MAAQ0W,EAAQ1W,KAAKkB,OAAQ,CACrCq9C,EAAOv+C,KAAO,GACd,IAAK,IAAI4E,EAAI,EAAGA,EAAI8R,EAAQ1W,KAAKkB,SAAU0D,EACvC25C,EAAOv+C,KAAK4E,GAAK23C,EAAMR,KAAKwD,UAAUd,SAAS/nC,EAAQ1W,KAAK4E,GAAI85C,GAIxE,GAFoB,MAAhBhoC,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC/Cm/C,EAAOp4B,KAAOzP,EAAQyP,MACtBzP,EAAQ+pC,aAAe/pC,EAAQ+pC,YAAYv/C,OAE3C,IADAq9C,EAAOkC,YAAc,GACZ77C,EAAI,EAAGA,EAAI8R,EAAQ+pC,YAAYv/C,SAAU0D,EAC9C25C,EAAOkC,YAAY77C,GAAK23C,EAAMR,KAAKyB,YAAYiB,SAAS/nC,EAAQ+pC,YAAY77C,GAAI85C,GAIxF,GAFyB,MAArBhoC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eACpDm/C,EAAOtB,UAAYvmC,EAAQumC,WAC3BvmC,EAAQ8oC,OAAS9oC,EAAQ8oC,MAAMt+C,OAE/B,IADAq9C,EAAOiB,MAAQ,GACN56C,EAAI,EAAGA,EAAI8R,EAAQ8oC,MAAMt+C,SAAU0D,EACxC25C,EAAOiB,MAAM56C,GAAK23C,EAAMR,KAAKsD,eAAeZ,SAAS/nC,EAAQ8oC,MAAM56C,GAAI85C,GAE/E,GAAIhoC,EAAQujB,QAAUvjB,EAAQujB,OAAO/4B,OAEjC,IADAq9C,EAAOtkB,OAAS,GACPr1B,EAAI,EAAGA,EAAI8R,EAAQujB,OAAO/4B,SAAU0D,EACzC25C,EAAOtkB,OAAOr1B,GAAK23C,EAAMR,KAAKsD,eAAeZ,SAAS/nC,EAAQujB,OAAOr1B,GAAI85C,GAEjF,GAAIhoC,EAAQgqC,WAAahqC,EAAQgqC,UAAUx/C,OAEvC,IADAq9C,EAAOmC,UAAY,GACV97C,EAAI,EAAGA,EAAI8R,EAAQgqC,UAAUx/C,SAAU0D,EAC5C25C,EAAOmC,UAAU97C,GAAK23C,EAAMR,KAAKsD,eAAeZ,SAAS/nC,EAAQgqC,UAAU97C,GAAI85C,GAEvF,GAAIhoC,EAAQiqC,wBAA0BjqC,EAAQiqC,uBAAuBz/C,OAEjE,IADAq9C,EAAOoC,uBAAyB,GACvB/7C,EAAI,EAAGA,EAAI8R,EAAQiqC,uBAAuBz/C,SAAU0D,EACzD25C,EAAOoC,uBAAuB/7C,GAAK23C,EAAMR,KAAKuE,iBAAiB7B,SAAS/nC,EAAQiqC,uBAAuB/7C,GAAI85C,GAEnH,OAAOH,GAUXZ,EAAWz0C,UAAUkrC,OAAS,WAC1B,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDzB,EAndO,GAsdlB5B,EAAKyB,YAAc,WA8Bf,SAASA,EAAYb,GASjB,GARAzjC,KAAK0nC,KAAO,GACZ1nC,KAAK2nC,UAAY,GACjB3nC,KAAK4nC,UAAY,GACjB5nC,KAAK6nC,WAAa,GAClB7nC,KAAK8nC,UAAY,GACjB9nC,KAAK+nC,aAAe,GACpB/nC,KAAKgoC,WAAa,GAClBhoC,KAAKioC,WAAa,GACdxE,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAw8BhD,OA/7BA2+C,EAAYt0C,UAAU03C,KAAOvE,EAAMc,WAQnCK,EAAYt0C,UAAUk4C,SAAW,EAQjC5D,EAAYt0C,UAAUm4C,QAAU,KAQhC7D,EAAYt0C,UAAU23C,UAAYxE,EAAMc,WAQxCK,EAAYt0C,UAAU43C,UAAYzE,EAAMc,WAQxCK,EAAYt0C,UAAU63C,WAAa1E,EAAMc,WAQzCK,EAAYt0C,UAAU83C,UAAY3E,EAAMc,WAQxCK,EAAYt0C,UAAUid,KAAO,GAQ7Bq3B,EAAYt0C,UAAU+zC,UAAY,GAQlCO,EAAYt0C,UAAUo4C,QAAUjF,EAAMa,UAAU,IAQhDM,EAAYt0C,UAAU+3C,aAAe5E,EAAMc,WAQ3CK,EAAYt0C,UAAUq4C,aAAe,EAQrC/D,EAAYt0C,UAAUg4C,WAAa7E,EAAMc,WAQzCK,EAAYt0C,UAAUi4C,WAAa9E,EAAMc,WAUzCK,EAAY1R,OAAS,SAAgB6Q,GACjC,OAAO,IAAIa,EAAYb,IAY3Ba,EAAYlX,OAAS,SAAgB5vB,EAAS0mC,GAG1C,GAFKA,IACDA,EAASjB,EAAQrQ,UACD,MAAhBp1B,EAAQkqC,MAAgBlqC,EAAQkqC,KAAK1/C,OAAQ,CAC7Ck8C,EAAOC,OAA8B,IAAII,OACzC,IAAK,IAAI5+C,EAAI,EAAGA,EAAI6X,EAAQkqC,KAAK1/C,SAAUrC,EACvCu+C,EAAOG,MAAM7mC,EAAQkqC,KAAK/hD,IAC9Bu+C,EAAOM,SAMX,GAJwB,MAApBhnC,EAAQ0qC,UAAoB1qC,EAAQtX,eAAe,aACnDg+C,EAAOC,OAA8B,IAAI5R,MAAM/0B,EAAQ0qC,UACpC,MAAnB1qC,EAAQ2qC,SAAmB3qC,EAAQtX,eAAe,YAClDm9C,EAAMR,KAAKyB,YAAYgE,QAAQlb,OAAO5vB,EAAQ2qC,QAASjE,EAAOC,OAA8B,IAAII,QAAQC,SACnF,MAArBhnC,EAAQmqC,WAAqBnqC,EAAQmqC,UAAU3/C,OAAQ,CAEvD,IADAk8C,EAAOC,OAA8B,IAAII,OAChC5+C,EAAI,EAAGA,EAAI6X,EAAQmqC,UAAU3/C,SAAUrC,EAC5Cu+C,EAAOE,MAAM5mC,EAAQmqC,UAAUhiD,IACnCu+C,EAAOM,SAEX,GAAyB,MAArBhnC,EAAQoqC,WAAqBpqC,EAAQoqC,UAAU5/C,OAAQ,CAEvD,IADAk8C,EAAOC,OAA8B,IAAII,OAChC5+C,EAAI,EAAGA,EAAI6X,EAAQoqC,UAAU5/C,SAAUrC,EAC5Cu+C,EAAO3R,MAAM/0B,EAAQoqC,UAAUjiD,IACnCu+C,EAAOM,SAEX,GAA0B,MAAtBhnC,EAAQqqC,YAAsBrqC,EAAQqqC,WAAW7/C,OACjD,IAASrC,EAAI,EAAGA,EAAI6X,EAAQqqC,WAAW7/C,SAAUrC,EAC7Cu+C,EAAOC,OAA8B,IAAI/X,MAAM5uB,EAAQqqC,WAAWliD,IAC1E,GAAyB,MAArB6X,EAAQsqC,WAAqBtqC,EAAQsqC,UAAU9/C,OAAQ,CAEvD,IADAk8C,EAAOC,OAA8B,IAAII,OAChC5+C,EAAI,EAAGA,EAAI6X,EAAQsqC,UAAU9/C,SAAUrC,EAC5Cu+C,EAAOG,MAAM7mC,EAAQsqC,UAAUniD,IACnCu+C,EAAOM,SAMX,GAJoB,MAAhBhnC,EAAQyP,MAAgBzP,EAAQtX,eAAe,SAC/Cg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQyP,MACrC,MAAnBzP,EAAQ4qC,SAAmB5qC,EAAQtX,eAAe,YAClDg+C,EAAOC,OAA8B,IAAI/X,MAAM5uB,EAAQ4qC,SACjC,MAAtB5qC,EAAQwqC,YAAsBxqC,EAAQwqC,WAAWhgD,OAAQ,CAEzD,IADAk8C,EAAOC,OAA+B,IAAII,OACjC5+C,EAAI,EAAGA,EAAI6X,EAAQwqC,WAAWhgD,SAAUrC,EAC7Cu+C,EAAOqE,OAAO/qC,EAAQwqC,WAAWriD,IACrCu+C,EAAOM,SAEX,GAA0B,MAAtBhnC,EAAQyqC,YAAsBzqC,EAAQyqC,WAAWjgD,OAAQ,CAEzD,IADAk8C,EAAOC,OAA+B,IAAII,OACjC5+C,EAAI,EAAGA,EAAI6X,EAAQyqC,WAAWjgD,SAAUrC,EAC7Cu+C,EAAOsE,OAAOhrC,EAAQyqC,WAAWtiD,IACrCu+C,EAAOM,SAIX,GAFyB,MAArBhnC,EAAQumC,WAAqBvmC,EAAQtX,eAAe,cACpDg+C,EAAOC,OAA+B,IAAI3d,OAAOhpB,EAAQumC,WACjC,MAAxBvmC,EAAQuqC,cAAwBvqC,EAAQuqC,aAAa//C,OACrD,IAASrC,EAAI,EAAGA,EAAI6X,EAAQuqC,aAAa//C,SAAUrC,EAC/C09C,EAAMR,KAAKsE,uBAAuB/Z,OAAO5vB,EAAQuqC,aAAapiD,GAAIu+C,EAAOC,OAA+B,KAAKI,QAAQC,SAG7H,OAF4B,MAAxBhnC,EAAQ6qC,cAAwB7qC,EAAQtX,eAAe,iBACvDg+C,EAAOC,OAA+B,KAAK5R,MAAM/0B,EAAQ6qC,cACtDnE,GAYXI,EAAYI,gBAAkB,SAAyBlnC,EAAS0mC,GAC5D,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxCF,EAAY7mB,OAAS,SAAgBknB,EAAQ38C,GACnC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKyB,YACrFK,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EAGD,GAFMpnC,EAAQkqC,MAAQlqC,EAAQkqC,KAAK1/C,SAC/BwV,EAAQkqC,KAAO,IACD,IAAP,EAAN9C,GAED,IADA,IAAIC,EAAOF,EAAOR,SAAWQ,EAAOtW,IAC7BsW,EAAOtW,IAAMwW,GAChBrnC,EAAQkqC,KAAKx4C,KAAKy1C,EAAON,cAE7B7mC,EAAQkqC,KAAKx4C,KAAKy1C,EAAON,SAC7B,MACJ,KAAK,EACD7mC,EAAQ0qC,SAAWvD,EAAOpS,QAC1B,MACJ,KAAK,EACD/0B,EAAQ2qC,QAAU9E,EAAMR,KAAKyB,YAAYgE,QAAQ7qB,OAAOknB,EAAQA,EAAOR,UACvE,MACJ,KAAK,EAGD,GAFM3mC,EAAQmqC,WAAanqC,EAAQmqC,UAAU3/C,SACzCwV,EAAQmqC,UAAY,IACN,IAAP,EAAN/C,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOtW,IAC7BsW,EAAOtW,IAAMwW,GAChBrnC,EAAQmqC,UAAUz4C,KAAKy1C,EAAOP,cAElC5mC,EAAQmqC,UAAUz4C,KAAKy1C,EAAOP,SAClC,MACJ,KAAK,EAGD,GAFM5mC,EAAQoqC,WAAapqC,EAAQoqC,UAAU5/C,SACzCwV,EAAQoqC,UAAY,IACN,IAAP,EAANhD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOtW,IAC7BsW,EAAOtW,IAAMwW,GAChBrnC,EAAQoqC,UAAU14C,KAAKy1C,EAAOpS,cAElC/0B,EAAQoqC,UAAU14C,KAAKy1C,EAAOpS,SAClC,MACJ,KAAK,EACK/0B,EAAQqqC,YAAcrqC,EAAQqqC,WAAW7/C,SAC3CwV,EAAQqqC,WAAa,IACzBrqC,EAAQqqC,WAAW34C,KAAKy1C,EAAOvY,SAC/B,MACJ,KAAK,EAGD,GAFM5uB,EAAQsqC,WAAatqC,EAAQsqC,UAAU9/C,SACzCwV,EAAQsqC,UAAY,IACN,IAAP,EAANlD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOtW,IAC7BsW,EAAOtW,IAAMwW,GAChBrnC,EAAQsqC,UAAU54C,KAAKy1C,EAAON,cAElC7mC,EAAQsqC,UAAU54C,KAAKy1C,EAAON,SAClC,MACJ,KAAK,EACD7mC,EAAQyP,KAAO03B,EAAOne,SACtB,MACJ,KAAK,GACDhpB,EAAQumC,UAAYY,EAAOne,SAC3B,MACJ,KAAK,EACDhpB,EAAQ4qC,QAAUzD,EAAOvY,QACzB,MACJ,KAAK,GACK5uB,EAAQuqC,cAAgBvqC,EAAQuqC,aAAa//C,SAC/CwV,EAAQuqC,aAAe,IAC3BvqC,EAAQuqC,aAAa74C,KAAKm0C,EAAMR,KAAKsE,uBAAuB1pB,OAAOknB,EAAQA,EAAOR,WAClF,MACJ,KAAK,GACD3mC,EAAQ6qC,aAAe1D,EAAOpS,QAC9B,MACJ,KAAK,GAGD,GAFM/0B,EAAQwqC,YAAcxqC,EAAQwqC,WAAWhgD,SAC3CwV,EAAQwqC,WAAa,IACP,IAAP,EAANpD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOtW,IAC7BsW,EAAOtW,IAAMwW,GAChBrnC,EAAQwqC,WAAW94C,KAAKy1C,EAAO4D,eAEnC/qC,EAAQwqC,WAAW94C,KAAKy1C,EAAO4D,UACnC,MACJ,KAAK,GAGD,GAFM/qC,EAAQyqC,YAAczqC,EAAQyqC,WAAWjgD,SAC3CwV,EAAQyqC,WAAa,IACP,IAAP,EAANrD,GAED,IADIC,EAAOF,EAAOR,SAAWQ,EAAOtW,IAC7BsW,EAAOtW,IAAMwW,GAChBrnC,EAAQyqC,WAAW/4C,KAAKy1C,EAAO6D,eAEnChrC,EAAQyqC,WAAW/4C,KAAKy1C,EAAO6D,UACnC,MACJ,QACI7D,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX8mC,EAAYS,gBAAkB,SAAyBJ,GAGnD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCG,EAAYU,OAAS,SAAgBxnC,GACjC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAoB,MAAhBA,EAAQkqC,MAAgBlqC,EAAQtX,eAAe,QAAS,CACxD,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQkqC,MACvB,MAAO,uBACX,IAAK,IAAI/hD,EAAI,EAAGA,EAAI6X,EAAQkqC,KAAK1/C,SAAUrC,EACvC,KAAKw9C,EAAM+B,UAAU1nC,EAAQkqC,KAAK/hD,KAAS6X,EAAQkqC,KAAK/hD,IAAMw9C,EAAM+B,UAAU1nC,EAAQkqC,KAAK/hD,GAAG68B,MAAQ2gB,EAAM+B,UAAU1nC,EAAQkqC,KAAK/hD,GAAG88B,OAClI,MAAO,gCAEnB,GAAwB,MAApBjlB,EAAQ0qC,UAAoB1qC,EAAQtX,eAAe,cAC9Ci9C,EAAM+B,UAAU1nC,EAAQ0qC,UACzB,MAAO,6BACf,GAAuB,MAAnB1qC,EAAQ2qC,SAAmB3qC,EAAQtX,eAAe,aAC9CuC,EAAQ46C,EAAMR,KAAKyB,YAAYgE,QAAQtD,OAAOxnC,EAAQ2qC,UAEtD,MAAO,WAAa1/C,EAE5B,GAAyB,MAArB+U,EAAQmqC,WAAqBnqC,EAAQtX,eAAe,aAAc,CAClE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQmqC,WACvB,MAAO,4BACX,IAAShiD,EAAI,EAAGA,EAAI6X,EAAQmqC,UAAU3/C,SAAUrC,EAC5C,GAAoC,iBAAzB6X,EAAQmqC,UAAUhiD,GACzB,MAAO,+BAEnB,GAAyB,MAArB6X,EAAQoqC,WAAqBpqC,EAAQtX,eAAe,aAAc,CAClE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQoqC,WACvB,MAAO,4BACX,IAASjiD,EAAI,EAAGA,EAAI6X,EAAQoqC,UAAU5/C,SAAUrC,EAC5C,IAAKw9C,EAAM+B,UAAU1nC,EAAQoqC,UAAUjiD,IACnC,MAAO,gCAEnB,GAA0B,MAAtB6X,EAAQqqC,YAAsBrqC,EAAQtX,eAAe,cAAe,CACpE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQqqC,YACvB,MAAO,6BACX,IAASliD,EAAI,EAAGA,EAAI6X,EAAQqqC,WAAW7/C,SAAUrC,EAC7C,KAAM6X,EAAQqqC,WAAWliD,IAA8C,iBAAjC6X,EAAQqqC,WAAWliD,GAAGqC,QAAuBm7C,EAAM8B,SAASznC,EAAQqqC,WAAWliD,KACjH,MAAO,gCAEnB,GAAyB,MAArB6X,EAAQsqC,WAAqBtqC,EAAQtX,eAAe,aAAc,CAClE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQsqC,WACvB,MAAO,4BACX,IAASniD,EAAI,EAAGA,EAAI6X,EAAQsqC,UAAU9/C,SAAUrC,EAC5C,KAAKw9C,EAAM+B,UAAU1nC,EAAQsqC,UAAUniD,KAAS6X,EAAQsqC,UAAUniD,IAAMw9C,EAAM+B,UAAU1nC,EAAQsqC,UAAUniD,GAAG68B,MAAQ2gB,EAAM+B,UAAU1nC,EAAQsqC,UAAUniD,GAAG88B,OACtJ,MAAO,qCAEnB,GAAoB,MAAhBjlB,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC1Ci9C,EAAM8B,SAASznC,EAAQyP,MACxB,MAAO,wBACf,GAAyB,MAArBzP,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eAC/Ci9C,EAAM8B,SAASznC,EAAQumC,WACxB,MAAO,6BACf,GAAuB,MAAnBvmC,EAAQ4qC,SAAmB5qC,EAAQtX,eAAe,cAC5CsX,EAAQ4qC,SAA6C,iBAA3B5qC,EAAQ4qC,QAAQpgD,QAAuBm7C,EAAM8B,SAASznC,EAAQ4qC,UAC1F,MAAO,2BACf,GAA4B,MAAxB5qC,EAAQuqC,cAAwBvqC,EAAQtX,eAAe,gBAAiB,CACxE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQuqC,cACvB,MAAO,+BACX,IAASpiD,EAAI,EAAGA,EAAI6X,EAAQuqC,aAAa//C,SAAUrC,EAAG,CAClD,IAAI8C,EACJ,GADIA,EAAQ46C,EAAMR,KAAKsE,uBAAuBnC,OAAOxnC,EAAQuqC,aAAapiD,IAEtE,MAAO,gBAAkB8C,GAGrC,GAA4B,MAAxB+U,EAAQ6qC,cAAwB7qC,EAAQtX,eAAe,gBACvD,OAAQsX,EAAQ6qC,cAChB,QACI,MAAO,oCACX,KAAK,EACL,KAAK,GAGT,GAA0B,MAAtB7qC,EAAQwqC,YAAsBxqC,EAAQtX,eAAe,cAAe,CACpE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQwqC,YACvB,MAAO,6BACX,IAASriD,EAAI,EAAGA,EAAI6X,EAAQwqC,WAAWhgD,SAAUrC,EAC7C,GAAqC,iBAA1B6X,EAAQwqC,WAAWriD,GAC1B,MAAO,gCAEnB,GAA0B,MAAtB6X,EAAQyqC,YAAsBzqC,EAAQtX,eAAe,cAAe,CACpE,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQyqC,YACvB,MAAO,6BACX,IAAStiD,EAAI,EAAGA,EAAI6X,EAAQyqC,WAAWjgD,SAAUrC,EAC7C,KAAKw9C,EAAM+B,UAAU1nC,EAAQyqC,WAAWtiD,KAAS6X,EAAQyqC,WAAWtiD,IAAMw9C,EAAM+B,UAAU1nC,EAAQyqC,WAAWtiD,GAAG68B,MAAQ2gB,EAAM+B,UAAU1nC,EAAQyqC,WAAWtiD,GAAG88B,OAC1J,MAAO,sCAEnB,OAAO,MAWX6hB,EAAYc,WAAa,SAAoBC,GACzC,GAAIA,aAAkBhC,EAAMR,KAAKyB,YAC7B,OAAOe,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKyB,YAC7B,GAAIe,EAAOqC,KAAM,CACb,IAAK1zB,MAAMmxB,QAAQE,EAAOqC,MACtB,MAAMlN,UAAU,0CACpBh9B,EAAQkqC,KAAO,GACf,IAAK,IAAI/hD,EAAI,EAAGA,EAAI0/C,EAAOqC,KAAK1/C,SAAUrC,EAClCw9C,EAAMxQ,MACLn1B,EAAQkqC,KAAK/hD,GAAKw9C,EAAMxQ,KAAKuK,UAAUmI,EAAOqC,KAAK/hD,KAAK01C,UAAW,EACrC,iBAAnBgK,EAAOqC,KAAK/hD,GACxB6X,EAAQkqC,KAAK/hD,GAAKo3C,SAASsI,EAAOqC,KAAK/hD,GAAI,IACZ,iBAAnB0/C,EAAOqC,KAAK/hD,GACxB6X,EAAQkqC,KAAK/hD,GAAK0/C,EAAOqC,KAAK/hD,GACC,iBAAnB0/C,EAAOqC,KAAK/hD,KACxB6X,EAAQkqC,KAAK/hD,GAAK,IAAIw9C,EAAMmC,SAASD,EAAOqC,KAAK/hD,GAAG68B,MAAQ,EAAG6iB,EAAOqC,KAAK/hD,GAAG88B,OAAS,GAAGib,YAItG,GAFuB,MAAnB2H,EAAO6C,WACP1qC,EAAQ0qC,SAA6B,EAAlB7C,EAAO6C,UACR,MAAlB7C,EAAO8C,QAAiB,CACxB,GAA8B,iBAAnB9C,EAAO8C,QACd,MAAM3N,UAAU,8CACpBh9B,EAAQ2qC,QAAU9E,EAAMR,KAAKyB,YAAYgE,QAAQlD,WAAWC,EAAO8C,SAEvE,GAAI9C,EAAOsC,UAAW,CAClB,IAAK3zB,MAAMmxB,QAAQE,EAAOsC,WACtB,MAAMnN,UAAU,+CAEpB,IADAh9B,EAAQmqC,UAAY,GACXhiD,EAAI,EAAGA,EAAI0/C,EAAOsC,UAAU3/C,SAAUrC,EAC3C6X,EAAQmqC,UAAUhiD,GAAK+qB,OAAO20B,EAAOsC,UAAUhiD,IAEvD,GAAI0/C,EAAOuC,UAAW,CAClB,IAAK5zB,MAAMmxB,QAAQE,EAAOuC,WACtB,MAAMpN,UAAU,+CAEpB,IADAh9B,EAAQoqC,UAAY,GACXjiD,EAAI,EAAGA,EAAI0/C,EAAOuC,UAAU5/C,SAAUrC,EAC3C6X,EAAQoqC,UAAUjiD,GAA2B,EAAtB0/C,EAAOuC,UAAUjiD,GAEhD,GAAI0/C,EAAOwC,WAAY,CACnB,IAAK7zB,MAAMmxB,QAAQE,EAAOwC,YACtB,MAAMrN,UAAU,gDAEpB,IADAh9B,EAAQqqC,WAAa,GACZliD,EAAI,EAAGA,EAAI0/C,EAAOwC,WAAW7/C,SAAUrC,EACR,iBAAzB0/C,EAAOwC,WAAWliD,GACzBw9C,EAAMnW,OAAOvP,OAAO4nB,EAAOwC,WAAWliD,GAAI6X,EAAQqqC,WAAWliD,GAAKw9C,EAAMa,UAAUb,EAAMnW,OAAOhlC,OAAOq9C,EAAOwC,WAAWliD,KAAM,GACzH0/C,EAAOwC,WAAWliD,GAAGqC,SAC1BwV,EAAQqqC,WAAWliD,GAAK0/C,EAAOwC,WAAWliD,IAEtD,GAAI0/C,EAAOyC,UAAW,CAClB,IAAK9zB,MAAMmxB,QAAQE,EAAOyC,WACtB,MAAMtN,UAAU,+CAEpB,IADAh9B,EAAQsqC,UAAY,GACXniD,EAAI,EAAGA,EAAI0/C,EAAOyC,UAAU9/C,SAAUrC,EACvCw9C,EAAMxQ,MACLn1B,EAAQsqC,UAAUniD,GAAKw9C,EAAMxQ,KAAKuK,UAAUmI,EAAOyC,UAAUniD,KAAK01C,UAAW,EAC1C,iBAAxBgK,EAAOyC,UAAUniD,GAC7B6X,EAAQsqC,UAAUniD,GAAKo3C,SAASsI,EAAOyC,UAAUniD,GAAI,IACjB,iBAAxB0/C,EAAOyC,UAAUniD,GAC7B6X,EAAQsqC,UAAUniD,GAAK0/C,EAAOyC,UAAUniD,GACJ,iBAAxB0/C,EAAOyC,UAAUniD,KAC7B6X,EAAQsqC,UAAUniD,GAAK,IAAIw9C,EAAMmC,SAASD,EAAOyC,UAAUniD,GAAG68B,MAAQ,EAAG6iB,EAAOyC,UAAUniD,GAAG88B,OAAS,GAAGib,YAWrH,GATmB,MAAf2H,EAAOp4B,OACPzP,EAAQyP,KAAO1hB,OAAO85C,EAAOp4B,OACT,MAApBo4B,EAAOtB,YACPvmC,EAAQumC,UAAYx4C,OAAO85C,EAAOtB,YAChB,MAAlBsB,EAAO+C,UACuB,iBAAnB/C,EAAO+C,QACdjF,EAAMnW,OAAOvP,OAAO4nB,EAAO+C,QAAS5qC,EAAQ4qC,QAAUjF,EAAMa,UAAUb,EAAMnW,OAAOhlC,OAAOq9C,EAAO+C,UAAW,GACvG/C,EAAO+C,QAAQpgD,SACpBwV,EAAQ4qC,QAAU/C,EAAO+C,UAC7B/C,EAAO0C,aAAc,CACrB,IAAK/zB,MAAMmxB,QAAQE,EAAO0C,cACtB,MAAMvN,UAAU,kDAEpB,IADAh9B,EAAQuqC,aAAe,GACdpiD,EAAI,EAAGA,EAAI0/C,EAAO0C,aAAa//C,SAAUrC,EAAG,CACjD,GAAsC,iBAA3B0/C,EAAO0C,aAAapiD,GAC3B,MAAM60C,UAAU,mDACpBh9B,EAAQuqC,aAAapiD,GAAK09C,EAAMR,KAAKsE,uBAAuB/B,WAAWC,EAAO0C,aAAapiD,KAGnG,OAAQ0/C,EAAOgD,cACf,IAAK,UACL,KAAK,EACD7qC,EAAQ6qC,aAAe,EACvB,MACJ,IAAK,WACL,KAAK,EACD7qC,EAAQ6qC,aAAe,EAG3B,GAAIhD,EAAO2C,WAAY,CACnB,IAAKh0B,MAAMmxB,QAAQE,EAAO2C,YACtB,MAAMxN,UAAU,gDAEpB,IADAh9B,EAAQwqC,WAAa,GACZriD,EAAI,EAAGA,EAAI0/C,EAAO2C,WAAWhgD,SAAUrC,EAC5C6X,EAAQwqC,WAAWriD,GAAK+qB,OAAO20B,EAAO2C,WAAWriD,IAEzD,GAAI0/C,EAAO4C,WAAY,CACnB,IAAKj0B,MAAMmxB,QAAQE,EAAO4C,YACtB,MAAMzN,UAAU,gDAEpB,IADAh9B,EAAQyqC,WAAa,GACZtiD,EAAI,EAAGA,EAAI0/C,EAAO4C,WAAWjgD,SAAUrC,EACxCw9C,EAAMxQ,MACLn1B,EAAQyqC,WAAWtiD,GAAKw9C,EAAMxQ,KAAKuK,UAAUmI,EAAO4C,WAAWtiD,KAAK01C,UAAW,EAC3C,iBAAzBgK,EAAO4C,WAAWtiD,GAC9B6X,EAAQyqC,WAAWtiD,GAAKo3C,SAASsI,EAAO4C,WAAWtiD,GAAI,IAClB,iBAAzB0/C,EAAO4C,WAAWtiD,GAC9B6X,EAAQyqC,WAAWtiD,GAAK0/C,EAAO4C,WAAWtiD,GACL,iBAAzB0/C,EAAO4C,WAAWtiD,KAC9B6X,EAAQyqC,WAAWtiD,GAAK,IAAIw9C,EAAMmC,SAASD,EAAO4C,WAAWtiD,GAAG68B,MAAQ,EAAG6iB,EAAO4C,WAAWtiD,GAAG88B,OAAS,GAAGib,UAAS,IAEjI,OAAOlgC,GAYX8mC,EAAYiB,SAAW,SAAkB/nC,EAASgoC,GACzCA,IACDA,EAAU,IACd,IAAIH,EAAS,GAyBb,IAxBIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOqC,KAAO,GACdrC,EAAOsC,UAAY,GACnBtC,EAAOuC,UAAY,GACnBvC,EAAOwC,WAAa,GACpBxC,EAAOyC,UAAY,GACnBzC,EAAO2C,WAAa,GACpB3C,EAAO4C,WAAa,GACpB5C,EAAO0C,aAAe,IAEtBvC,EAAQE,WACRL,EAAO6C,SAAW,EAClB7C,EAAO8C,QAAU,KACjB9C,EAAOp4B,KAAO,GACVu4B,EAAQpZ,QAAU7gC,OAClB85C,EAAO+C,QAAU,IAEjB/C,EAAO+C,QAAU,GACb5C,EAAQpZ,QAAUpY,QAClBqxB,EAAO+C,QAAUjF,EAAMa,UAAUqB,EAAO+C,WAEhD/C,EAAOtB,UAAY,GACnBsB,EAAOgD,aAAe7C,EAAQK,QAAUt6C,OAAS,UAAY,GAE7DiS,EAAQkqC,MAAQlqC,EAAQkqC,KAAK1/C,OAAQ,CACrCq9C,EAAOqC,KAAO,GACd,IAAK,IAAIh8C,EAAI,EAAGA,EAAI8R,EAAQkqC,KAAK1/C,SAAU0D,EACR,iBAApB8R,EAAQkqC,KAAKh8C,GACpB25C,EAAOqC,KAAKh8C,GAAK85C,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQkqC,KAAKh8C,IAAM8R,EAAQkqC,KAAKh8C,GAEnF25C,EAAOqC,KAAKh8C,GAAK85C,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQkqC,KAAKh8C,IAAM85C,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQkqC,KAAKh8C,GAAG82B,MAAQ,EAAGhlB,EAAQkqC,KAAKh8C,GAAG+2B,OAAS,GAAGib,WAAalgC,EAAQkqC,KAAKh8C,GAM7O,GAJwB,MAApB8R,EAAQ0qC,UAAoB1qC,EAAQtX,eAAe,cACnDm/C,EAAO6C,SAAW1qC,EAAQ0qC,UACP,MAAnB1qC,EAAQ2qC,SAAmB3qC,EAAQtX,eAAe,aAClDm/C,EAAO8C,QAAU9E,EAAMR,KAAKyB,YAAYgE,QAAQ/C,SAAS/nC,EAAQ2qC,QAAS3C,IAC1EhoC,EAAQmqC,WAAanqC,EAAQmqC,UAAU3/C,OAEvC,IADAq9C,EAAOsC,UAAY,GACVj8C,EAAI,EAAGA,EAAI8R,EAAQmqC,UAAU3/C,SAAU0D,EAC5C25C,EAAOsC,UAAUj8C,GAAK85C,EAAQM,OAASC,SAASvoC,EAAQmqC,UAAUj8C,IAAMH,OAAOiS,EAAQmqC,UAAUj8C,IAAM8R,EAAQmqC,UAAUj8C,GAEjI,GAAI8R,EAAQoqC,WAAapqC,EAAQoqC,UAAU5/C,OAEvC,IADAq9C,EAAOuC,UAAY,GACVl8C,EAAI,EAAGA,EAAI8R,EAAQoqC,UAAU5/C,SAAU0D,EAC5C25C,EAAOuC,UAAUl8C,GAAK8R,EAAQoqC,UAAUl8C,GAEhD,GAAI8R,EAAQqqC,YAAcrqC,EAAQqqC,WAAW7/C,OAEzC,IADAq9C,EAAOwC,WAAa,GACXn8C,EAAI,EAAGA,EAAI8R,EAAQqqC,WAAW7/C,SAAU0D,EAC7C25C,EAAOwC,WAAWn8C,GAAK85C,EAAQpZ,QAAU7gC,OAAS43C,EAAMnW,OAAOI,OAAO5vB,EAAQqqC,WAAWn8C,GAAI,EAAG8R,EAAQqqC,WAAWn8C,GAAG1D,QAAUw9C,EAAQpZ,QAAUpY,MAAQA,MAAMhkB,UAAU9H,MAAMspC,KAAKh0B,EAAQqqC,WAAWn8C,IAAM8R,EAAQqqC,WAAWn8C,GAEzO,GAAI8R,EAAQsqC,WAAatqC,EAAQsqC,UAAU9/C,OAEvC,IADAq9C,EAAOyC,UAAY,GACVp8C,EAAI,EAAGA,EAAI8R,EAAQsqC,UAAU9/C,SAAU0D,EACR,iBAAzB8R,EAAQsqC,UAAUp8C,GACzB25C,EAAOyC,UAAUp8C,GAAK85C,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQsqC,UAAUp8C,IAAM8R,EAAQsqC,UAAUp8C,GAElG25C,EAAOyC,UAAUp8C,GAAK85C,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQsqC,UAAUp8C,IAAM85C,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQsqC,UAAUp8C,GAAG82B,MAAQ,EAAGhlB,EAAQsqC,UAAUp8C,GAAG+2B,OAAS,GAAGib,WAAalgC,EAAQsqC,UAAUp8C,GAMtQ,GAJoB,MAAhB8R,EAAQyP,MAAgBzP,EAAQtX,eAAe,UAC/Cm/C,EAAOp4B,KAAOzP,EAAQyP,MACH,MAAnBzP,EAAQ4qC,SAAmB5qC,EAAQtX,eAAe,aAClDm/C,EAAO+C,QAAU5C,EAAQpZ,QAAU7gC,OAAS43C,EAAMnW,OAAOI,OAAO5vB,EAAQ4qC,QAAS,EAAG5qC,EAAQ4qC,QAAQpgD,QAAUw9C,EAAQpZ,QAAUpY,MAAQA,MAAMhkB,UAAU9H,MAAMspC,KAAKh0B,EAAQ4qC,SAAW5qC,EAAQ4qC,SAC9L5qC,EAAQwqC,YAAcxqC,EAAQwqC,WAAWhgD,OAEzC,IADAq9C,EAAO2C,WAAa,GACXt8C,EAAI,EAAGA,EAAI8R,EAAQwqC,WAAWhgD,SAAU0D,EAC7C25C,EAAO2C,WAAWt8C,GAAK85C,EAAQM,OAASC,SAASvoC,EAAQwqC,WAAWt8C,IAAMH,OAAOiS,EAAQwqC,WAAWt8C,IAAM8R,EAAQwqC,WAAWt8C,GAErI,GAAI8R,EAAQyqC,YAAczqC,EAAQyqC,WAAWjgD,OAEzC,IADAq9C,EAAO4C,WAAa,GACXv8C,EAAI,EAAGA,EAAI8R,EAAQyqC,WAAWjgD,SAAU0D,EACR,iBAA1B8R,EAAQyqC,WAAWv8C,GAC1B25C,EAAO4C,WAAWv8C,GAAK85C,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQyqC,WAAWv8C,IAAM8R,EAAQyqC,WAAWv8C,GAErG25C,EAAO4C,WAAWv8C,GAAK85C,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQyqC,WAAWv8C,IAAM85C,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQyqC,WAAWv8C,GAAG82B,MAAQ,EAAGhlB,EAAQyqC,WAAWv8C,GAAG+2B,OAAS,GAAGib,UAAS,GAAQlgC,EAAQyqC,WAAWv8C,GAI/Q,GAFyB,MAArB8R,EAAQumC,WAAqBvmC,EAAQtX,eAAe,eACpDm/C,EAAOtB,UAAYvmC,EAAQumC,WAC3BvmC,EAAQuqC,cAAgBvqC,EAAQuqC,aAAa//C,OAE7C,IADAq9C,EAAO0C,aAAe,GACbr8C,EAAI,EAAGA,EAAI8R,EAAQuqC,aAAa//C,SAAU0D,EAC/C25C,EAAO0C,aAAar8C,GAAK23C,EAAMR,KAAKsE,uBAAuB5B,SAAS/nC,EAAQuqC,aAAar8C,GAAI85C,GAIrG,OAF4B,MAAxBhoC,EAAQ6qC,cAAwB7qC,EAAQtX,eAAe,kBACvDm/C,EAAOgD,aAAe7C,EAAQK,QAAUt6C,OAAS83C,EAAMR,KAAKyB,YAAYmE,aAAajrC,EAAQ6qC,cAAgB7qC,EAAQ6qC,cAClHhD,GAUXf,EAAYt0C,UAAUkrC,OAAS,WAC3B,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAyB1D5B,EAAYoE,SAAW,WACnB,IAAI/F,EAAa,GAAIC,EAASzR,OAAOyB,OAAO+P,GAkB5C,OAjBAC,EAAOD,EAAW,GAAK,aAAe,EACtCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,SAAW,EAClCC,EAAOD,EAAW,GAAK,UAAY,EACnCC,EAAOD,EAAW,GAAK,QAAU,EACjCC,EAAOD,EAAW,IAAM,WAAa,GACrCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,UAAY,GACpCC,EAAOD,EAAW,IAAM,aAAe,GACvCC,EAAOD,EAAW,IAAM,cAAgB,GACxCC,EAAOD,EAAW,IAAM,YAAc,GAC/BC,EAnBY,GAsBvB0B,EAAYgE,QAAU,WAkBlB,SAASA,EAAQ7E,GACb,GAAIA,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAqNhD,OA5MA2iD,EAAQt4C,UAAU24C,MAAQxF,EAAMxQ,KAAOwQ,EAAMxQ,KAAKmJ,SAAS,EAAE,GAAE,GAAS,EAQxEwM,EAAQt4C,UAAUq9B,IAAM8V,EAAMxQ,KAAOwQ,EAAMxQ,KAAKmJ,SAAS,EAAE,GAAE,GAAS,EAUtEwM,EAAQ1V,OAAS,SAAgB6Q,GAC7B,OAAO,IAAI6E,EAAQ7E,IAYvB6E,EAAQlb,OAAS,SAAgB5vB,EAAS0mC,GAOtC,OANKA,IACDA,EAASjB,EAAQrQ,UACA,MAAjBp1B,EAAQmrC,OAAiBnrC,EAAQtX,eAAe,UAChDg+C,EAAOC,OAA8B,GAAGE,MAAM7mC,EAAQmrC,OACvC,MAAfnrC,EAAQ6vB,KAAe7vB,EAAQtX,eAAe,QAC9Cg+C,EAAOC,OAA8B,IAAIE,MAAM7mC,EAAQ6vB,KACpD6W,GAYXoE,EAAQ5D,gBAAkB,SAAyBlnC,EAAS0mC,GACxD,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxC8D,EAAQ7qB,OAAS,SAAgBknB,EAAQ38C,GAC/B28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKyB,YAAYgE,QACjG3D,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQmrC,MAAQhE,EAAON,QACvB,MACJ,KAAK,EACD7mC,EAAQ6vB,IAAMsX,EAAON,QACrB,MACJ,QACIM,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX8qC,EAAQvD,gBAAkB,SAAyBJ,GAG/C,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCmE,EAAQtD,OAAS,SAAgBxnC,GAC7B,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACU,MAAjBA,EAAQmrC,OAAiBnrC,EAAQtX,eAAe,YAC3Ci9C,EAAM+B,UAAU1nC,EAAQmrC,QAAYnrC,EAAQmrC,OAASxF,EAAM+B,UAAU1nC,EAAQmrC,MAAMnmB,MAAQ2gB,EAAM+B,UAAU1nC,EAAQmrC,MAAMlmB,OACnH,+BACI,MAAfjlB,EAAQ6vB,KAAe7vB,EAAQtX,eAAe,UACzCi9C,EAAM+B,UAAU1nC,EAAQ6vB,MAAU7vB,EAAQ6vB,KAAO8V,EAAM+B,UAAU1nC,EAAQ6vB,IAAI7K,MAAQ2gB,EAAM+B,UAAU1nC,EAAQ6vB,IAAI5K,OAC3G,6BACR,MAWX6lB,EAAQlD,WAAa,SAAoBC,GACrC,GAAIA,aAAkBhC,EAAMR,KAAKyB,YAAYgE,QACzC,OAAOjD,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKyB,YAAYgE,QAmBzC,OAlBoB,MAAhBjD,EAAOsD,QACHxF,EAAMxQ,MACLn1B,EAAQmrC,MAAQxF,EAAMxQ,KAAKuK,UAAUmI,EAAOsD,QAAQtN,UAAW,EACnC,iBAAjBgK,EAAOsD,MACnBnrC,EAAQmrC,MAAQ5L,SAASsI,EAAOsD,MAAO,IACV,iBAAjBtD,EAAOsD,MACnBnrC,EAAQmrC,MAAQtD,EAAOsD,MACM,iBAAjBtD,EAAOsD,QACnBnrC,EAAQmrC,MAAQ,IAAIxF,EAAMmC,SAASD,EAAOsD,MAAMnmB,MAAQ,EAAG6iB,EAAOsD,MAAMlmB,OAAS,GAAGib,aAC1E,MAAd2H,EAAOhY,MACH8V,EAAMxQ,MACLn1B,EAAQ6vB,IAAM8V,EAAMxQ,KAAKuK,UAAUmI,EAAOhY,MAAMgO,UAAW,EACjC,iBAAfgK,EAAOhY,IACnB7vB,EAAQ6vB,IAAM0P,SAASsI,EAAOhY,IAAK,IACR,iBAAfgY,EAAOhY,IACnB7vB,EAAQ6vB,IAAMgY,EAAOhY,IACM,iBAAfgY,EAAOhY,MACnB7vB,EAAQ6vB,IAAM,IAAI8V,EAAMmC,SAASD,EAAOhY,IAAI7K,MAAQ,EAAG6iB,EAAOhY,IAAI5K,OAAS,GAAGib,aAC/ElgC,GAYX8qC,EAAQ/C,SAAW,SAAkB/nC,EAASgoC,GACrCA,IACDA,EAAU,IACd,IAAIH,EAAS,GACb,GAAIG,EAAQE,SAAU,CAClB,GAAIvC,EAAMxQ,KAAM,CACZ,IAAIgT,EAAO,IAAIxC,EAAMxQ,KAAK,EAAG,GAAG,GAChC0S,EAAOsD,MAAQnD,EAAQI,QAAUr6C,OAASo6C,EAAKlyB,WAAa+xB,EAAQI,QAAUl1B,OAASi1B,EAAKjI,WAAaiI,OAEzGN,EAAOsD,MAAQnD,EAAQI,QAAUr6C,OAAS,IAAM,EAChD43C,EAAMxQ,MACFgT,EAAO,IAAIxC,EAAMxQ,KAAK,EAAG,GAAG,GAChC0S,EAAOhY,IAAMmY,EAAQI,QAAUr6C,OAASo6C,EAAKlyB,WAAa+xB,EAAQI,QAAUl1B,OAASi1B,EAAKjI,WAAaiI,GAEvGN,EAAOhY,IAAMmY,EAAQI,QAAUr6C,OAAS,IAAM,EAYtD,OAVqB,MAAjBiS,EAAQmrC,OAAiBnrC,EAAQtX,eAAe,WACnB,iBAAlBsX,EAAQmrC,MACftD,EAAOsD,MAAQnD,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQmrC,OAASnrC,EAAQmrC,MAE1EtD,EAAOsD,MAAQnD,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQmrC,OAASnD,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQmrC,MAAMnmB,MAAQ,EAAGhlB,EAAQmrC,MAAMlmB,OAAS,GAAGib,WAAalgC,EAAQmrC,OACzM,MAAfnrC,EAAQ6vB,KAAe7vB,EAAQtX,eAAe,SACnB,iBAAhBsX,EAAQ6vB,IACfgY,EAAOhY,IAAMmY,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQ6vB,KAAO7vB,EAAQ6vB,IAEtEgY,EAAOhY,IAAMmY,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQ6vB,KAAOmY,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQ6vB,IAAI7K,MAAQ,EAAGhlB,EAAQ6vB,IAAI5K,OAAS,GAAGib,WAAalgC,EAAQ6vB,KAC7MgY,GAUXiD,EAAQt4C,UAAUkrC,OAAS,WACvB,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDoC,EA3OW,GAqPtBhE,EAAYmE,aAAe,WACvB,IAAI9F,EAAa,GAAIC,EAASzR,OAAOyB,OAAO+P,GAG5C,OAFAC,EAAOD,EAAW,GAAK,WAAa,EACpCC,EAAOD,EAAW,GAAK,YAAc,EAC9BC,EAJgB,GAOpB0B,EAl/BQ,GAq/BnBzB,EAAK+F,iBAAmB,WAiBpB,SAASA,EAAiBnF,GAEtB,GADAzjC,KAAK6oC,IAAM,GACPpF,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAichD,OAxbAijD,EAAiB54C,UAAU64C,IAAM1F,EAAMc,WAUvC2E,EAAiBhW,OAAS,SAAgB6Q,GACtC,OAAO,IAAImF,EAAiBnF,IAYhCmF,EAAiBxb,OAAS,SAAgB5vB,EAAS0mC,GAG/C,GAFKA,IACDA,EAASjB,EAAQrQ,UACF,MAAfp1B,EAAQqrC,KAAerrC,EAAQqrC,IAAI7gD,OACnC,IAAK,IAAIrC,EAAI,EAAGA,EAAI6X,EAAQqrC,IAAI7gD,SAAUrC,EACtC09C,EAAMR,KAAK+F,iBAAiBE,UAAU1b,OAAO5vB,EAAQqrC,IAAIljD,GAAIu+C,EAAOC,OAA8B,IAAII,QAAQC,SACtH,OAAON,GAYX0E,EAAiBlE,gBAAkB,SAAyBlnC,EAAS0mC,GACjE,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxCoE,EAAiBnrB,OAAS,SAAgBknB,EAAQ38C,GACxC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAK+F,iBACrFjE,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACKpnC,EAAQqrC,KAAOrrC,EAAQqrC,IAAI7gD,SAC7BwV,EAAQqrC,IAAM,IAClBrrC,EAAQqrC,IAAI35C,KAAKm0C,EAAMR,KAAK+F,iBAAiBE,UAAUrrB,OAAOknB,EAAQA,EAAOR,WAC7E,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaXorC,EAAiB7D,gBAAkB,SAAyBJ,GAGxD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCyE,EAAiB5D,OAAS,SAAgBxnC,GACtC,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAmB,MAAfA,EAAQqrC,KAAerrC,EAAQtX,eAAe,OAAQ,CACtD,IAAK8tB,MAAMmxB,QAAQ3nC,EAAQqrC,KACvB,MAAO,sBACX,IAAK,IAAIljD,EAAI,EAAGA,EAAI6X,EAAQqrC,IAAI7gD,SAAUrC,EAAG,CACzC,IAAI8C,EAAQ46C,EAAMR,KAAK+F,iBAAiBE,UAAU9D,OAAOxnC,EAAQqrC,IAAIljD,IACrE,GAAI8C,EACA,MAAO,OAASA,GAG5B,OAAO,MAWXmgD,EAAiBxD,WAAa,SAAoBC,GAC9C,GAAIA,aAAkBhC,EAAMR,KAAK+F,iBAC7B,OAAOvD,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAK+F,iBAC7B,GAAIvD,EAAOwD,IAAK,CACZ,IAAK70B,MAAMmxB,QAAQE,EAAOwD,KACtB,MAAMrO,UAAU,8CACpBh9B,EAAQqrC,IAAM,GACd,IAAK,IAAIljD,EAAI,EAAGA,EAAI0/C,EAAOwD,IAAI7gD,SAAUrC,EAAG,CACxC,GAA6B,iBAAlB0/C,EAAOwD,IAAIljD,GAClB,MAAM60C,UAAU,+CACpBh9B,EAAQqrC,IAAIljD,GAAK09C,EAAMR,KAAK+F,iBAAiBE,UAAU1D,WAAWC,EAAOwD,IAAIljD,KAGrF,OAAO6X,GAYXorC,EAAiBrD,SAAW,SAAkB/nC,EAASgoC,GAC9CA,IACDA,EAAU,IACd,IAAIH,EAAS,GAGb,IAFIG,EAAQC,QAAUD,EAAQE,YAC1BL,EAAOwD,IAAM,IACbrrC,EAAQqrC,KAAOrrC,EAAQqrC,IAAI7gD,OAAQ,CACnCq9C,EAAOwD,IAAM,GACb,IAAK,IAAIn9C,EAAI,EAAGA,EAAI8R,EAAQqrC,IAAI7gD,SAAU0D,EACtC25C,EAAOwD,IAAIn9C,GAAK23C,EAAMR,KAAK+F,iBAAiBE,UAAUvD,SAAS/nC,EAAQqrC,IAAIn9C,GAAI85C,GAEvF,OAAOH,GAUXuD,EAAiB54C,UAAUkrC,OAAS,WAChC,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAG1D0C,EAAiBE,UAAY,WAmBzB,SAASA,EAAUrF,GACf,GAAIA,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KA4BhD,IAAIojD,EAoNJ,OAvOAD,EAAU94C,UAAUg5C,SAAW7F,EAAMxQ,KAAOwQ,EAAMxQ,KAAKmJ,SAAS,EAAE,GAAE,GAAS,EAQ7EgN,EAAU94C,UAAUi5C,SAAW,GAQ/BH,EAAU94C,UAAUk5C,WAAa,GAWjC/X,OAAOqK,eAAesN,EAAU94C,UAAW,QAAS,CAChDoC,IAAK+wC,EAAMgG,YAAYJ,EAAe,CAAC,WAAY,aACnD98C,IAAKk3C,EAAMiG,YAAYL,KAW3BD,EAAUlW,OAAS,SAAgB6Q,GAC/B,OAAO,IAAIqF,EAAUrF,IAYzBqF,EAAU1b,OAAS,SAAgB5vB,EAAS0mC,GASxC,OARKA,IACDA,EAASjB,EAAQrQ,UACG,MAApBp1B,EAAQwrC,UAAoBxrC,EAAQtX,eAAe,aACnDg+C,EAAOC,OAA8B,GAAGE,MAAM7mC,EAAQwrC,UAClC,MAApBxrC,EAAQyrC,UAAoBzrC,EAAQtX,eAAe,aACnDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQyrC,UAClC,MAAtBzrC,EAAQ0rC,YAAsB1rC,EAAQtX,eAAe,eACrDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQ0rC,YACrDhF,GAYX4E,EAAUpE,gBAAkB,SAAyBlnC,EAAS0mC,GAC1D,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxCsE,EAAUrrB,OAAS,SAAgBknB,EAAQ38C,GACjC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAK+F,iBAAiBE,UACtGnE,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQwrC,SAAWrE,EAAON,QAC1B,MACJ,KAAK,EACD7mC,EAAQyrC,SAAWtE,EAAOne,SAC1B,MACJ,KAAK,EACDhpB,EAAQ0rC,WAAavE,EAAOne,SAC5B,MACJ,QACIme,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaXsrC,EAAU/D,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtC2E,EAAU9D,OAAS,SAAgBxnC,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,IAAIimC,EAAa,GACjB,GAAwB,MAApBjmC,EAAQwrC,UAAoBxrC,EAAQtX,eAAe,cACnDu9C,EAAWxhB,MAAQ,IACdkhB,EAAM+B,UAAU1nC,EAAQwrC,WAAexrC,EAAQwrC,UAAY7F,EAAM+B,UAAU1nC,EAAQwrC,SAASxmB,MAAQ2gB,EAAM+B,UAAU1nC,EAAQwrC,SAASvmB,QACtI,MAAO,kCAEf,GAAwB,MAApBjlB,EAAQyrC,UAAoBzrC,EAAQtX,eAAe,YAAa,CAChE,GAAyB,IAArBu9C,EAAWxhB,MACX,MAAO,yBAEX,GADAwhB,EAAWxhB,MAAQ,GACdkhB,EAAM8B,SAASznC,EAAQyrC,UACxB,MAAO,4BAEf,OAA0B,MAAtBzrC,EAAQ0rC,YAAsB1rC,EAAQtX,eAAe,gBAChDi9C,EAAM8B,SAASznC,EAAQ0rC,YACjB,8BACR,MAWXJ,EAAU1D,WAAa,SAAoBC,GACvC,GAAIA,aAAkBhC,EAAMR,KAAK+F,iBAAiBE,UAC9C,OAAOzD,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAK+F,iBAAiBE,UAc9C,OAbuB,MAAnBzD,EAAO2D,WACH7F,EAAMxQ,MACLn1B,EAAQwrC,SAAW7F,EAAMxQ,KAAKuK,UAAUmI,EAAO2D,WAAW3N,UAAW,EACtC,iBAApBgK,EAAO2D,SACnBxrC,EAAQwrC,SAAWjM,SAASsI,EAAO2D,SAAU,IACb,iBAApB3D,EAAO2D,SACnBxrC,EAAQwrC,SAAW3D,EAAO2D,SACM,iBAApB3D,EAAO2D,WACnBxrC,EAAQwrC,SAAW,IAAI7F,EAAMmC,SAASD,EAAO2D,SAASxmB,MAAQ,EAAG6iB,EAAO2D,SAASvmB,OAAS,GAAGib,aAC9E,MAAnB2H,EAAO4D,WACPzrC,EAAQyrC,SAAW19C,OAAO85C,EAAO4D,WACZ,MAArB5D,EAAO6D,aACP1rC,EAAQ0rC,WAAa39C,OAAO85C,EAAO6D,aAChC1rC,GAYXsrC,EAAUvD,SAAW,SAAkB/nC,EAASgoC,GACvCA,IACDA,EAAU,IACd,IAAIH,EAAS,GAkBb,OAjBIG,EAAQE,WACRL,EAAO6D,WAAa,IACA,MAApB1rC,EAAQwrC,UAAoBxrC,EAAQtX,eAAe,cACnB,iBAArBsX,EAAQwrC,SACf3D,EAAO2D,SAAWxD,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQwrC,UAAYxrC,EAAQwrC,SAEhF3D,EAAO2D,SAAWxD,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQwrC,UAAYxD,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQwrC,SAASxmB,MAAQ,EAAGhlB,EAAQwrC,SAASvmB,OAAS,GAAGib,WAAalgC,EAAQwrC,SAChOxD,EAAQ6D,SACRhE,EAAOpjB,MAAQ,aAEC,MAApBzkB,EAAQyrC,UAAoBzrC,EAAQtX,eAAe,cACnDm/C,EAAO4D,SAAWzrC,EAAQyrC,SACtBzD,EAAQ6D,SACRhE,EAAOpjB,MAAQ,aAEG,MAAtBzkB,EAAQ0rC,YAAsB1rC,EAAQtX,eAAe,gBACrDm/C,EAAO6D,WAAa1rC,EAAQ0rC,YACzB7D,GAUXyD,EAAU94C,UAAUkrC,OAAS,WACzB,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnD4C,EAvQkB,GA0QtBF,EAvda,GA0dxB/F,EAAKuD,UAAY,WAkBb,SAASA,EAAU3C,GACf,GAAIA,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAoBhD,IAAIojD,EAoZJ,OA/ZA3C,EAAUp2C,UAAUs5C,WAAa,KAQjClD,EAAUp2C,UAAUk5C,WAAa,GAWjC/X,OAAOqK,eAAe4K,EAAUp2C,UAAW,QAAS,CAChDoC,IAAK+wC,EAAMgG,YAAYJ,EAAe,CAAC,eACvC98C,IAAKk3C,EAAMiG,YAAYL,KAW3B3C,EAAUxT,OAAS,SAAgB6Q,GAC/B,OAAO,IAAI2C,EAAU3C,IAYzB2C,EAAUhZ,OAAS,SAAgB5vB,EAAS0mC,GAOxC,OANKA,IACDA,EAASjB,EAAQrQ,UACK,MAAtBp1B,EAAQ8rC,YAAsB9rC,EAAQtX,eAAe,eACrDm9C,EAAMR,KAAKuD,UAAUmD,OAAOnc,OAAO5vB,EAAQ8rC,WAAYpF,EAAOC,OAA8B,IAAII,QAAQC,SAClF,MAAtBhnC,EAAQ0rC,YAAsB1rC,EAAQtX,eAAe,eACrDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQ0rC,YACrDhF,GAYXkC,EAAU1B,gBAAkB,SAAyBlnC,EAAS0mC,GAC1D,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxC4B,EAAU3oB,OAAS,SAAgBknB,EAAQ38C,GACjC28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKuD,UACrFzB,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQ8rC,WAAajG,EAAMR,KAAKuD,UAAUmD,OAAO9rB,OAAOknB,EAAQA,EAAOR,UACvE,MACJ,KAAK,EACD3mC,EAAQ0rC,WAAavE,EAAOne,SAC5B,MACJ,QACIme,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX4oC,EAAUrB,gBAAkB,SAAyBJ,GAGjD,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCiC,EAAUpB,OAAS,SAAgBxnC,GAC/B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBAEX,GAA0B,MAAtBA,EAAQ8rC,YAAsB9rC,EAAQtX,eAAe,cAAe,CAGhE,IAAIuC,EAAQ46C,EAAMR,KAAKuD,UAAUmD,OAAOvE,OAAOxnC,EAAQ8rC,YACvD,GAAI7gD,EACA,MAAO,cAAgBA,EAGnC,OAA0B,MAAtB+U,EAAQ0rC,YAAsB1rC,EAAQtX,eAAe,gBAChDi9C,EAAM8B,SAASznC,EAAQ0rC,YACjB,8BACR,MAWX9C,EAAUhB,WAAa,SAAoBC,GACvC,GAAIA,aAAkBhC,EAAMR,KAAKuD,UAC7B,OAAOf,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKuD,UAC7B,GAAyB,MAArBf,EAAOiE,WAAoB,CAC3B,GAAiC,iBAAtBjE,EAAOiE,WACd,MAAM9O,UAAU,+CACpBh9B,EAAQ8rC,WAAajG,EAAMR,KAAKuD,UAAUmD,OAAOnE,WAAWC,EAAOiE,YAIvE,OAFyB,MAArBjE,EAAO6D,aACP1rC,EAAQ0rC,WAAa39C,OAAO85C,EAAO6D,aAChC1rC,GAYX4oC,EAAUb,SAAW,SAAkB/nC,EAASgoC,GACvCA,IACDA,EAAU,IACd,IAAIH,EAAS,GAUb,OATIG,EAAQE,WACRL,EAAO6D,WAAa,IACE,MAAtB1rC,EAAQ8rC,YAAsB9rC,EAAQtX,eAAe,gBACrDm/C,EAAOiE,WAAajG,EAAMR,KAAKuD,UAAUmD,OAAOhE,SAAS/nC,EAAQ8rC,WAAY9D,GACzEA,EAAQ6D,SACRhE,EAAOpjB,MAAQ,eAEG,MAAtBzkB,EAAQ0rC,YAAsB1rC,EAAQtX,eAAe,gBACrDm/C,EAAO6D,WAAa1rC,EAAQ0rC,YACzB7D,GAUXe,EAAUp2C,UAAUkrC,OAAS,WACzB,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAG1DE,EAAUmD,OAAS,WAkBf,SAASA,EAAO9F,GACZ,GAAIA,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KA8LhD,OArLA4jD,EAAOv5C,UAAUw5C,SAAW,EAQ5BD,EAAOv5C,UAAUy5C,MAAQ,KAUzBF,EAAO3W,OAAS,SAAgB6Q,GAC5B,OAAO,IAAI8F,EAAO9F,IAYtB8F,EAAOnc,OAAS,SAAgB5vB,EAAS0mC,GAOrC,OANKA,IACDA,EAASjB,EAAQrQ,UACG,MAApBp1B,EAAQgsC,UAAoBhsC,EAAQtX,eAAe,aACnDg+C,EAAOC,OAA8B,GAAG5R,MAAM/0B,EAAQgsC,UACrC,MAAjBhsC,EAAQisC,OAAiBjsC,EAAQtX,eAAe,UAChDm9C,EAAMR,KAAK+F,iBAAiBxb,OAAO5vB,EAAQisC,MAAOvF,EAAOC,OAA8B,IAAII,QAAQC,SAChGN,GAYXqF,EAAO7E,gBAAkB,SAAyBlnC,EAAS0mC,GACvD,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxC+E,EAAO9rB,OAAS,SAAgBknB,EAAQ38C,GAC9B28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKuD,UAAUmD,OAC/F5E,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQgsC,SAAW7E,EAAOpS,QAC1B,MACJ,KAAK,EACD/0B,EAAQisC,MAAQpG,EAAMR,KAAK+F,iBAAiBnrB,OAAOknB,EAAQA,EAAOR,UAClE,MACJ,QACIQ,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX+rC,EAAOxE,gBAAkB,SAAyBJ,GAG9C,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtCoF,EAAOvE,OAAS,SAAgBxnC,GAC5B,GAAuB,iBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAwB,MAApBA,EAAQgsC,UAAoBhsC,EAAQtX,eAAe,cAC9Ci9C,EAAM+B,UAAU1nC,EAAQgsC,UACzB,MAAO,6BACf,GAAqB,MAAjBhsC,EAAQisC,OAAiBjsC,EAAQtX,eAAe,SAAU,CAC1D,IAAIuC,EAAQ46C,EAAMR,KAAK+F,iBAAiB5D,OAAOxnC,EAAQisC,OACvD,GAAIhhD,EACA,MAAO,SAAWA,EAE1B,OAAO,MAWX8gD,EAAOnE,WAAa,SAAoBC,GACpC,GAAIA,aAAkBhC,EAAMR,KAAKuD,UAAUmD,OACvC,OAAOlE,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKuD,UAAUmD,OAGvC,GAFuB,MAAnBlE,EAAOmE,WACPhsC,EAAQgsC,SAA6B,EAAlBnE,EAAOmE,UACV,MAAhBnE,EAAOoE,MAAe,CACtB,GAA4B,iBAAjBpE,EAAOoE,MACd,MAAMjP,UAAU,iDACpBh9B,EAAQisC,MAAQpG,EAAMR,KAAK+F,iBAAiBxD,WAAWC,EAAOoE,OAElE,OAAOjsC,GAYX+rC,EAAOhE,SAAW,SAAkB/nC,EAASgoC,GACpCA,IACDA,EAAU,IACd,IAAIH,EAAS,GASb,OARIG,EAAQE,WACRL,EAAOmE,SAAW,EAClBnE,EAAOoE,MAAQ,MAEK,MAApBjsC,EAAQgsC,UAAoBhsC,EAAQtX,eAAe,cACnDm/C,EAAOmE,SAAWhsC,EAAQgsC,UACT,MAAjBhsC,EAAQisC,OAAiBjsC,EAAQtX,eAAe,WAChDm/C,EAAOoE,MAAQpG,EAAMR,KAAK+F,iBAAiBrD,SAAS/nC,EAAQisC,MAAOjE,IAChEH,GAUXkE,EAAOv5C,UAAUkrC,OAAS,WACtB,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDqD,EApNQ,GAuNZnD,EA9bM,GAicjBvD,EAAKqE,mBAAqB,WAkBtB,SAASA,EAAmBzD,GACxB,GAAIA,EACA,IAAK,IAAIrS,EAAOD,OAAOC,KAAKqS,GAAa99C,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,EACpC,MAAvB89C,EAAWrS,EAAKzrC,MAChBqa,KAAKoxB,EAAKzrC,IAAM89C,EAAWrS,EAAKzrC,KAuMhD,OA9LAuhD,EAAmBl3C,UAAUy2C,OAAS,GAQtCS,EAAmBl3C,UAAU6b,QAAUs3B,EAAMxQ,KAAOwQ,EAAMxQ,KAAKmJ,SAAS,EAAE,GAAE,GAAS,EAUrFoL,EAAmBtU,OAAS,SAAgB6Q,GACxC,OAAO,IAAIyD,EAAmBzD,IAYlCyD,EAAmB9Z,OAAS,SAAgB5vB,EAAS0mC,GAOjD,OANKA,IACDA,EAASjB,EAAQrQ,UACC,MAAlBp1B,EAAQipC,QAAkBjpC,EAAQtX,eAAe,WACjDg+C,EAAOC,OAA8B,IAAI3d,OAAOhpB,EAAQipC,QACrC,MAAnBjpC,EAAQqO,SAAmBrO,EAAQtX,eAAe,YAClDg+C,EAAOC,OAA8B,IAAIE,MAAM7mC,EAAQqO,SACpDq4B,GAYXgD,EAAmBxC,gBAAkB,SAAyBlnC,EAAS0mC,GACnE,OAAOlkC,KAAKotB,OAAO5vB,EAAS0mC,GAAQM,UAcxC0C,EAAmBzpB,OAAS,SAAgBknB,EAAQ38C,GAC1C28C,aAAkB5B,IACpB4B,EAAS5B,EAAQnQ,OAAO+R,IAE5B,IADA,IAAItX,OAAiBnS,IAAXlzB,EAAuB28C,EAAOpiC,IAAMoiC,EAAOtW,IAAMrmC,EAAQwV,EAAU,IAAI6lC,EAAMR,KAAKqE,mBACrFvC,EAAOtW,IAAMhB,GAAK,CACrB,IAAIuX,EAAMD,EAAOR,SACjB,OAAQS,IAAQ,GAChB,KAAK,EACDpnC,EAAQipC,OAAS9B,EAAOne,SACxB,MACJ,KAAK,EACDhpB,EAAQqO,QAAU84B,EAAON,QACzB,MACJ,QACIM,EAAOG,SAAe,EAANF,IAIxB,OAAOpnC,GAaX0pC,EAAmBnC,gBAAkB,SAAyBJ,GAG1D,OAFMA,aAAkB5B,IACpB4B,EAAS,IAAI5B,EAAQ4B,IAClB3kC,KAAKyd,OAAOknB,EAAQA,EAAOR,WAWtC+C,EAAmBlC,OAAS,SAAgBxnC,GACxC,MAAuB,iBAAZA,GAAoC,OAAZA,EACxB,kBACW,MAAlBA,EAAQipC,QAAkBjpC,EAAQtX,eAAe,YAC5Ci9C,EAAM8B,SAASznC,EAAQipC,QACjB,0BACQ,MAAnBjpC,EAAQqO,SAAmBrO,EAAQtX,eAAe,cAC7Ci9C,EAAM+B,UAAU1nC,EAAQqO,UAAcrO,EAAQqO,SAAWs3B,EAAM+B,UAAU1nC,EAAQqO,QAAQ2W,MAAQ2gB,EAAM+B,UAAU1nC,EAAQqO,QAAQ4W,OAC3H,iCACR,MAWXykB,EAAmB9B,WAAa,SAAoBC,GAChD,GAAIA,aAAkBhC,EAAMR,KAAKqE,mBAC7B,OAAO7B,EACX,IAAI7nC,EAAU,IAAI6lC,EAAMR,KAAKqE,mBAY7B,OAXqB,MAAjB7B,EAAOoB,SACPjpC,EAAQipC,OAASl7C,OAAO85C,EAAOoB,SACb,MAAlBpB,EAAOx5B,UACHs3B,EAAMxQ,MACLn1B,EAAQqO,QAAUs3B,EAAMxQ,KAAKuK,UAAUmI,EAAOx5B,UAAUwvB,UAAW,EACrC,iBAAnBgK,EAAOx5B,QACnBrO,EAAQqO,QAAUkxB,SAASsI,EAAOx5B,QAAS,IACZ,iBAAnBw5B,EAAOx5B,QACnBrO,EAAQqO,QAAUw5B,EAAOx5B,QACM,iBAAnBw5B,EAAOx5B,UACnBrO,EAAQqO,QAAU,IAAIs3B,EAAMmC,SAASD,EAAOx5B,QAAQ2W,MAAQ,EAAG6iB,EAAOx5B,QAAQ4W,OAAS,GAAGib,aAC3FlgC,GAYX0pC,EAAmB3B,SAAW,SAAkB/nC,EAASgoC,GAChDA,IACDA,EAAU,IACd,IAAIH,EAAS,GACb,GAAIG,EAAQE,SAER,GADAL,EAAOoB,OAAS,GACZtD,EAAMxQ,KAAM,CACZ,IAAIgT,EAAO,IAAIxC,EAAMxQ,KAAK,EAAG,GAAG,GAChC0S,EAAOx5B,QAAU25B,EAAQI,QAAUr6C,OAASo6C,EAAKlyB,WAAa+xB,EAAQI,QAAUl1B,OAASi1B,EAAKjI,WAAaiI,OAE3GN,EAAOx5B,QAAU25B,EAAQI,QAAUr6C,OAAS,IAAM,EAS1D,OAPsB,MAAlBiS,EAAQipC,QAAkBjpC,EAAQtX,eAAe,YACjDm/C,EAAOoB,OAASjpC,EAAQipC,QACL,MAAnBjpC,EAAQqO,SAAmBrO,EAAQtX,eAAe,aACnB,iBAApBsX,EAAQqO,QACfw5B,EAAOx5B,QAAU25B,EAAQI,QAAUr6C,OAASA,OAAOiS,EAAQqO,SAAWrO,EAAQqO,QAE9Ew5B,EAAOx5B,QAAU25B,EAAQI,QAAUr6C,OAAS43C,EAAMxQ,KAAK3iC,UAAUyjB,SAAS+d,KAAKh0B,EAAQqO,SAAW25B,EAAQI,QAAUl1B,OAAS,IAAIyyB,EAAMmC,SAAS9nC,EAAQqO,QAAQ2W,MAAQ,EAAGhlB,EAAQqO,QAAQ4W,OAAS,GAAGib,WAAalgC,EAAQqO,SAC7Nw5B,GAUX6B,EAAmBl3C,UAAUkrC,OAAS,WAClC,OAAOl7B,KAAKimC,YAAYV,SAASvlC,KAAM8iC,EAAUM,KAAK8C,gBAGnDgB,EA7Ne,GAgOnBrE,GAGXrxC,EAAOJ,QAAUiyC,G,kCCpxJjB7xC,EAAOJ,QAAU,EAAjB,O,kCCFA,IAAIs4C,EAAWt4C,EA2Bf,SAASu4C,IACLD,EAAStG,KAAKwG,aACdF,EAASxG,OAAO0G,WAAWF,EAASG,cACpCH,EAAS1G,OAAO4G,WAAWF,EAASI,cAtBxCJ,EAASK,MAAQ,UAGjBL,EAASxG,OAAe,EAAQ,MAChCwG,EAASG,aAAe,EAAQ,MAChCH,EAAS1G,OAAe,EAAQ,MAChC0G,EAASI,aAAe,EAAQ,KAGhCJ,EAAStG,KAAe,EAAQ,MAChCsG,EAASM,IAAe,EAAQ,MAChCN,EAASpG,MAAe,EAAQ,MAChCoG,EAASC,UAAeA,EAcxBA,K,kCClCAn4C,EAAOJ,QAAU4xC,EAEjB,IAEI8G,EAFA1G,EAAY,EAAQ,MAIpBkC,EAAYlC,EAAKkC,SACjB7T,EAAY2R,EAAK3R,KAGrB,SAASwY,EAAgBtF,EAAQuF,GAC7B,OAAOrN,WAAW,uBAAyB8H,EAAOtW,IAAM,OAAS6b,GAAe,GAAK,MAAQvF,EAAOpiC,KASxG,SAASygC,EAAOj+C,GAMZib,KAAK4e,IAAM75B,EAMXib,KAAKquB,IAAM,EAMXruB,KAAKuC,IAAMxd,EAAOiD,OAGtB,IA4CQi6B,EA5CJkoB,EAAqC,oBAAftiD,WACpB,SAA4B9C,GAC1B,GAAIA,aAAkB8C,YAAcmsB,MAAMmxB,QAAQpgD,GAC9C,OAAO,IAAIi+C,EAAOj+C,GACtB,MAAM6I,MAAM,mBAGd,SAAsB7I,GACpB,GAAIivB,MAAMmxB,QAAQpgD,GACd,OAAO,IAAIi+C,EAAOj+C,GACtB,MAAM6I,MAAM,mBAGhBglC,EAAS,WACT,OAAOwQ,EAAKgH,OACN,SAA6BrlD,GAC3B,OAAQi+C,EAAOpQ,OAAS,SAAuB7tC,GAC3C,OAAOq+C,EAAKgH,OAAOC,SAAStlD,GACtB,IAAI+kD,EAAa/kD,GAEjBolD,EAAaplD,KACpBA,IAGLolD,GAwDV,SAASG,IAEL,IAAIC,EAAO,IAAIjF,EAAS,EAAG,GACvB3/C,EAAI,EACR,KAAIqa,KAAKuC,IAAMvC,KAAKquB,IAAM,GAanB,CACH,KAAO1oC,EAAI,IAAKA,EAAG,CAEf,GAAIqa,KAAKquB,KAAOruB,KAAKuC,IACjB,MAAM0nC,EAAgBjqC,MAG1B,GADAuqC,EAAK1Z,IAAM0Z,EAAK1Z,IAA2B,IAArB7wB,KAAK4e,IAAI5e,KAAKquB,OAAmB,EAAJ1oC,KAAW,EAC1Dqa,KAAK4e,IAAI5e,KAAKquB,OAAS,IACvB,OAAOkc,EAIf,OADAA,EAAK1Z,IAAM0Z,EAAK1Z,IAA6B,IAAvB7wB,KAAK4e,IAAI5e,KAAKquB,SAAqB,EAAJ1oC,KAAW,EACzD4kD,EAxBP,KAAO5kD,EAAI,IAAKA,EAGZ,GADA4kD,EAAK1Z,IAAM0Z,EAAK1Z,IAA2B,IAArB7wB,KAAK4e,IAAI5e,KAAKquB,OAAmB,EAAJ1oC,KAAW,EAC1Dqa,KAAK4e,IAAI5e,KAAKquB,OAAS,IACvB,OAAOkc,EAKf,GAFAA,EAAK1Z,IAAM0Z,EAAK1Z,IAA2B,IAArB7wB,KAAK4e,IAAI5e,KAAKquB,OAAe,MAAQ,EAC3Dkc,EAAKzZ,IAAMyZ,EAAKzZ,IAA2B,IAArB9wB,KAAK4e,IAAI5e,KAAKquB,OAAgB,KAAO,EACvDruB,KAAK4e,IAAI5e,KAAKquB,OAAS,IACvB,OAAOkc,EAgBf,GAfI5kD,EAAI,EAeJqa,KAAKuC,IAAMvC,KAAKquB,IAAM,GACtB,KAAO1oC,EAAI,IAAKA,EAGZ,GADA4kD,EAAKzZ,IAAMyZ,EAAKzZ,IAA2B,IAArB9wB,KAAK4e,IAAI5e,KAAKquB,OAAmB,EAAJ1oC,EAAQ,KAAO,EAC9Dqa,KAAK4e,IAAI5e,KAAKquB,OAAS,IACvB,OAAOkc,OAGf,KAAO5kD,EAAI,IAAKA,EAAG,CAEf,GAAIqa,KAAKquB,KAAOruB,KAAKuC,IACjB,MAAM0nC,EAAgBjqC,MAG1B,GADAuqC,EAAKzZ,IAAMyZ,EAAKzZ,IAA2B,IAArB9wB,KAAK4e,IAAI5e,KAAKquB,OAAmB,EAAJ1oC,EAAQ,KAAO,EAC9Dqa,KAAK4e,IAAI5e,KAAKquB,OAAS,IACvB,OAAOkc,EAInB,MAAM38C,MAAM,2BAkChB,SAAS48C,EAAgB5rB,EAAKyO,GAC1B,OAAQzO,EAAIyO,EAAM,GACVzO,EAAIyO,EAAM,IAAM,EAChBzO,EAAIyO,EAAM,IAAM,GAChBzO,EAAIyO,EAAM,IAAM,MAAQ,EA+BpC,SAASod,IAGL,GAAIzqC,KAAKquB,IAAM,EAAIruB,KAAKuC,IACpB,MAAM0nC,EAAgBjqC,KAAM,GAEhC,OAAO,IAAIslC,EAASkF,EAAgBxqC,KAAK4e,IAAK5e,KAAKquB,KAAO,GAAImc,EAAgBxqC,KAAK4e,IAAK5e,KAAKquB,KAAO,IA3KxG2U,EAAOpQ,OAASA,IAEhBoQ,EAAOhzC,UAAU06C,OAAStH,EAAKpvB,MAAMhkB,UAAUwtB,UAAuC4lB,EAAKpvB,MAAMhkB,UAAU9H,MAO3G86C,EAAOhzC,UAAUm0C,QACTliB,EAAQ,WACL,WACuD,GAA1DA,GAAuC,IAArBjiB,KAAK4e,IAAI5e,KAAKquB,QAAuB,EAAOruB,KAAK4e,IAAI5e,KAAKquB,OAAS,IAAK,OAAOpM,EACvC,GAA1DA,GAASA,GAA8B,IAArBjiB,KAAK4e,IAAI5e,KAAKquB,OAAgB,KAAO,EAAOruB,KAAK4e,IAAI5e,KAAKquB,OAAS,IAAK,OAAOpM,EACvC,GAA1DA,GAASA,GAA8B,IAArBjiB,KAAK4e,IAAI5e,KAAKquB,OAAe,MAAQ,EAAOruB,KAAK4e,IAAI5e,KAAKquB,OAAS,IAAK,OAAOpM,EACvC,GAA1DA,GAASA,GAA8B,IAArBjiB,KAAK4e,IAAI5e,KAAKquB,OAAe,MAAQ,EAAOruB,KAAK4e,IAAI5e,KAAKquB,OAAS,IAAK,OAAOpM,EACvC,GAA1DA,GAASA,GAA+B,GAAtBjiB,KAAK4e,IAAI5e,KAAKquB,OAAe,MAAQ,EAAOruB,KAAK4e,IAAI5e,KAAKquB,OAAS,IAAK,OAAOpM,EAGjG,IAAKjiB,KAAKquB,KAAO,GAAKruB,KAAKuC,IAEvB,MADAvC,KAAKquB,IAAMruB,KAAKuC,IACV0nC,EAAgBjqC,KAAM,IAEhC,OAAOiiB,IAQf+gB,EAAOhzC,UAAUuiC,MAAQ,WACrB,OAAuB,EAAhBvyB,KAAKmkC,UAOhBnB,EAAOhzC,UAAU26C,OAAS,WACtB,IAAI1oB,EAAQjiB,KAAKmkC,SACjB,OAAOliB,IAAU,IAAc,EAARA,GAAa,GAqFxC+gB,EAAOhzC,UAAU46C,KAAO,WACpB,OAAyB,IAAlB5qC,KAAKmkC,UAchBnB,EAAOhzC,UAAU66C,QAAU,WAGvB,GAAI7qC,KAAKquB,IAAM,EAAIruB,KAAKuC,IACpB,MAAM0nC,EAAgBjqC,KAAM,GAEhC,OAAOwqC,EAAgBxqC,KAAK4e,IAAK5e,KAAKquB,KAAO,IAOjD2U,EAAOhzC,UAAU86C,SAAW,WAGxB,GAAI9qC,KAAKquB,IAAM,EAAIruB,KAAKuC,IACpB,MAAM0nC,EAAgBjqC,KAAM,GAEhC,OAAkD,EAA3CwqC,EAAgBxqC,KAAK4e,IAAK5e,KAAKquB,KAAO,IAmCjD2U,EAAOhzC,UAAUo0C,MAAQ,WAGrB,GAAIpkC,KAAKquB,IAAM,EAAIruB,KAAKuC,IACpB,MAAM0nC,EAAgBjqC,KAAM,GAEhC,IAAIiiB,EAAQmhB,EAAKgB,MAAMzV,YAAY3uB,KAAK4e,IAAK5e,KAAKquB,KAElD,OADAruB,KAAKquB,KAAO,EACLpM,GAQX+gB,EAAOhzC,UAAUu4C,OAAS,WAGtB,GAAIvoC,KAAKquB,IAAM,EAAIruB,KAAKuC,IACpB,MAAM0nC,EAAgBjqC,KAAM,GAEhC,IAAIiiB,EAAQmhB,EAAKgB,MAAM7T,aAAavwB,KAAK4e,IAAK5e,KAAKquB,KAEnD,OADAruB,KAAKquB,KAAO,EACLpM,GAOX+gB,EAAOhzC,UAAUo8B,MAAQ,WACrB,IAAIpkC,EAASgY,KAAKmkC,SACdpe,EAAS/lB,KAAKquB,IACdhB,EAASrtB,KAAKquB,IAAMrmC,EAGxB,GAAIqlC,EAAMrtB,KAAKuC,IACX,MAAM0nC,EAAgBjqC,KAAMhY,GAGhC,OADAgY,KAAKquB,KAAOrmC,EACRgsB,MAAMmxB,QAAQnlC,KAAK4e,KACZ5e,KAAK4e,IAAI12B,MAAM69B,EAAOsH,GAC1BtH,IAAUsH,EACX,IAAIrtB,KAAK4e,IAAIqnB,YAAY,GACzBjmC,KAAK0qC,OAAOlZ,KAAKxxB,KAAK4e,IAAKmH,EAAOsH,IAO5C2V,EAAOhzC,UAAUw2B,OAAS,WACtB,IAAI4F,EAAQpsB,KAAKosB,QACjB,OAAOqF,EAAK7oC,KAAKwjC,EAAO,EAAGA,EAAMpkC,SAQrCg7C,EAAOhzC,UAAU+6C,KAAO,SAAc/iD,GAClC,GAAsB,iBAAXA,EAAqB,CAE5B,GAAIgY,KAAKquB,IAAMrmC,EAASgY,KAAKuC,IACzB,MAAM0nC,EAAgBjqC,KAAMhY,GAChCgY,KAAKquB,KAAOrmC,OAEZ,GAEI,GAAIgY,KAAKquB,KAAOruB,KAAKuC,IACjB,MAAM0nC,EAAgBjqC,YACE,IAAvBA,KAAK4e,IAAI5e,KAAKquB,QAE3B,OAAOruB,MAQXgjC,EAAOhzC,UAAU80C,SAAW,SAASkG,GACjC,OAAQA,GACJ,KAAK,EACDhrC,KAAK+qC,OACL,MACJ,KAAK,EACD/qC,KAAK+qC,KAAK,GACV,MACJ,KAAK,EACD/qC,KAAK+qC,KAAK/qC,KAAKmkC,UACf,MACJ,KAAK,EACD,KAA0C,IAAlC6G,EAA2B,EAAhBhrC,KAAKmkC,WACpBnkC,KAAK8kC,SAASkG,GAElB,MACJ,KAAK,EACDhrC,KAAK+qC,KAAK,GACV,MAGJ,QACI,MAAMn9C,MAAM,qBAAuBo9C,EAAW,cAAgBhrC,KAAKquB,KAE3E,OAAOruB,MAGXgjC,EAAO4G,WAAa,SAASqB,GACzBnB,EAAemB,EACfjI,EAAOpQ,OAASA,IAChBkX,EAAaF,aAEb,IAAI5vC,EAAKopC,EAAKzQ,KAAO,SAAsC,WAC3DyQ,EAAK8H,MAAMlI,EAAOhzC,UAAW,CAEzBq0C,MAAO,WACH,OAAOiG,EAAe9Y,KAAKxxB,MAAMhG,IAAI,IAGzCwuC,OAAQ,WACJ,OAAO8B,EAAe9Y,KAAKxxB,MAAMhG,IAAI,IAGzCmxC,OAAQ,WACJ,OAAOb,EAAe9Y,KAAKxxB,MAAMorC,WAAWpxC,IAAI,IAGpDqxC,QAAS,WACL,OAAOZ,EAAYjZ,KAAKxxB,MAAMhG,IAAI,IAGtCsxC,SAAU,WACN,OAAOb,EAAYjZ,KAAKxxB,MAAMhG,IAAI,Q,iCCrZ9CxI,EAAOJ,QAAU04C,EAGjB,IAAI9G,EAAS,EAAQ,OACpB8G,EAAa95C,UAAYmhC,OAAOyB,OAAOoQ,EAAOhzC,YAAYi2C,YAAc6D,EAEzE,IAAI1G,EAAO,EAAQ,MASnB,SAAS0G,EAAa/kD,GAClBi+C,EAAOxR,KAAKxxB,KAAMjb,GAStB+kD,EAAaF,WAAa,WAElBxG,EAAKgH,SACLN,EAAa95C,UAAU06C,OAAStH,EAAKgH,OAAOp6C,UAAU9H,QAO9D4hD,EAAa95C,UAAUw2B,OAAS,WAC5B,IAAIjkB,EAAMvC,KAAKmkC,SACf,OAAOnkC,KAAK4e,IAAI2sB,UACVvrC,KAAK4e,IAAI2sB,UAAUvrC,KAAKquB,IAAKruB,KAAKquB,IAAMjpB,KAAKC,IAAIrF,KAAKquB,IAAM9rB,EAAKvC,KAAKuC,MACtEvC,KAAK4e,IAAInL,SAAS,QAASzT,KAAKquB,IAAKruB,KAAKquB,IAAMjpB,KAAKC,IAAIrF,KAAKquB,IAAM9rB,EAAKvC,KAAKuC,OAUxFunC,EAAaF,c,8BCjDbp4C,EAAOJ,QAAU,I,kCCKPA,EA6BNo6C,QAAU,EAAQ,O,kCClCtBh6C,EAAOJ,QAAUo6C,EAEjB,IAAIpI,EAAO,EAAQ,MAsCnB,SAASoI,EAAQC,EAASC,EAAkBC,GAExC,GAAuB,mBAAZF,EACP,MAAMjR,UAAU,8BAEpB4I,EAAKzV,aAAa6D,KAAKxxB,MAMvBA,KAAKyrC,QAAUA,EAMfzrC,KAAK0rC,iBAAmBE,QAAQF,GAMhC1rC,KAAK2rC,kBAAoBC,QAAQD,IA1DpCH,EAAQx7C,UAAYmhC,OAAOyB,OAAOwQ,EAAKzV,aAAa39B,YAAYi2C,YAAcuF,EAwE/EA,EAAQx7C,UAAU67C,QAAU,SAASA,EAAQC,EAAQC,EAAaC,EAAcC,EAASnsB,GAErF,IAAKmsB,EACD,MAAMzR,UAAU,6BAEpB,IAAInxC,EAAO2W,KACX,IAAK8f,EACD,OAAOsjB,EAAK8I,UAAUL,EAASxiD,EAAMyiD,EAAQC,EAAaC,EAAcC,GAE5E,GAAK5iD,EAAKoiD,QAKV,IACI,OAAOpiD,EAAKoiD,QACRK,EACAC,EAAY1iD,EAAKqiD,iBAAmB,kBAAoB,UAAUO,GAAS5U,UAC3E,SAAqBxa,EAAK7yB,GAEtB,GAAI6yB,EAEA,OADAxzB,EAAK0kC,KAAK,QAASlR,EAAKivB,GACjBhsB,EAASjD,GAGpB,GAAiB,OAAb7yB,EAAJ,CAKA,KAAMA,aAAoBgiD,GACtB,IACIhiD,EAAWgiD,EAAa3iD,EAAKsiD,kBAAoB,kBAAoB,UAAU3hD,GACjF,MAAO6yB,GAEL,OADAxzB,EAAK0kC,KAAK,QAASlR,EAAKivB,GACjBhsB,EAASjD,GAKxB,OADAxzB,EAAK0kC,KAAK,OAAQ/jC,EAAU8hD,GACrBhsB,EAAS,KAAM91B,GAdlBX,EAAKgkC,KAAqB,MAiBxC,MAAOxQ,GAGL,OAFAxzB,EAAK0kC,KAAK,QAASlR,EAAKivB,QACxB/5C,YAAW,WAAa+tB,EAASjD,KAAS,QAnC1C9qB,YAAW,WAAa+tB,EAASlyB,MAAM,oBAAsB,IA6CrE49C,EAAQx7C,UAAUq9B,IAAM,SAAa8e,GAOjC,OANInsC,KAAKyrC,UACAU,GACDnsC,KAAKyrC,QAAQ,KAAM,KAAM,MAC7BzrC,KAAKyrC,QAAU,KACfzrC,KAAK+tB,KAAK,OAAOrK,OAEd1jB,O,kCC3IXxO,EAAOJ,QAAUk0C,EAEjB,IAAIlC,EAAO,EAAQ,MAUnB,SAASkC,EAASzU,EAAIC,GASlB9wB,KAAK6wB,GAAKA,IAAO,EAMjB7wB,KAAK8wB,GAAKA,IAAO,EAQrB,IAAIsb,EAAO9G,EAAS8G,KAAO,IAAI9G,EAAS,EAAG,GAE3C8G,EAAK1O,SAAW,WAAa,OAAO,GACpC0O,EAAKC,SAAWD,EAAKhB,SAAW,WAAa,OAAOprC,MACpDosC,EAAKpkD,OAAS,WAAa,OAAO,GAOlC,IAAIskD,EAAWhH,EAASgH,SAAW,mBAOnChH,EAASvJ,WAAa,SAAoB9Z,GACtC,GAAc,IAAVA,EACA,OAAOmqB,EACX,IAAIrd,EAAO9M,EAAQ,EACf8M,IACA9M,GAASA,GACb,IAAI4O,EAAK5O,IAAU,EACf6O,GAAM7O,EAAQ4O,GAAM,aAAe,EAUvC,OATI9B,IACA+B,GAAMA,IAAO,EACbD,GAAMA,IAAO,IACPA,EAAK,aACPA,EAAK,IACCC,EAAK,aACPA,EAAK,KAGV,IAAIwU,EAASzU,EAAIC,IAQ5BwU,EAASiH,KAAO,SAActqB,GAC1B,GAAqB,iBAAVA,EACP,OAAOqjB,EAASvJ,WAAW9Z,GAC/B,GAAImhB,EAAK6B,SAAShjB,GAAQ,CAEtB,IAAImhB,EAAKzQ,KAGL,OAAO2S,EAASvJ,WAAWgB,SAAS9a,EAAO,KAF3CA,EAAQmhB,EAAKzQ,KAAKgK,WAAW1a,GAIrC,OAAOA,EAAMO,KAAOP,EAAMQ,KAAO,IAAI6iB,EAASrjB,EAAMO,MAAQ,EAAGP,EAAMQ,OAAS,GAAK2pB,GAQvF9G,EAASt1C,UAAU0tC,SAAW,SAAkBrC,GAC5C,IAAKA,GAAYr7B,KAAK8wB,KAAO,GAAI,CAC7B,IAAID,EAAgB,GAAV7wB,KAAK6wB,KAAW,EACtBC,GAAM9wB,KAAK8wB,KAAW,EAG1B,OAFKD,IACDC,EAAKA,EAAK,IAAM,KACXD,EAAU,WAALC,GAElB,OAAO9wB,KAAK6wB,GAAe,WAAV7wB,KAAK8wB,IAQ1BwU,EAASt1C,UAAUw8C,OAAS,SAAgBnR,GACxC,OAAO+H,EAAKzQ,KACN,IAAIyQ,EAAKzQ,KAAe,EAAV3yB,KAAK6wB,GAAkB,EAAV7wB,KAAK8wB,GAAQ8a,QAAQvQ,IAEhD,CAAE7Y,IAAe,EAAVxiB,KAAK6wB,GAAQpO,KAAgB,EAAVziB,KAAK8wB,GAAQuK,SAAUuQ,QAAQvQ,KAGnE,IAAI1vC,EAAaJ,OAAOyE,UAAUrE,WAOlC25C,EAASmH,SAAW,SAAkBC,GAClC,OAAIA,IAASJ,EACFF,EACJ,IAAI9G,GACL35C,EAAW6lC,KAAKkb,EAAM,GACtB/gD,EAAW6lC,KAAKkb,EAAM,IAAM,EAC5B/gD,EAAW6lC,KAAKkb,EAAM,IAAM,GAC5B/gD,EAAW6lC,KAAKkb,EAAM,IAAM,MAAQ,GAEpC/gD,EAAW6lC,KAAKkb,EAAM,GACtB/gD,EAAW6lC,KAAKkb,EAAM,IAAM,EAC5B/gD,EAAW6lC,KAAKkb,EAAM,IAAM,GAC5B/gD,EAAW6lC,KAAKkb,EAAM,IAAM,MAAQ,IAQ9CpH,EAASt1C,UAAU28C,OAAS,WACxB,OAAOphD,OAAOC,aACO,IAAjBwU,KAAK6wB,GACL7wB,KAAK6wB,KAAO,EAAK,IACjB7wB,KAAK6wB,KAAO,GAAK,IACjB7wB,KAAK6wB,KAAO,GACK,IAAjB7wB,KAAK8wB,GACL9wB,KAAK8wB,KAAO,EAAK,IACjB9wB,KAAK8wB,KAAO,GAAK,IACjB9wB,KAAK8wB,KAAO,KAQpBwU,EAASt1C,UAAUq8C,SAAW,WAC1B,IAAIO,EAAS5sC,KAAK8wB,IAAM,GAGxB,OAFA9wB,KAAK8wB,KAAQ9wB,KAAK8wB,IAAM,EAAI9wB,KAAK6wB,KAAO,IAAM+b,KAAU,EACxD5sC,KAAK6wB,IAAQ7wB,KAAK6wB,IAAM,EAAsB+b,KAAU,EACjD5sC,MAOXslC,EAASt1C,UAAUo7C,SAAW,WAC1B,IAAIwB,IAAmB,EAAV5sC,KAAK6wB,IAGlB,OAFA7wB,KAAK6wB,KAAQ7wB,KAAK6wB,KAAO,EAAI7wB,KAAK8wB,IAAM,IAAM8b,KAAU,EACxD5sC,KAAK8wB,IAAQ9wB,KAAK8wB,KAAO,EAAqB8b,KAAU,EACjD5sC,MAOXslC,EAASt1C,UAAUhI,OAAS,WACxB,IAAI6kD,EAAS7sC,KAAK6wB,GACdic,GAAS9sC,KAAK6wB,KAAO,GAAK7wB,KAAK8wB,IAAM,KAAO,EAC5Cic,EAAS/sC,KAAK8wB,KAAO,GACzB,OAAiB,IAAVic,EACU,IAAVD,EACED,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EACxBC,EAAQ,MACNA,EAAQ,IAAM,EAAI,EAClBA,EAAQ,QAAU,EAAI,EAC1BC,EAAQ,IAAM,EAAI,K,kCCrM7B,IAAI3J,EAAOhyC,EA2OX,SAAS85C,EAAMviB,EAAKhkC,EAAKqoD,GACrB,IAAK,IAAI5b,EAAOD,OAAOC,KAAKzsC,GAAMgB,EAAI,EAAGA,EAAIyrC,EAAKppC,SAAUrC,OACnCu1B,IAAjByN,EAAIyI,EAAKzrC,KAAsBqnD,IAC/BrkB,EAAIyI,EAAKzrC,IAAMhB,EAAIysC,EAAKzrC,KAChC,OAAOgjC,EAoBX,SAASskB,EAAShgC,GAEd,SAASigC,EAAY1vC,EAASimC,GAE1B,KAAMzjC,gBAAgBktC,GAClB,OAAO,IAAIA,EAAY1vC,EAASimC,GAKpCtS,OAAOqK,eAAex7B,KAAM,UAAW,CAAE5N,IAAK,WAAa,OAAOoL,KAG9D5P,MAAMu/C,kBACNv/C,MAAMu/C,kBAAkBntC,KAAMktC,GAE9B/b,OAAOqK,eAAex7B,KAAM,QAAS,CAAEiiB,OAAO,IAAIr0B,OAAQiC,OAAS,KAEnE4zC,GACAyH,EAAMlrC,KAAMyjC,GAWpB,OARCyJ,EAAYl9C,UAAYmhC,OAAOyB,OAAOhlC,MAAMoC,YAAYi2C,YAAciH,EAEvE/b,OAAOqK,eAAe0R,EAAYl9C,UAAW,OAAQ,CAAEoC,IAAK,WAAa,OAAO6a,KAEhFigC,EAAYl9C,UAAUyjB,SAAW,WAC7B,OAAOzT,KAAKiN,KAAO,KAAOjN,KAAKxC,SAG5B0vC,EA9RX9J,EAAK8I,UAAY,EAAQ,MAGzB9I,EAAKpW,OAAS,EAAQ,MAGtBoW,EAAKzV,aAAe,EAAQ,MAG5ByV,EAAKgB,MAAQ,EAAQ,KAGrBhB,EAAKrS,QAAU,EAAQ,MAGvBqS,EAAK3R,KAAO,EAAQ,MAGpB2R,EAAKgK,KAAO,EAAQ,MAGpBhK,EAAKkC,SAAW,EAAQ,MAOxBlC,EAAKiK,OAASzB,QAA0B,oBAAXljD,QACPA,QACAA,OAAO9B,SACP8B,OAAO9B,QAAQC,UACf6B,OAAO9B,QAAQC,SAASC,MAO9Cs8C,EAAK16C,OAAS06C,EAAKiK,QAAU3kD,QACG,oBAAXhC,QAA0BA,QACf,oBAAX2C,MAA0BA,MACjC2W,KAQdojC,EAAKa,WAAa9S,OAAOmc,OAASnc,OAAOmc,OAAO,IAAiC,GAOjFlK,EAAKmK,YAAcpc,OAAOmc,OAASnc,OAAOmc,OAAO,IAAiC,GAQlFlK,EAAK8B,UAAYx0B,OAAOw0B,WAAwC,SAAmBjjB,GAC/E,MAAwB,iBAAVA,GAAsB8jB,SAAS9jB,IAAU7c,KAAK+pB,MAAMlN,KAAWA,GAQjFmhB,EAAK6B,SAAW,SAAkBhjB,GAC9B,MAAwB,iBAAVA,GAAsBA,aAAiB12B,QAQzD63C,EAAKoK,SAAW,SAAkBvrB,GAC9B,OAAOA,GAA0B,iBAAVA,GAW3BmhB,EAAKqK,MAQLrK,EAAKsK,MAAQ,SAAepX,EAAKqX,GAC7B,IAAI1rB,EAAQqU,EAAIqX,GAChB,QAAa,MAAT1rB,IAAiBqU,EAAIpwC,eAAeynD,MACZ,iBAAV1rB,IAAuBjO,MAAMmxB,QAAQljB,GAASA,EAAMj6B,OAASmpC,OAAOC,KAAKnP,GAAOj6B,QAAU,IAehHo7C,EAAKgH,OAAS,WACV,IACI,IAAIA,EAAShH,EAAKrS,QAAQ,UAAUqZ,OAEpC,OAAOA,EAAOp6C,UAAU49C,UAAYxD,EAAoC,KAC1E,MAAO5lD,GAEL,OAAO,MAPD,GAYd4+C,EAAKyK,aAAe,KAGpBzK,EAAK0K,oBAAsB,KAO3B1K,EAAKY,UAAY,SAAmB+J,GAEhC,MAA8B,iBAAhBA,EACR3K,EAAKgH,OACDhH,EAAK0K,oBAAoBC,GACzB,IAAI3K,EAAKpvB,MAAM+5B,GACnB3K,EAAKgH,OACDhH,EAAKyK,aAAaE,GACI,oBAAflmD,WACHkmD,EACA,IAAIlmD,WAAWkmD,IAOjC3K,EAAKpvB,MAA8B,oBAAfnsB,WAA6BA,WAAwCmsB,MAezFovB,EAAKzQ,KAAkCyQ,EAAK16C,OAAOslD,SAAsC5K,EAAK16C,OAAOslD,QAAQrb,MACtEyQ,EAAK16C,OAAOiqC,MACvCyQ,EAAKrS,QAAQ,QAOzBqS,EAAK6K,OAAS,mBAOd7K,EAAK8K,QAAU,wBAOf9K,EAAK+K,QAAU,6CAOf/K,EAAKgL,WAAa,SAAoBnsB,GAClC,OAAOA,EACDmhB,EAAKkC,SAASiH,KAAKtqB,GAAO0qB,SAC1BvJ,EAAKkC,SAASgH,UASxBlJ,EAAKiL,aAAe,SAAsB3B,EAAMrR,GAC5C,IAAIkP,EAAOnH,EAAKkC,SAASmH,SAASC,GAClC,OAAItJ,EAAKzQ,KACEyQ,EAAKzQ,KAAKmJ,SAASyO,EAAK1Z,GAAI0Z,EAAKzZ,GAAIuK,GACzCkP,EAAK7M,SAASkO,QAAQvQ,KAkBjC+H,EAAK8H,MAAQA,EAOb9H,EAAKkL,QAAU,SAAiB5wB,GAC5B,OAAOA,EAAIuP,OAAO,GAAGshB,cAAgB7wB,EAAIhK,UAAU,IA0CvD0vB,EAAK6J,SAAWA,EAmBhB7J,EAAKoL,cAAgBvB,EAAS,iBAoB9B7J,EAAK+F,YAAc,SAAkBsF,GAEjC,IADA,IAAIC,EAAW,GACN/oD,EAAI,EAAGA,EAAI8oD,EAAWzmD,SAAUrC,EACrC+oD,EAASD,EAAW9oD,IAAM,EAO9B,OAAO,WACH,IAAK,IAAIyrC,EAAOD,OAAOC,KAAKpxB,MAAOra,EAAIyrC,EAAKppC,OAAS,EAAGrC,GAAK,IAAKA,EAC9D,GAA0B,IAAtB+oD,EAAStd,EAAKzrC,UAA+Bu1B,IAAlBlb,KAAKoxB,EAAKzrC,KAAuC,OAAlBqa,KAAKoxB,EAAKzrC,IACpE,OAAOyrC,EAAKzrC,KAiB5By9C,EAAKgG,YAAc,SAAkBqF,GAQjC,OAAO,SAASxhC,GACZ,IAAK,IAAItnB,EAAI,EAAGA,EAAI8oD,EAAWzmD,SAAUrC,EACjC8oD,EAAW9oD,KAAOsnB,UACXjN,KAAKyuC,EAAW9oD,MAoBvCy9C,EAAK8C,cAAgB,CACjBN,MAAOr6C,OACPs6C,MAAOt6C,OACP6gC,MAAO7gC,OACPu6C,MAAM,GAIV1C,EAAKwG,WAAa,WACd,IAAIQ,EAAShH,EAAKgH,OAEbA,GAMLhH,EAAKyK,aAAezD,EAAOmC,OAAS1kD,WAAW0kD,MAAQnC,EAAOmC,MAE1D,SAAqBtqB,EAAO0sB,GACxB,OAAO,IAAIvE,EAAOnoB,EAAO0sB,IAEjCvL,EAAK0K,oBAAsB1D,EAAOwE,aAE9B,SAA4BzhC,GACxB,OAAO,IAAIi9B,EAAOj9B,KAbtBi2B,EAAKyK,aAAezK,EAAK0K,oBAAsB,O,kCCpZvDt8C,EAAOJ,QAAU8xC,EAEjB,IAEI2G,EAFAzG,EAAY,EAAQ,MAIpBkC,EAAYlC,EAAKkC,SACjBtY,EAAYoW,EAAKpW,OACjByE,EAAY2R,EAAK3R,KAWrB,SAASod,EAAG70C,EAAIuI,EAAK6rB,GAMjBpuB,KAAKhG,GAAKA,EAMVgG,KAAKuC,IAAMA,EAMXvC,KAAK8uC,UAAO5zB,EAMZlb,KAAKouB,IAAMA,EAIf,SAAS2gB,KAUT,SAASC,EAAM9K,GAMXlkC,KAAKivC,KAAO/K,EAAO+K,KAMnBjvC,KAAKkvC,KAAOhL,EAAOgL,KAMnBlvC,KAAKuC,IAAM2hC,EAAO3hC,IAMlBvC,KAAK8uC,KAAO5K,EAAOiL,OAQvB,SAASjM,IAMLljC,KAAKuC,IAAM,EAMXvC,KAAKivC,KAAO,IAAIJ,EAAGE,EAAM,EAAG,GAM5B/uC,KAAKkvC,KAAOlvC,KAAKivC,KAMjBjvC,KAAKmvC,OAAS,KASlB,IAAIvc,EAAS,WACT,OAAOwQ,EAAKgH,OACN,WACE,OAAQlH,EAAOtQ,OAAS,WACpB,OAAO,IAAIiX,OAIjB,WACE,OAAO,IAAI3G,IAuCvB,SAASkM,EAAUhhB,EAAKxP,EAAKyP,GACzBzP,EAAIyP,GAAa,IAAND,EAoBf,SAASihB,EAAS9sC,EAAK6rB,GACnBpuB,KAAKuC,IAAMA,EACXvC,KAAK8uC,UAAO5zB,EACZlb,KAAKouB,IAAMA,EA8Cf,SAASkhB,EAAclhB,EAAKxP,EAAKyP,GAC7B,KAAOD,EAAI0C,IACPlS,EAAIyP,KAAkB,IAATD,EAAIyC,GAAW,IAC5BzC,EAAIyC,IAAMzC,EAAIyC,KAAO,EAAIzC,EAAI0C,IAAM,MAAQ,EAC3C1C,EAAI0C,MAAQ,EAEhB,KAAO1C,EAAIyC,GAAK,KACZjS,EAAIyP,KAAkB,IAATD,EAAIyC,GAAW,IAC5BzC,EAAIyC,GAAKzC,EAAIyC,KAAO,EAExBjS,EAAIyP,KAASD,EAAIyC,GA2CrB,SAAS0e,EAAanhB,EAAKxP,EAAKyP,GAC5BzP,EAAIyP,GAA0B,IAAdD,EAChBxP,EAAIyP,EAAM,GAAMD,IAAQ,EAAM,IAC9BxP,EAAIyP,EAAM,GAAMD,IAAQ,GAAM,IAC9BxP,EAAIyP,EAAM,GAAMD,IAAQ,GA7J5B8U,EAAOtQ,OAASA,IAOhBsQ,EAAO7R,MAAQ,SAAelkB,GAC1B,OAAO,IAAIi2B,EAAKpvB,MAAM7G,IAKtBi2B,EAAKpvB,QAAUA,QACfkvB,EAAO7R,MAAQ+R,EAAKgK,KAAKlK,EAAO7R,MAAO+R,EAAKpvB,MAAMhkB,UAAUwtB,WAUhE0lB,EAAOlzC,UAAUw/C,MAAQ,SAAcx1C,EAAIuI,EAAK6rB,GAG5C,OAFApuB,KAAKkvC,KAAOlvC,KAAKkvC,KAAKJ,KAAO,IAAID,EAAG70C,EAAIuI,EAAK6rB,GAC7CpuB,KAAKuC,KAAOA,EACLvC,MA8BXqvC,EAASr/C,UAAYmhC,OAAOyB,OAAOic,EAAG7+C,WACtCq/C,EAASr/C,UAAUgK,GAxBnB,SAAuBo0B,EAAKxP,EAAKyP,GAC7B,KAAOD,EAAM,KACTxP,EAAIyP,KAAe,IAAND,EAAY,IACzBA,KAAS,EAEbxP,EAAIyP,GAAOD,GA0Bf8U,EAAOlzC,UAAUm0C,OAAS,SAAsBliB,GAW5C,OARAjiB,KAAKuC,MAAQvC,KAAKkvC,KAAOlvC,KAAKkvC,KAAKJ,KAAO,IAAIO,GACzCptB,KAAkB,GACT,IAAY,EACpBA,EAAQ,MAAY,EACpBA,EAAQ,QAAY,EACpBA,EAAQ,UAAY,EACA,EAC1BA,IAAQ1f,IACDvC,MASXkjC,EAAOlzC,UAAUuiC,MAAQ,SAAqBtQ,GAC1C,OAAOA,EAAQ,EACTjiB,KAAKwvC,MAAMF,EAAe,GAAIhK,EAASvJ,WAAW9Z,IAClDjiB,KAAKmkC,OAAOliB,IAQtBihB,EAAOlzC,UAAU26C,OAAS,SAAsB1oB,GAC5C,OAAOjiB,KAAKmkC,QAAQliB,GAAS,EAAIA,GAAS,MAAQ,IAsBtDihB,EAAOlzC,UAAUw4C,OAAS,SAAsBvmB,GAC5C,IAAIsoB,EAAOjF,EAASiH,KAAKtqB,GACzB,OAAOjiB,KAAKwvC,MAAMF,EAAe/E,EAAKviD,SAAUuiD,IAUpDrH,EAAOlzC,UAAUq0C,MAAQnB,EAAOlzC,UAAUw4C,OAQ1CtF,EAAOlzC,UAAUm7C,OAAS,SAAsBlpB,GAC5C,IAAIsoB,EAAOjF,EAASiH,KAAKtqB,GAAOoqB,WAChC,OAAOrsC,KAAKwvC,MAAMF,EAAe/E,EAAKviD,SAAUuiD,IAQpDrH,EAAOlzC,UAAU46C,KAAO,SAAoB3oB,GACxC,OAAOjiB,KAAKwvC,MAAMJ,EAAW,EAAGntB,EAAQ,EAAI,IAehDihB,EAAOlzC,UAAU66C,QAAU,SAAuB5oB,GAC9C,OAAOjiB,KAAKwvC,MAAMD,EAAc,EAAGttB,IAAU,IASjDihB,EAAOlzC,UAAU86C,SAAW5H,EAAOlzC,UAAU66C,QAQ7C3H,EAAOlzC,UAAUq7C,QAAU,SAAuBppB,GAC9C,IAAIsoB,EAAOjF,EAASiH,KAAKtqB,GACzB,OAAOjiB,KAAKwvC,MAAMD,EAAc,EAAGhF,EAAK1Z,IAAI2e,MAAMD,EAAc,EAAGhF,EAAKzZ,KAU5EoS,EAAOlzC,UAAUs7C,SAAWpI,EAAOlzC,UAAUq7C,QAQ7CnI,EAAOlzC,UAAUo0C,MAAQ,SAAqBniB,GAC1C,OAAOjiB,KAAKwvC,MAAMpM,EAAKgB,MAAM3V,aAAc,EAAGxM,IASlDihB,EAAOlzC,UAAUu4C,OAAS,SAAsBtmB,GAC5C,OAAOjiB,KAAKwvC,MAAMpM,EAAKgB,MAAM/T,cAAe,EAAGpO,IAGnD,IAAIwtB,EAAarM,EAAKpvB,MAAMhkB,UAAU/D,IAChC,SAAwBmiC,EAAKxP,EAAKyP,GAChCzP,EAAI3yB,IAAImiC,EAAKC,IAGf,SAAwBD,EAAKxP,EAAKyP,GAChC,IAAK,IAAI1oC,EAAI,EAAGA,EAAIyoC,EAAIpmC,SAAUrC,EAC9Bi5B,EAAIyP,EAAM1oC,GAAKyoC,EAAIzoC,IAQ/Bu9C,EAAOlzC,UAAUo8B,MAAQ,SAAqBnK,GAC1C,IAAI1f,EAAM0f,EAAMj6B,SAAW,EAC3B,IAAKua,EACD,OAAOvC,KAAKwvC,MAAMJ,EAAW,EAAG,GACpC,GAAIhM,EAAK6B,SAAShjB,GAAQ,CACtB,IAAIrD,EAAMskB,EAAO7R,MAAM9uB,EAAMyqB,EAAOhlC,OAAOi6B,IAC3C+K,EAAOvP,OAAOwE,EAAOrD,EAAK,GAC1BqD,EAAQrD,EAEZ,OAAO5e,KAAKmkC,OAAO5hC,GAAKitC,MAAMC,EAAYltC,EAAK0f,IAQnDihB,EAAOlzC,UAAUw2B,OAAS,SAAsBvE,GAC5C,IAAI1f,EAAMkvB,EAAKzpC,OAAOi6B,GACtB,OAAO1f,EACDvC,KAAKmkC,OAAO5hC,GAAKitC,MAAM/d,EAAKC,MAAOnvB,EAAK0f,GACxCjiB,KAAKwvC,MAAMJ,EAAW,EAAG,IAQnClM,EAAOlzC,UAAUu0C,KAAO,WAIpB,OAHAvkC,KAAKmvC,OAAS,IAAIH,EAAMhvC,MACxBA,KAAKivC,KAAOjvC,KAAKkvC,KAAO,IAAIL,EAAGE,EAAM,EAAG,GACxC/uC,KAAKuC,IAAM,EACJvC,MAOXkjC,EAAOlzC,UAAU0/C,MAAQ,WAUrB,OATI1vC,KAAKmvC,QACLnvC,KAAKivC,KAASjvC,KAAKmvC,OAAOF,KAC1BjvC,KAAKkvC,KAASlvC,KAAKmvC,OAAOD,KAC1BlvC,KAAKuC,IAASvC,KAAKmvC,OAAO5sC,IAC1BvC,KAAKmvC,OAASnvC,KAAKmvC,OAAOL,OAE1B9uC,KAAKivC,KAAOjvC,KAAKkvC,KAAO,IAAIL,EAAGE,EAAM,EAAG,GACxC/uC,KAAKuC,IAAO,GAETvC,MAOXkjC,EAAOlzC,UAAUw0C,OAAS,WACtB,IAAIyK,EAAOjvC,KAAKivC,KACZC,EAAOlvC,KAAKkvC,KACZ3sC,EAAOvC,KAAKuC,IAOhB,OANAvC,KAAK0vC,QAAQvL,OAAO5hC,GAChBA,IACAvC,KAAKkvC,KAAKJ,KAAOG,EAAKH,KACtB9uC,KAAKkvC,KAAOA,EACZlvC,KAAKuC,KAAOA,GAETvC,MAOXkjC,EAAOlzC,UAAUqnC,OAAS,WAItB,IAHA,IAAI4X,EAAOjvC,KAAKivC,KAAKH,KACjBlwB,EAAO5e,KAAKimC,YAAY5U,MAAMrxB,KAAKuC,KACnC8rB,EAAO,EACJ4gB,GACHA,EAAKj1C,GAAGi1C,EAAK7gB,IAAKxP,EAAKyP,GACvBA,GAAO4gB,EAAK1sC,IACZ0sC,EAAOA,EAAKH,KAGhB,OAAOlwB,GAGXskB,EAAO0G,WAAa,SAAS+F,GACzB9F,EAAe8F,EACfzM,EAAOtQ,OAASA,IAChBiX,EAAaD,e,kCC9cjBp4C,EAAOJ,QAAUy4C,EAGjB,IAAI3G,EAAS,EAAQ,OACpB2G,EAAa75C,UAAYmhC,OAAOyB,OAAOsQ,EAAOlzC,YAAYi2C,YAAc4D,EAEzE,IAAIzG,EAAO,EAAQ,MAQnB,SAASyG,IACL3G,EAAO1R,KAAKxxB,MAwChB,SAAS4vC,EAAkBxhB,EAAKxP,EAAKyP,GAC7BD,EAAIpmC,OAAS,GACbo7C,EAAK3R,KAAKC,MAAMtD,EAAKxP,EAAKyP,GACrBzP,EAAIgvB,UACThvB,EAAIgvB,UAAUxf,EAAKC,GAEnBzP,EAAI8S,MAAMtD,EAAKC,GA3CvBwb,EAAaD,WAAa,WAOtBC,EAAaxY,MAAQ+R,EAAK0K,oBAE1BjE,EAAagG,iBAAmBzM,EAAKgH,QAAUhH,EAAKgH,OAAOp6C,qBAAqBnI,YAAiD,QAAnCu7C,EAAKgH,OAAOp6C,UAAU/D,IAAIghB,KAClH,SAA8BmhB,EAAKxP,EAAKyP,GACxCzP,EAAI3yB,IAAImiC,EAAKC,IAIb,SAA+BD,EAAKxP,EAAKyP,GACzC,GAAID,EAAI0hB,KACN1hB,EAAI0hB,KAAKlxB,EAAKyP,EAAK,EAAGD,EAAIpmC,aACvB,IAAK,IAAIrC,EAAI,EAAGA,EAAIyoC,EAAIpmC,QAC3B42B,EAAIyP,KAASD,EAAIzoC,OAQ7BkkD,EAAa75C,UAAUo8B,MAAQ,SAA4BnK,GACnDmhB,EAAK6B,SAAShjB,KACdA,EAAQmhB,EAAKyK,aAAa5rB,EAAO,WACrC,IAAI1f,EAAM0f,EAAMj6B,SAAW,EAI3B,OAHAgY,KAAKmkC,OAAO5hC,GACRA,GACAvC,KAAKwvC,MAAM3F,EAAagG,iBAAkBttC,EAAK0f,GAC5CjiB,MAeX6pC,EAAa75C,UAAUw2B,OAAS,SAA6BvE,GACzD,IAAI1f,EAAM6gC,EAAKgH,OAAOv8C,WAAWo0B,GAIjC,OAHAjiB,KAAKmkC,OAAO5hC,GACRA,GACAvC,KAAKwvC,MAAMI,EAAmBrtC,EAAK0f,GAChCjiB,MAWX6pC,EAAaD,c,y+CC/Eb,cACA,UAEA,2BAqBA,OAnBQ,YAAAhpC,KAAN,W,oFAEM,YAAAmvC,qBAAN,SAA2BC,EAAiCxK,G,uGAMpDyK,EAAU,IAAI,EAAAC,QAAQ1K,GAGA,iBAAjBwK,EAAP,MACF,GAAMC,EAAQE,UAAUH,I,cAAxB,S,aAEA,SAAMC,EAAQE,UAAUH,I,OAAxB,S,iBAGF,MAAO,CAAP,EAAO,IAAI,EAAAI,qBAAqBH,YAEpC,EArBA,GAuBa,EAAAI,cAAgB,IAAIC,G,y/CC5BjC,cACA,UACA,UACA,UAEA,UACA,UAQa,EAAAC,gBAAkB,WAK7B,IAJoC,iBAAzB,EAAApqB,IAAIgV,KAAKqV,aAA4B,EAAArqB,IAAIgV,KAAKqV,YAAc,KACrE,EAAArqB,IAAIgV,KAAKqV,YAAc,GAGU,iBAAxB,EAAArqB,IAAIgV,KAAKsV,aAA4B//B,OAAOw0B,UAAU,EAAA/e,IAAIgV,KAAKsV,aAAe,EAAAtqB,IAAIgV,KAAKsV,WAAa,EAAG,CAChH,IAAMC,EAA0C,oBAAdlsC,UAA4B,EAAAmsC,OAAO3oD,OAASwc,UAAUC,oBACxF,EAAA0hB,IAAIgV,KAAKsV,WAAarrC,KAAKuO,MAAM+8B,GAAsB,GAAK,GAE9D,EAAAvqB,IAAIgV,KAAKsV,WAAarrC,KAAKC,IAAI,EAAG,EAAA8gB,IAAIgV,KAAKsV,aAG7C,+BA+BA,OA9BQ,YAAA7vC,KAAN,W,0FAKE,OAHA,EAAA2vC,kBAGA,GAAM,EAAAK,yB,cAAN,S,YAII,YAAAb,qBAAN,SAA2BC,EAAiCxK,G,0GAG9B,iBAAjBwK,EAAP,MACmB,oBAAVr/C,MAAP,MAEO,GAAM,EAAAkgD,UAAU,EAAAC,SAAV,CAAoBd,I,cAAnCjrD,EAAS,S,aAGQ,SAAM4L,MAAMq/C,I,OACT,SADH,SACkBj/C,e,OAA7BA,EAAc,SACpBhM,EAAS,IAAI8C,WAAWkJ,G,oCAG1BhM,EAASirD,E,iBAKX,OAFMe,EAAU,IAAI,EAAAC,sCACZb,UAAUprD,EAAQygD,GACnB,CAAP,EAAOz/C,QAAQkL,QAAQ8/C,YAE3B,EA/BA,GAiCa,EAAAE,YAAc,IAAIC,G,4ZC3D/B,aACA,cACA,UACA,UAEA,EAAAC,gBAAgB,QAAS,EAAAd,cAAe,GACxC,EAAAc,gBAAgB,OAAQ,EAAAF,YAAa,I,2aCLrC,cAEOG,EADP,QACgBC,YAAYC,aAAaC,IAEzC,UACA,UAqBA,aACE,WAAY3lC,G,QAEV,GADA5L,KAAKwxC,YAAc,IAAIC,IACnB7lC,QAAiD,C,IACnD,IAAmB,QAAAA,GAAU,8BAAE,CAA1B,IAAM8lC,EAAI,QACTA,aAAgB,EAAA7O,KAAKW,eACvBxjC,KAAKwxC,YAAYvlD,IAAIylD,EAAKzkC,KAAM,CAAC0kC,EAAUC,SAASF,GAAOC,EAAUE,QAAQH,KACpEA,aAAgBN,EAAOO,WAChC3xC,KAAKwxC,YAAYvlD,IAAIylD,EAAKzkC,OAAS,CAAC0kC,EAAUC,SAASF,GAAOC,EAAUE,QAAQH,M,iGAGpF,GAAI1xC,KAAKwxC,YAAYrkC,KAAOvB,EAAW5jB,OACrC,MAAM,IAAI4F,MAAM,+BAqOxB,OAhOE,YAAA3B,IAAA,SAAIsvB,EAAaqG,EAA0BK,GACzCjiB,KAAKwxC,YAAYvlD,IAAIsvB,EAAK,CAAC0G,EAAOL,KAEpC,YAAAkwB,OAAA,SAAOv2B,GACLvb,KAAKwxC,YAAYM,OAAOv2B,IAE1B,YAAAw2B,SAAA,SAASx2B,EAAaoa,GACpB,OAAO31B,KAAK5N,IAAImpB,EAAK,QAASoa,IAGhC,YAAAqc,OAAA,SAAOz2B,EAAaoa,GAClB,OAAO31B,KAAK5N,IAAImpB,EAAK,MAAOoa,IAG9B,YAAAsc,UAAA,SAAU12B,EAAaoa,GACrB,OAAO31B,KAAK5N,IAAImpB,EAAK,SAAUoa,IAGjC,YAAAuc,UAAA,SAAU32B,EAAaoa,GACrB,OAAO31B,KAAK5N,IAAImpB,EAAK,SAAUoa,IAGjC,YAAAwc,UAAA,SAAU52B,EAAaoa,GACrB,OAAO31B,KAAK5N,IAAImpB,EAAK,SAAUoa,IAGjC,YAAAyc,QAAA,SAAQ72B,EAAaoa,GACnB,OAAO31B,KAAK5N,IAAImpB,EAAK,OAAQoa,IAG/B,YAAA0c,WAAA,SAAW92B,EAAaoa,GACtB,OAAO31B,KAAK5N,IAAImpB,EAAK,UAAWoa,IAGlC,YAAA2c,WAAA,SAAW/2B,EAAaoa,GACtB,OAAO31B,KAAK5N,IAAImpB,EAAK,UAAWoa,IAG1B,YAAAvjC,IAAR,SACImpB,EAAaqG,EAA0B+T,GACzC,IAAM4c,EAAevyC,KAAKwxC,YAAYp/C,IAAImpB,GAC1C,QAAqBL,IAAjBq3B,EAA4B,CAC9B,QAAqBr3B,IAAjBya,EACF,OAAOA,EAET,MAAM,IAAI/nC,MAAM,iCAAiC2tB,GAEnD,GAAIg3B,EAAa,KAAO3wB,EACtB,MAAM,IAAIh0B,MAAM,2BAA2Bg0B,EAAI,YAAY2wB,EAAa,IAE1E,OAAOA,EAAa,IAGP,EAAAV,QAAf,SAAuBH,GACrB,IAAM9vB,EAAO8vB,aAAgB,EAAA7O,KAAKW,eAAiB,EAAO5hB,KAAQ8vB,EAA0B9vB,OAC5F,OAAQA,GACN,KAAK,EAAAihB,KAAKW,eAAewC,cAAcwM,MACrC,MAAO,QACT,KAAK,EAAA3P,KAAKW,eAAewC,cAAcyM,IACrC,MAAO,MACT,KAAK,EAAA5P,KAAKW,eAAewC,cAAc0M,OACrC,MAAO,SACT,KAAK,EAAA7P,KAAKW,eAAewC,cAAc2M,OACrC,MAAO,SACT,KAAK,EAAA9P,KAAKW,eAAewC,cAAc4M,OACrC,MAAO,SACT,KAAK,EAAA/P,KAAKW,eAAewC,cAAc6M,KACrC,MAAO,OACT,KAAK,EAAAhQ,KAAKW,eAAewC,cAAc8M,QACrC,MAAO,UACT,KAAK,EAAAjQ,KAAKW,eAAewC,cAAc+M,QACrC,MAAO,UACT,QACE,MAAM,IAAInlD,MAAM,wCAAwC,EAAAi1C,KAAKW,eAAewC,cAAcpkB,MAIjF,EAAAgwB,SAAf,SAAwBF,GACtB,IAAMsB,EAAWtB,aAAgB,EAAA7O,KAAKW,eAAiBkO,EAAK9vB,KAAQ8vB,EAA0B9vB,OAC9F,GAAIoxB,IAAa,EAAAnQ,KAAKW,eAAewC,cAAciN,OAASD,IAAa,EAAAnQ,KAAKW,eAAewC,cAAckN,OACzG,MAAM,IAAItlD,MAAM,wCAGlB,IAAMq0B,EAAQjiB,KAAKmzC,gBAAgBzB,GAGnC,GAAIsB,IAAa,EAAAnQ,KAAKW,eAAewC,cAAcyM,KAAO,EAAAW,SAAS9X,OAAOrZ,GACxE,OAAO,EAAAmxB,SAASC,aAAapxB,GAI/B,GAAI+wB,IAAa,EAAAnQ,KAAKW,eAAewC,cAAc6M,KAAM,CAIvD,IAHA,IAAMS,EAAOrxB,EACPsxB,EAAwB,IAAIv/B,MAAcs/B,EAAItrD,QAE3CrC,EAAI,EAAGA,EAAI2tD,EAAItrD,OAAQrC,IAAK,CACnC,IAAM6tD,EAAYF,EAAI3tD,GACtB4tD,EAAY5tD,GAAK,EAAAytD,SAASC,aAAaG,GAGzC,OAAOD,EAIT,GAAIP,IAAa,EAAAnQ,KAAKW,eAAewC,cAAc2M,OACjD,OAAOjB,aAAgB,EAAA7O,KAAKW,eAAiB,EAAA+F,OAAOkK,UAAUxxB,GACjB,EAAAsnB,OAAOmK,cAAczxB,GAIpE,GAAI+wB,IAAa,EAAAnQ,KAAKW,eAAewC,cAAc+M,QAAS,CAC1D,GAAIrB,aAAgB,EAAA7O,KAAKW,eAEvB,OADqBvhB,EACD0xB,KAAI,SAAA1xB,GAAS,SAAAsnB,OAAOkK,UAAUxxB,MAC7C,GAAIyvB,aAAgBN,EAAOO,UAEhC,OADqB1vB,EACD0xB,KAAI,SAAA1xB,GAAS,SAAAsnB,OAAOmK,cAAczxB,MAK1D,GAAI+wB,IAAa,EAAAnQ,KAAKW,eAAewC,cAAc0M,QAG7ChB,aAAgB,EAAA7O,KAAKW,eAAgB,CACvC,IAAMoQ,EAAa3xB,EACnB,OAAOmoB,OAAOmC,KAAKqH,EAAW7uD,OAAQ6uD,EAAWC,WAAYD,EAAW/lD,YAAY4lB,WAKxF,OAAIu/B,IAAa,EAAAnQ,KAAKW,eAAewC,cAAc8M,SAG7CpB,aAAgB,EAAA7O,KAAKW,eACHvhB,EACD0xB,KACf,SAAAC,GAAc,OAAAxJ,OAAOmC,KAAKqH,EAAW7uD,OAAQ6uD,EAAWC,WAAYD,EAAW/lD,YAAY4lB,cAI5FwO,GAGM,EAAAkxB,gBAAf,SAA+BzB,GAC7B,OAAOA,aAAiB,EAAA7O,KAAmB,eAAI7iC,KAAK8zC,8BAA8BpC,GACnC1xC,KAAK+zC,6BAA6BrC,IAGpE,EAAAoC,8BAAf,SAA6CpC,GAC3C,OAAQA,EAAK9vB,MACX,KAAK,EAAAihB,KAAKW,eAAewC,cAAcwM,MACrC,OAAOd,EAAKzrD,EACd,KAAK,EAAA48C,KAAKW,eAAewC,cAAcyM,IACrC,OAAOf,EAAK/rD,EACd,KAAK,EAAAk9C,KAAKW,eAAewC,cAAc0M,OACrC,OAAOhB,EAAK7rD,EACd,KAAK,EAAAg9C,KAAKW,eAAewC,cAAc2M,OACrC,OAAOjB,EAAK7sD,EACd,KAAK,EAAAg+C,KAAKW,eAAewC,cAAciN,MACrC,OAAOvB,EAAKlrD,EACd,KAAK,EAAAq8C,KAAKW,eAAewC,cAAc4M,OACrC,OAAOlB,EAAKhO,OACd,KAAK,EAAAb,KAAKW,eAAewC,cAAc6M,KACrC,OAAOnB,EAAK/N,KACd,KAAK,EAAAd,KAAKW,eAAewC,cAAc8M,QACrC,OAAOpB,EAAKpjC,QACd,KAAK,EAAAu0B,KAAKW,eAAewC,cAAc+M,QACrC,OAAOrB,EAAK9N,QACd,KAAK,EAAAf,KAAKW,eAAewC,cAAckN,OACrC,OAAOxB,EAAK7N,OACd,QACE,MAAM,IAAIj2C,MAAM,+BAA+B,EAAAi1C,KAAKW,eAAewC,cAAc0L,EAAK9vB,SAI7E,EAAAmyB,6BAAf,SAA4CrC,GAC1C,OAAQA,EAAK9vB,QACX,KAAKwvB,EAAOpL,cAAcwM,MACxB,OAAOd,EAAKzrD,IACd,KAAKmrD,EAAOpL,cAAcyM,IACxB,OAAOf,EAAK/rD,IACd,KAAKyrD,EAAOpL,cAAc0M,OACxB,OAAOhB,EAAK7rD,IACd,KAAKurD,EAAOpL,cAAc2M,OACxB,OAAOjB,EAAK7sD,IACd,KAAKusD,EAAOpL,cAAciN,MACxB,OAAOvB,EAAKlrD,IACd,KAAK4qD,EAAOpL,cAAc4M,OACxB,OAAOlB,EAAKsC,cACd,KAAK5C,EAAOpL,cAAc6M,KAExB,IADA,IAAMlP,EAAO,GACJh+C,EAAI,EAAGA,EAAI+rD,EAAKuC,aAActuD,IACrCg+C,EAAKz0C,KAAKwiD,EAAK/N,KAAKh+C,IAEtB,OAAOg+C,EAET,KAAKyN,EAAOpL,cAAc8M,QACxB,IAAMxkC,EAAU,GAChB,IAAS3oB,EAAI,EAAGA,EAAI+rD,EAAKwC,gBAAiBvuD,IACxC2oB,EAAQpf,KAAKwiD,EAAKpjC,QAAQ3oB,IAE5B,OAAO2oB,EAET,KAAK8iC,EAAOpL,cAAc+M,QACxB,IAAMnP,EAAU,GAChB,IAASj+C,EAAI,EAAGA,EAAI+rD,EAAKyC,gBAAiBxuD,IACxCi+C,EAAQ10C,KAAKwiD,EAAK9N,QAAQj+C,IAE5B,OAAOi+C,EAST,QACE,MAAM,IAAIh2C,MAAM,+BAA+BwjD,EAAOpL,cAAc0L,EAAK9vB,WAKjF,EAjPA,GAAa,EAAA+vB,a,qzDC3Bb,cA0EMyC,EAAsC,IAAI3C,IAgChD,SAAe4C,EAAeC,G,gHAGW,KAFjCC,EAAa,EAAAC,SAEGF,KAeLhe,EAf+Cie,EAAWD,GAqBvE,eAJE7uD,EAAI6wC,IAIuC,mBAAjB7wC,EAAEgvD,YAC9B,yBAA0BhvD,GAAuC,mBAA3BA,EAAEsqD,sBACxC,YAAatqD,GAA0B,mBAAdA,EAAEivD,UAtBvB,EAAUH,EAAWD,GAEP,iBADhB1zC,EAAO,EAAQ6zC,eACa,SAAU7zC,EACjC,GAAMA,GADX,OAHF,M,OAIAA,EAAO,S,iBAET,GAAIA,EAEF,OADAwzC,EAAcnoD,IAAIqoD,EAAa,GACxB,CAAP,EAAO,G,iBAIX,MAAO,CAAP,OAAOp5B,GAGT,IAAmBob,EAEX7wC,QAlDK,EAAA+uD,QAAqC,CAChDG,MAAO,IAAI,EAAAC,cAOb,0BAAsBC,EAAeC,G,uHAC9BA,EAAD,MACK,CAAP,EAAOD,EAAe,CAAC,W,OAEjBE,EAAwB,iBAATD,EAAoB,CAACA,GAAQA,E,wCAExB,IAAAC,GAAK,W,sCAApBT,EAAW,SACdzY,EAAQuY,EAAchiD,IAAIkiD,IAEvB,CAAP,EAAOzY,GAGO,GAAMwY,EAAeC,K,OACrC,GADM,EAAU,SAEd,MAAO,CAAP,EAAO,G,kMAKb,MAAM,IAAI1mD,MAAM,wC,yGCvGlB,cAEA,UAGA,UAEA,UAOA,2BA8DA,OA3DE,sBAAI,wBAAS,C,IAAb,WACE,OAAO,EAAAu4B,IAAIwuB,MAAMK,W,IAEnB,SAAc/yB,GACZ,EAAAkE,IAAIwuB,MAAMK,UAAY/yB,G,gCAGxB,sBAAI,iCAAkB,C,IAAtB,WACE,OAAO,EAAAkE,IAAIwuB,MAAMM,oB,IAEnB,SAAuBhzB,GACrB,EAAAkE,IAAIwuB,MAAMM,mBAAqBhzB,G,gCAGjC,sBAAI,+BAAgB,C,IAApB,WACE,OAAO,EAAAkE,IAAIwuB,MAAMO,kB,IAEnB,SAAqBjzB,GACnB,EAAAkE,IAAIwuB,MAAMO,iBAAmBjzB,G,gCAG/B,sBAAI,mBAAI,C,IAAR,WACE,OAAO,EAAAkE,IAAIwuB,MAAMQ,M,IAEnB,SAASlzB,GACP,EAAAkE,IAAIwuB,MAAMQ,KAAOlzB,G,gCAGnB,YAAAwyB,WAAA,WACE,IAkBE,OAjBAz0C,KAAKo1C,UAAY,EAAAC,mBAAmBr1C,KAAKg1C,WACF,iBAA5Bh1C,KAAKi1C,qBACdj1C,KAAKi1C,mBAAqB,IAES,iBAA1Bj1C,KAAKk1C,mBACdl1C,KAAKk1C,iBAAmB,QAED,kBAAdl1C,KAAKm1C,OACdn1C,KAAKm1C,MAAO,GAGd,EAAAG,OAAOC,WAAW,EAAApvB,KAElB,EAAAmvB,OAAOE,QACH,eACA,gCAAgCx1C,KAAKo1C,UAAS,6BAC1Cp1C,KAAKi1C,mBAAkB,uBAAuBj1C,KAAKk1C,iBAAgB,WAAWl1C,KAAKm1C,KAAI,MACxF,EACP,MAAO3wD,GAEP,OADA,EAAA8wD,OAAOG,QAAQ,eAAgB,sCAAsCjxD,IAC9D,IAGX,YAAAurD,qBAAA,SAAqB2F,GACnB,OAAO,IAAI,EAAAC,oBAAoB31C,KAAM01C,IAEvC,YAAAhB,QAAA,WACE10C,KAAKo1C,UAAUV,WAEnB,EA9DA,GAAa,EAAAE,gB,ylCCdb,cAEA,UACA,UACA,UAEA,UACA,UACA,UAMA,cAGE,WAAYc,G,OACV,YAAMA,IAAQ,KAgyClB,OApyCmC,OAMjC,YAAAE,aAAA,WACE,OAAO,EAAP,eACK51C,KAAK61C,kBACL71C,KAAK81C,kBACL91C,KAAK+1C,SACL/1C,KAAKg2C,aAELh2C,KAAKi2C,sBACLj2C,KAAKk2C,6BACLl2C,KAAKm2C,6BAGZ,YAAAC,eAAA,WACE,MAAO,IAMC,YAAAP,eAAV,WAEE,MAAO,CACLA,eAAgB,IAAI,EAAAQ,eAAe,6PAe7B,YAAAP,eAAV,WAEE,MAAO,CACLA,eAAgB,IAAI,EAAAO,eAAe,uPAe7B,YAAAF,yBAAV,WACE,IAAMG,EAAet2C,KAAK01C,QAAQa,YAAYD,aAC9C,OAAIA,EAAaE,SACRx2C,KAAKy2C,+BAA+BH,GAEpCt2C,KAAK02C,iCAAiCJ,IAOvC,YAAAG,+BAAV,SAAyCH,GACvC,IAAMK,EAAWL,EAAaM,cACxBC,EAAc,CAACP,EAAa7tC,MAAO6tC,EAAa5tC,QAChD+wB,EAA2C,GAC3Cqd,EAAW,kBACjB,OAAQH,EAAS3uD,QACf,KAAK,EACHyxC,EAAOqd,GAAY92C,KAAK+2C,wBACxB,MACF,KAAK,EACHtd,EAAOqd,GAAY92C,KAAKg3C,wBAAwBL,EAAsBE,GACtE,MACF,KAAK,EACHpd,EAAOqd,GAAY92C,KAAKi3C,wBAAwBN,EAA8BE,GAC9E,MACF,KAAK,EACHpd,EAAOqd,GACH92C,KAAKk3C,wBAAwBP,EAAsCE,GACvE,MACF,QACEpd,EAAOqd,GAAY92C,KAAKm3C,wBAAwBR,EAAUE,GAE9D,IAGMO,EAA4B,+CAHrB,EAAAC,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAKjCkV,OAAM,yBAKjB,OADA0Y,EAAkC,oBAAI,IAAI,EAAA4c,eAAee,GAClD3d,GAMC,YAAAid,iCAAV,SAA2CJ,GACzC,IAAMK,EAAWL,EAAaM,cACxBC,EAAc,CAACP,EAAa7tC,MAAO6tC,EAAa5tC,QAChD+wB,EAA2C,GAC3Cqd,EAAW,kBACjB,OAAQH,EAAS3uD,QACf,KAAK,EACHyxC,EAAOqd,GAAY92C,KAAK+2C,wBACxB,MACF,KAAK,EACHtd,EAAOqd,GAAY92C,KAAKs3C,0BAA0BX,EAAsBE,GACxE,MACF,KAAK,EACHpd,EAAOqd,GACH92C,KAAKu3C,0BAA0BZ,EAA8BE,GACjE,MACF,KAAK,EACHpd,EAAOqd,GACH92C,KAAKw3C,0BAA0Bb,EAAsCE,GACzE,MACF,KAAK,EACHpd,EAAOqd,GAAY92C,KAAKy3C,0BACpBd,EAA8CE,GAClD,MACF,KAAK,EACHpd,EAAOqd,GAAY92C,KAAK03C,0BACpBf,EAAsDE,GAC1D,MACF,KAAK,EACHpd,EAAOqd,GAAY92C,KAAK23C,0BACpBhB,EAA8DE,GAClE,MACF,QACE,MAAM,IAAIjpD,MAAM,sCAAsC+oD,EAAS3uD,QAEnE,IAGM4vD,EAAyB,oDAHlB,EAAAP,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAK/BkV,OAAM,0CAKnB,OADA0Y,EAA+B,iBAAI,IAAI,EAAA4c,eAAeuB,GAC/Cne,GAMC,YAAAsd,sBAAV,WACE,OAAO,IAAI,EAAAV,eAAe,sEAUlB,YAAAW,wBAAV,SAAkCvN,EAAiBoO,GACjD,IAAMC,EAAiBD,EACnBE,EAAS,GACb,OAA0B,IAAtBD,EAAe,IACjBC,EAAS,iFAE4BD,EAAe,GAAE,8BAG/C,IAAI,EAAAzB,eAAe0B,IAGF,IAAtBD,EAAe,IACjBC,EAAS,iFAE4BD,EAAe,GAAE,8BAG/C,IAAI,EAAAzB,eAAe0B,KAG5BA,EAAS,6HAG2BD,EAAe,GAAE,KAAKA,EAAe,GAAE,2CAC1CA,EAAe,GAAE,qCAG3C,IAAI,EAAAzB,eAAe0B,KAMlB,YAAAd,wBAAV,SAAkCxN,EAAyBoO,GACzD,IAAIE,EAAS,GACb,GAAI,EAAAC,UAAUC,YAAYxO,EAAOoO,GAM/B,OALAE,EAAS,uFAEkCF,EAAS,GAAE,KAAKA,EAAS,GAAE,yBAG/D,IAAI,EAAAxB,eAAe0B,GAG5B,IAAMD,EAAiBD,EAEjBK,EAAqB9yC,KAAKuO,KAAK81B,EAAM,GAAK,GAyBhD,OAdAsO,EAAS,8HAG0BD,EAAe,GAAE,KAAKA,EAAe,GAAE,6CAEzCA,EAAe,GAAE,0GAGtBI,EAAkB,0CACjBA,EAAkB,yDAKxC,IAAI,EAAA7B,eAAe0B,IAMlB,YAAAb,wBAAV,SAAkCzN,EAAiCoO,GACjE,IAAMC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCK,EAAqB9yC,KAAKuO,KAAK81B,EAAM,GAAK,GAC1C0O,EAAgBD,EAAqB9yC,KAAKuO,KAAK81B,EAAM,GAAK,GAC1DsO,EAAS,8HAGoBD,EAAe,GAAE,KAAKA,EAAe,GAAE,2CACzCA,EAAe,GAAE,+CAE1BK,EAAa,6BAChBA,EAAa,6FAGND,EAAkB,0CACjBA,EAAkB,4DAK/C,OAAO,IAAI,EAAA7B,eAAe0B,IAMlB,YAAAZ,wBAAV,SAAkC1N,EAA0BoO,GAS1D,IARA,IAAMC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IAExCK,EAAqB9yC,KAAKuO,KAAK81B,EAAMA,EAAMzhD,OAAS,GAAK,GACzDmwD,EAAgBD,EAAqB9yC,KAAKuO,KAAK81B,EAAMA,EAAMzhD,OAAS,GAAK,GAC3EowD,EAAiBD,EACjBE,EAAU,GACVC,EAAS,UAEJ7wD,EAAI,EAAGA,EAAIgiD,EAAMzhD,OAAS,EAAGP,IAEpC4wD,EAAU,gBACH5wD,EAAC,eAFR2wD,GAAkB3O,EAAMA,EAAMzhD,OAASP,EAAI,IAEP,sBACxBA,EAAC,MAAM2wD,EAAc,UAC/BC,EACFC,EAAS,IAAI7wD,EAAC,KAAO6wD,EAEvB,IAAMP,EAAS,eACPtO,EAAMzhD,OAAM,2GAEa8vD,EAAe,GAAE,KAAKA,EAAe,GAAE,yCACzCA,EAAe,GAAE,6BAE1CO,EAAO,+BAESF,EAAa,2BAChBA,EAAa,yFAGND,EAAkB,wCACjBA,EAAkB,4BAE5BzO,EAAMzhD,OAAM,IAAIswD,EAAM,oBAGvC,OAAO,IAAI,EAAAjC,eAAe0B,IAMlB,YAAAT,0BAAV,SAAoC7N,EAAiBoO,GACnD,IAAME,EAAS,4HAGoBF,EAAS,GAAE,KAAKA,EAAS,GAAE,sCAClCA,EAAS,GAAE,oCAGvC,OAAO,IAAI,EAAAxB,eAAe0B,IAMlB,YAAAR,0BAAV,SAAoC9N,EAAyBoO,GAC3D,IAAME,EAAS,8HAGoBF,EAAS,GAAE,KAAKA,EAAS,GAAE,2CAC7BA,EAAS,GAAE,6CACpBpO,EAAM,GAAE,oCACJA,EAAM,GAAE,sDAIpC,OAAO,IAAI,EAAA4M,eAAe0B,IAMlB,YAAAP,0BAAV,SAAoC/N,EAAiCoO,GACnE,IAAIE,EACEQ,EAAO9O,EAAMzhD,OAEfwwD,EAAU,KACVD,EAAO,IACTC,EAAU,KAGZA,EAAU,IAAIxkC,MAAMukC,EAAO,IACnBA,EAAO,GAAK9O,EAAM8O,EAAO,GACjC,IAAK,IAAI5yD,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B6yD,EAAQ7yD,GAAK6yD,EAAQ7yD,EAAI,GAAK8jD,EAAM9jD,EAAI,GAE1C,IAAM8yD,EAAkB,CAAC,IAAK,IAAK,KAC7BC,EACFF,EACK7E,KAAI,SAACgF,EAAQhzD,GAKZ,MAJc,OAAO8yD,EAAgB9yD,GAAE,cAAcgzD,EAItC,MAHDhzD,IAAM6yD,EAAQxwD,OAAS,EACjC,OAAOywD,EAAgB9yD,EAAI,GAAE,cAAc8yD,EAAgB9yD,GAAE,MAAMgzD,EACnE,YAAYF,EAAgB9yD,GAAE,MAAMgzD,GACf,OAE1BnrB,KAAK,IAWd,OATAuqB,EAAS,8HAG0BF,EAAS,GAAE,KAAKA,EAAS,GAAE,2CAC7BA,EAAS,GAAE,6BACpCa,EAAsB,wDAIvB,IAAI,EAAArC,eAAe0B,IAMlB,YAAAN,0BAAV,SAAoChO,EAAyCoO,GAE3E,IAAIE,EACEQ,EAAO9O,EAAMzhD,OAEfwwD,EAAU,KACVD,EAAO,IACTC,EAAU,KAGZA,EAAU,IAAIxkC,MAAMukC,EAAO,IACnBA,EAAO,GAAK9O,EAAM8O,EAAO,GACjC,IAAK,IAAI5yD,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B6yD,EAAQ7yD,GAAK6yD,EAAQ7yD,EAAI,GAAK8jD,EAAM9jD,EAAI,GAE1C,IAAM8yD,EAAkB,CAAC,IAAK,IAAK,IAAK,MAClCC,EACFF,EACK7E,KAAI,SAACgF,EAAQhzD,GAKZ,MAJc,OAAO8yD,EAAgB9yD,GAAE,cAAcgzD,EAItC,MAHDhzD,IAAM6yD,EAAQxwD,OAAS,EACjC,OAAOywD,EAAgB9yD,EAAI,GAAE,cAAc8yD,EAAgB9yD,GAAE,MAAMgzD,EACnE,YAAYF,EAAgB9yD,GAAE,MAAMgzD,GACf,OAE1BnrB,KAAK,IAWd,OATAuqB,EAAS,4HAG0BF,EAAS,GAAE,KAAKA,EAAS,GAAE,2CAC7BA,EAAS,GAAE,6BACpCa,EAAsB,4DAIvB,IAAI,EAAArC,eAAe0B,IAMlB,YAAAL,0BAAV,SAAoCjO,EAAiDoO,GAEnF,IAAIE,EACEQ,EAAO9O,EAAMzhD,OAEfwwD,EAAU,KACVD,EAAO,IACTC,EAAU,KAGZA,EAAU,IAAIxkC,MAAMukC,EAAO,IACnBA,EAAO,GAAK9O,EAAM8O,EAAO,GACjC,IAAK,IAAI5yD,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B6yD,EAAQ7yD,GAAK6yD,EAAQ7yD,EAAI,GAAK8jD,EAAM9jD,EAAI,GAE1C,IAAM8yD,EAAkB,CAAC,IAAK,IAAK,IAAK,KAAM,MACxCC,EACFF,EACK7E,KAAI,SAACgF,EAAQhzD,GAKZ,MAJc,OAAO8yD,EAAgB9yD,GAAE,cAAcgzD,EAItC,MAHDhzD,IAAM6yD,EAAQxwD,OAAS,EACjC,OAAOywD,EAAgB9yD,EAAI,GAAE,cAAc8yD,EAAgB9yD,GAAE,MAAMgzD,EACnE,YAAYF,EAAgB9yD,GAAE,MAAMgzD,GACf,OAE1BnrB,KAAK,IAWd,OATAuqB,EAAS,4HAG0BF,EAAS,GAAE,KAAKA,EAAS,GAAE,2CAC7BA,EAAS,GAAE,6BACpCa,EAAsB,gEAIvB,IAAI,EAAArC,eAAe0B,IAMlB,YAAAJ,0BAAV,SAAoClO,EAAyDoO,GAG3F,IAAIE,EACEQ,EAAO9O,EAAMzhD,OAEfwwD,EAAU,KACVD,EAAO,IACTC,EAAU,KAGZA,EAAU,IAAIxkC,MAAMukC,EAAO,IACnBA,EAAO,GAAK9O,EAAM8O,EAAO,GACjC,IAAK,IAAI5yD,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B6yD,EAAQ7yD,GAAK6yD,EAAQ7yD,EAAI,GAAK8jD,EAAM9jD,EAAI,GAE1C,IAAM8yD,EAAkB,CAAC,IAAK,IAAK,IAAK,KAAM,KAAM,MAC9CC,EACFF,EACK7E,KAAI,SAACgF,EAAQhzD,GAKZ,MAJc,OAAO8yD,EAAgB9yD,GAAE,cAAcgzD,EAItC,MAHDhzD,IAAM6yD,EAAQxwD,OAAS,EACjC,OAAOywD,EAAgB9yD,EAAI,GAAE,cAAc8yD,EAAgB9yD,GAAE,MAAMgzD,EACnE,YAAYF,EAAgB9yD,GAAE,MAAMgzD,GACf,OAE1BnrB,KAAK,IAWd,OATAuqB,EAAS,yHAGyBF,EAAS,GAAE,KAAKA,EAAS,GAAE,0CAC7BA,EAAS,GAAE,4BACpCa,EAAsB,iEAItB,IAAI,EAAArC,eAAe0B,IAMlB,YAAA9B,mBAAV,WACE,IAAMxc,EAA2C,GAC7Cqd,EAAW,aACfrd,EAAOqd,GAAY,IAAI,EAAAT,eAAe,yWAUtC5c,EADAqd,EAAW,kBACQ,IAAI,EAAAT,eAAe,6RAStC5c,EADAqd,EAAW,kBACQ,IAAI,EAAAT,eAAe,6VAStC5c,EADAqd,EAAW,kBACQ,IAAI,EAAAT,eAAe,kZAUtCS,EAAW,gBACX,IAAM8B,EAAO,EAAAvB,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAK5C,OAJA4tB,EAAOqd,GAAY,IAAI,EAAAT,eAAe,0FAErBuC,EAAKC,UAAS,sCAExBpf,GAMC,YAAAyc,0BAAV,sBACQzc,EAA2C,GAC3C6c,EAAet2C,KAAK01C,QAAQa,YAAYD,aAsB9C,OArBAt2C,KAAK01C,QAAQa,YAAYuC,SAASpsC,SAAQ,SAACqsC,EAAapzD,GACtD,IAAMqzD,EAAc,EAAKtD,QAAQa,YAAY0C,aAAatzD,GACpDmxD,EAAW,EAAAoC,2CAA2CH,GACxDC,EAAYxC,SACd/c,EAAOqd,GAAY,EAAKqC,0BAA0BrC,EAAUiC,EAAaC,GAEzEvf,EAAOqd,GAAY,EAAKsC,4BAA4BtC,EAAUiC,EAAaC,GAG7E,IAAMK,EAAmB,EAAAC,sDAAsDP,GAC3EC,EAAYpC,cAAc5uD,QAAUsuD,EAAaM,cAAc5uD,SAC7DgxD,EAAYxC,SACd/c,EAAO4f,GACH,EAAKE,+BAA+BF,EAAkBL,EAAa1C,EAAcyC,GAErFtf,EAAO4f,GACH,EAAKG,iCAAiCH,EAAkBL,EAAa1C,EAAcyC,OAKtFtf,GAMC,YAAA8f,+BAAV,SACIzC,EAAkBkC,EAA4B1C,EAA6BrpC,GAC7E,IAYIwsC,EAZEC,EAAUV,EAAYpC,cACtBD,EAAWL,EAAaM,cACxB+C,EAAU1sC,EACV2sC,EAAiB,EAAAV,2CAA2CS,GAE5DE,EAASH,EAAQ1xD,OACjB8xD,EAAUnD,EAAS3uD,OAEnB+xD,EAAgB,EAAAC,cAAcC,iBAAiBP,EAAS/C,GAExD/0B,EAAO,EAAAs4B,kBAAkBJ,GACzBK,EAAWL,EAAUD,EAErBO,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAGvCX,EADa,IAAXI,EACc,GACPC,EAAU,GAAKC,EAAc/xD,QAAU,EAChC,cAEA+xD,EAAcpG,KAAI,SAAAvtD,GAAK,gBAAUg0D,EAAOh0D,EAAI+zD,GAAS,WAAS3sB,KAAK,MAErF,IAAI6sB,EAEFA,EADEP,EAAU,GAAKD,EAAS,EACF,SAEAH,EAAQ/F,KAAI,SAAC9tD,EAAGF,GAAM,gBAAUy0D,EAAOz0D,EAAIw0D,MAAa3sB,KAAK,MAGvF,IAAIzM,EAAS,sBAEPu5B,EAA2B,IADlB,EAAAC,UAAUptC,KAAKusC,GAGxBc,EAA6B,IADnB,EAAAD,UAAUptC,KAAKwpC,GAG/B,GAAe,IAAXkD,GAAiBS,GAAkBE,GAIhC,GAAIF,IAAkBE,EAEzBz5B,EADc,IAAZ+4B,EACO,2EAIA,yDAIN,GAAIC,EAAc/xD,OAAQ,CAC/B,IAAMyyD,EAAOZ,EAAS,EAChBa,EAAOb,EAAS,EAElBE,EAAcvwD,QAAQixD,IAAS,GAAKV,EAAcvwD,QAAQkxD,IAAS,EACrE35B,EAAS,8BACAg5B,EAAcvwD,QAAQixD,IAAS,EACxC15B,EAAS,2EAEAg5B,EAAcvwD,QAAQkxD,IAAS,IACxC35B,EAAS,sDAvBXA,EAAS,iEA0BX,IAAMg3B,EAAS,gBACNjB,EAAQ,iBACXl1B,EAAI,yCACJ63B,EAAa,gCACMG,EAAc,IAAIS,EAAqB,eAC1Dt5B,EAAM,kBAGZ,OAAO,IAAI,EAAAs1B,eAAe0B,EAAQ,CAAC,iCAM3B,YAAAyB,iCAAV,SACI1C,EAAkBkC,EAA4B1C,EAA6BrpC,GAC7E,IAAM4pC,EAAc,CAACP,EAAa7tC,MAAO6tC,EAAa5tC,QAChDiyC,EAAa,CAAC3B,EAAYvwC,MAAOuwC,EAAYtwC,QAC7CmxC,EAASb,EAAYpC,cAAc5uD,OACnC8xD,EAAUxD,EAAaM,cAAc5uD,OACrC0xD,EAAUV,EAAYpC,cACtBD,EAAWL,EAAaM,cACxBgD,EAAiB,EAAAV,2CAA2CjsC,GAElE,GAAI4sC,IAAWC,GAAW,EAAA9B,UAAUC,YAAY0C,EAAY9D,GAAc,CACxE,IAAM,EAAS,qBACHC,EAAQ,0CACS7pC,EAAI,uCAGjC,OAAO,IAAI,EAAAopC,eAAe,EAAQ,CAAC,8BAGrC,IAAMz0B,EAAO,EAAAs4B,kBAAkBJ,GACzBC,EAAgB,EAAAC,cAAcC,iBAAiBP,EAAS/C,GACxDwD,EAAWL,EAAUD,EAErBO,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAenCrC,EAAS,mBACHjB,EAAQ,mBACZl1B,EAAI,4CAfG,IAAXi4B,EACc,GACPC,EAAU,GAAKC,EAAc/xD,QAAU,EAChC,cAEA+xD,EAAcpG,KAAI,SAAAvtD,GAAK,gBAAUg0D,EAAOh0D,EAAI+zD,GAAS,WAAS3sB,KAAK,OAWhE,sBACNosB,EAAc,KATzBE,EAAU,GAAKD,EAAS,EACF,SAEAb,EAAYpC,cAAcjD,KAAI,SAAC9tD,EAAGF,GAAM,gBAAUy0D,EAAOz0D,EAAIw0D,MAAa3sB,KAAK,OAMnD,wBAGtD,OAAO,IAAI,EAAA6oB,eAAe0B,EAAQ,CAAC,iCAM3B,YAAAoB,0BAAV,SAAoCrC,EAAkB7pC,EAAc+rC,GAClE,OAAQA,EAAYpC,cAAc5uD,QAChC,KAAK,EACH,OAAOgY,KAAK46C,uBAAuB9D,EAAU7pC,GAC/C,KAAK,EACH,OAAOjN,KAAK66C,mBAAmB/D,EAAU7pC,EAAM+rC,GACjD,KAAK,EACH,OAAOh5C,KAAK86C,mBAAmBhE,EAAU7pC,EAAM+rC,GACjD,KAAK,EACH,OAAOh5C,KAAK+6C,mBAAmBjE,EAAU7pC,EAAM+rC,GACjD,QACE,OAAOh5C,KAAKg7C,mBAAmBlE,EAAU7pC,EAAM+rC,KAO3C,YAAAI,4BAAV,SAAsCtC,EAAkB7pC,EAAc+rC,GACpE,IAAMvP,EAAQuP,EAAYpC,cAC1B,OAAQnN,EAAMzhD,QACZ,KAAK,EACH,OAAOgY,KAAKi7C,yBAAyBnE,EAAU7pC,EAAM+rC,GACvD,KAAK,EACH,OAAOh5C,KAAKk7C,qBAAqBpE,EAAU7pC,EAAM+rC,GACnD,KAAK,EACH,OAAOh5C,KAAKm7C,qBAAqBrE,EAAU7pC,EAAM+rC,GACnD,KAAK,EACH,OAAOh5C,KAAKo7C,qBAAqBtE,EAAU7pC,EAAM+rC,GACnD,KAAK,EACH,OAAOh5C,KAAKq7C,qBAAqBvE,EAAU7pC,EAAM+rC,GACnD,KAAK,EACH,OAAOh5C,KAAKs7C,qBAAqBxE,EAAU7pC,EAAM+rC,GACnD,KAAK,EACH,OAAOh5C,KAAKu7C,qBAAqBzE,EAAU7pC,EAAM+rC,GACnD,QAEE,MAAM,IAAIprD,MAAM,yBAAyB67C,EAAMzhD,OAAM,QAOjD,YAAA4yD,uBAAV,SAAiC9D,EAAkB7pC,GACjD,IACM8qC,EAAS,oBACFjB,EAAQ,4BAFR,EAAAO,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAGtBgtC,UAAS,IAAI5rC,EAAI,oCAGvC,OAAO,IAAI,EAAAopC,eAAe0B,IAMlB,YAAA8C,mBAAV,SAA6B/D,EAAkB7pC,EAAc+rC,GAC3D,IAAMnB,EAAW,CAACmB,EAAYvwC,MAAOuwC,EAAYtwC,QAC3CovC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCe,EAAO,EAAAvB,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAOtCksC,EALgB,QAAQjB,EAAQ,yDAElCgB,EAAe,GAAE,KAAKA,EAAe,GAAE,2BAChCc,EAAKC,UAAS,IAAI5rC,EAAI,gBAGjC,OAAO,IAAI,EAAAopC,eAAe0B,EAAQ,CAAC,gCAM3B,YAAA+C,mBAAV,SAA6BhE,EAAkB7pC,EAAc+rC,GAC3D,IAAMvP,EAAQuP,EAAYpC,cACpBiB,EAAW,CAACmB,EAAYvwC,MAAOuwC,EAAYtwC,QAC3CkwC,EAAO,EAAAvB,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SACtC2vC,EAAU3D,EAAS,GACnB4D,EAAU5D,EAAS,GAEzB,GAAgB,MAAZA,GAAoB,EAAAG,UAAUC,YAAYxO,EAAOoO,GAAW,CAC9D,IAAM,EAAgB,QAAQf,EAAQ,4EACS2E,EAAO,OAAOD,EAAO,wBACzD5C,EAAKC,UAAS,IAAI5rC,EAAI,kBAGjC,OAAO,IAAI,EAAAopC,eAAe,GAE5B,IAAMyB,EAAiBD,EACjB6D,EAAet2C,KAAKuO,KAAK81B,EAAM,GAAK,GAKpCsO,EAJgB,QAAQjB,EAAQ,wDACTgB,EAAe,GAAE,KAAKA,EAAe,GAAE,KAAK4D,EAAY,8BAC1E9C,EAAKC,UAAS,IAAI5rC,EAAI,gBAGjC,OAAO,IAAI,EAAAopC,eAAe0B,EAAQ,CAAC,gCAM3B,YAAAgD,mBAAV,SAA6BjE,EAAkB7pC,EAAc+rC,GAC3D,IAAMvP,EAAQuP,EAAYpC,cACpBiB,EAAW,CAACmB,EAAYvwC,MAAOuwC,EAAYtwC,QAC3CovC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxCe,EAAO,EAAAvB,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAE5C,GAAiB,IAAb49B,EAAM,GAAU,CAClB,IAAMkS,EAAgBlS,EAAMvhD,MAAM,GAE5B0zD,EAAgB,EAAAC,kBAAkBpS,EAAOkS,GAGzCG,EAAgCC,KAAKjhB,MAAMihB,KAAKC,UAAUhD,IAChE8C,EAAelF,cAAgBgF,EAC/B,IAAMK,EAAiBj8C,KAAKm5C,0BAA0BrC,EAAU7pC,EAAM6uC,GAKhE,EAJmBG,EAAeC,YAAW,gBAC5CpF,EAAQ,+CACJA,EAAQ,IAAI,EAAAqF,kBAPR,CAAC,IAAK,MAAO,OAFX,CAAC,EAAG,IASqC,eAG1D,OAAO,IAAI,EAAA9F,eAAe,EAAQ4F,EAAeG,cAEnD,IAAMZ,EAAU1D,EAAe,GACzB2D,EAAU3D,EAAe,GAEzB4D,EAAet2C,KAAKuO,KAAK81B,EAAM,GAAK,GAOpCsO,EAJgB,QAAQjB,EAAQ,yEAEhC2E,EAAO,KAAKD,EAAO,KAJHE,EAAet2C,KAAKuO,KAAK81B,EAAM,GAAK,GAIf,KAAKiS,EAAY,iCACjD9C,EAAKC,UAAS,IAAI5rC,EAAI,UAEjC,OAAO,IAAI,EAAAopC,eAAe0B,EAAQ,CAAC,gCAK3B,YAAAiD,mBAAV,SAA6BlE,EAAkB7pC,EAAc+rC,GAa3D,IAZA,IAAMvP,EAAQuP,EAAYpC,cACpB2B,EAAO9O,EAAMzhD,OACb6vD,EAAW,CAACmB,EAAYvwC,MAAOuwC,EAAYtwC,QAC3CkwC,EAAO,EAAAvB,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAEtCisC,EAAiB,CAACD,EAAS,GAAIA,EAAS,IACxC2D,EAAU1D,EAAe,GACzB2D,EAAU3D,EAAe,GACzB4D,EAAet2C,KAAKuO,KAAK81B,EAAM8O,EAAO,GAAK,GAC7CJ,EAAgBuD,EAAet2C,KAAKuO,KAAK81B,EAAM8O,EAAO,GAAK,GAC3DzrB,EAAS,0BACTvD,EAAQ,OAAO4uB,EAAa,kBAAkBuD,EAAY,eACrDj0D,EAAI,EAAGA,EAAI8wD,EAAO,EAAG9wD,IAC5BqlC,EAAS,QAAQrlC,EAAC,KAAOqlC,EAEzBvD,EAAQ,IAAI9hC,EAAC,OADb0wD,GAAiB1O,EAAM8O,EAAO9wD,EAAI,IACF,MAAQ8hC,EAE1C,IAOMwuB,EAPgB,QAAQjB,EAAQ,IAAIhqB,EAAM,0BAChCvD,EAAK,+BACEkyB,EAAO,sCACAA,EAAO,yDACYA,EAAO,KAAKD,EAAO,oBACzD5C,EAAKC,UAAS,IAAI5rC,EAAI,gBAGjC,OAAO,IAAI,EAAAopC,eAAe0B,IAMlB,YAAAkD,yBAAV,SAAmCnE,EAAkB7pC,EAAc+rC,GAC3D,QAAqB,CAACA,EAAYvwC,MAAOuwC,EAAYtwC,QAAO,GAA3D8yC,EAAO,KAAEC,EAAO,KACvB,GAAgB,IAAZD,GAA6B,IAAZC,EAAe,CAClC,IAAM,EAAS,qBACH3E,EAAQ,0CACS7pC,EAAI,oCAGjC,OAAO,IAAI,EAAAopC,eAAe,EAAQ,CAAC,8BAGrC,IAAM0B,EAAS,mBACHjB,EAAQ,8BACD7pC,EAAI,gCAAgCuuC,EAAO,KAAKC,EAAO,sCAC7CD,EAAO,KAAKC,EAAO,YAAYxuC,EAAI,sCACnCA,EAAI,4BAGjC,OAAO,IAAI,EAAAopC,eACP0B,EAAQ,CAAC,yBAA0B,4BAA6B,gCAM5D,YAAAmD,qBAAV,SAA+BpE,EAAkB7pC,EAAc+rC,GAC7D,IAAMqD,EAAQrD,EAAYvwC,MACpB6zC,EAAQtD,EAAYtwC,OAE1B,GAAc,IAAV4zC,GAAyB,IAAVD,EAAa,CAC9B,IAAM,EAAS,mBACLvF,EAAQ,iDACS7pC,EAAI,gCAG/B,OAAO,IAAI,EAAAopC,eAAe,EAAQ,CAAC,8BAGrC,GAAc,IAAViG,EAAa,CACf,IAAM,EAAS,qBACHxF,EAAQ,oEAC0BuF,EAAK,+CACtBpvC,EAAI,gCAGjC,OAAO,IAAI,EAAAopC,eAAe,EAAQ,CAAC,8BAErC,GAAc,IAAVgG,EAAa,CACf,IAAM,EAAS,qBACHvF,EAAQ,yEAC+BwF,EAAK,0CAC3BrvC,EAAI,gCAGjC,OAAO,IAAI,EAAAopC,eAAe,EAAQ,CAAC,8BAErC,IAAM0B,EAAS,mBACHjB,EAAQ,iDACSuF,EAAK,KAAKC,EAAK,6CACfrvC,EAAI,4BAGjC,OAAO,IAAI,EAAAopC,eAAe0B,EAAQ,CAAC,yBAA0B,+BAOrD,YAAAoD,qBAAV,SAA+BrE,EAAkB7pC,EAAc+rC,GAC7D,IAAMvP,EAAQuP,EAAYpC,cAGpBiB,EAAW,CAACmB,EAAYtwC,OAAQswC,EAAYvwC,OAElD,GAAgB,MAAZovC,GAAoB,EAAAG,UAAUC,YAAYxO,EAAOoO,GAAW,CAC9D,IAEM,EAAS,qBACHf,EAAQ,gFAHJe,EAAS,GAIiC,OAH1CA,EAAS,GAG+C,0CAC3C5qC,EAAI,gCAGjC,OAAO,IAAI,EAAAopC,eAAe,EAAQ,CAAC,8BAG/B,MAAuB,EAAAkG,aAAa9S,GAAnC+S,EAAQ,WAAEC,EAAQ,WACnBd,EAAgBa,EACtB,GAAIb,EAAc3zD,OAASyhD,EAAMzhD,OAAQ,CACvC,IAAM4zD,EAAgB,EAAAC,kBAAkBpS,EAAOkS,GAEzCG,EAAgCC,KAAKjhB,MAAMihB,KAAKC,UAAUhD,IAChE8C,EAAelF,cAAgBgF,EAE/B,IACM,EAAS,eACT57C,KAAKo5C,4BAA4BtC,EAAU7pC,EAAM6uC,GAAgBI,YAAW,qBACtEpF,EAAQ,4CACLA,EAAQ,IAAI,EAAAqF,kBAJZ,CAAC,MAAO,OAI8BM,GAAS,4BAG9D,OAAO,IAAI,EAAApG,eAAe,EAAQ,CAAC,8BAGrC,IAAMmF,EAAU3D,EAAS,GACnB4D,EAAU5D,EAAS,GACzB,GAAgB,IAAZ4D,EAAe,CACjB,IAAM,EAAS,qBACH3E,EAAQ,gDACD7pC,EAAI,gCAAgCuuC,EAAO,KAAKC,EAAO,2DAC1BxuC,EAAI,WAAWw8B,EAAM,GAAE,8DAC3B+R,EAAO,0CACtBvuC,EAAI,gCAGjC,OAAO,IAAI,EAAAopC,eAAe,EAAQ,CAAC,4BAA6B,+BAGlE,GAAgB,IAAZmF,EAAe,CACjB,IAAM,EAAS,qBACH1E,EAAQ,gDACD7pC,EAAI,gCAAgCuuC,EAAO,KAAKC,EAAO,2DAC1BxuC,EAAI,WAAWw8B,EAAM,GAAE,yDAChCgS,EAAO,+CACjBxuC,EAAI,gCAGjC,OAAO,IAAI,EAAAopC,eAAe,EAAQ,CAAC,4BAA6B,+BAGlE,IAAM0B,EAAS,mBACHjB,EAAQ,qDACMrN,EAAM,GAAE,2CACL+R,EAAO,KAAKC,EAAO,6CACnBxuC,EAAI,4BAGjC,OAAO,IAAI,EAAAopC,eACP0B,EAAQ,CAAC,yBAA0B,4BAA6B,gCAO5D,YAAAqD,qBAAV,SAA+BtE,EAAkB7pC,EAAc+rC,GAC7D,IAAMvP,EAAQuP,EAAYpC,cACpB8F,EAAUjT,EAAM,GAAKA,EAAM,GAC3BkT,EAAUlT,EAAM,GAEhB,EAAuB,EAAA8S,aAAa9S,GAAnC+S,EAAQ,WAAEC,EAAQ,WACnBd,EAAgBa,EACtB,GAAIb,EAAc3zD,OAASyhD,EAAMzhD,OAAQ,CACvC,IAAM4zD,EAAgB,EAAAC,kBAAkBpS,EAAOkS,GAGzCG,EAAgCC,KAAKjhB,MAAMihB,KAAKC,UAAUhD,IAChE8C,EAAelF,cAAgBgF,EAC/B,IAAMgB,EAAU58C,KAAKo5C,4BAA4BtC,EAAU7pC,EAAM6uC,GAE3De,EAAUJ,EAASK,UACnB,EAAS,eACTF,EAAQV,YAAW,qBACbpF,EAAQ,uDACLA,EAAQ,IAAI,EAAAqF,kBAVZ,CAAC,QAAS,MAAO,OAUqBU,GAAQ,4BAG7D,OAAO,IAAI,EAAAxG,eAAe,EAAQuG,EAAQR,cAG5C,IAEMrE,EAAS,qBACDjB,EAAQ,qJAEQ4F,EAAO,YAAYC,EAAO,6CALxC3D,EAAYvwC,MAMU,KALtBuwC,EAAYtwC,OAKsB,+CACnBuE,EAAI,8BAGnC,OAAO,IAAI,EAAAopC,eACP0B,EAAQ,CAAC,yBAA0B,4BAA6B,gCAO5D,YAAAsD,qBAAV,SAA+BvE,EAAkB7pC,EAAc+rC,GAC7D,IAAMvP,EAAQuP,EAAYpC,cACpBmG,EAAUtT,EAAM,GAChBkT,EAAUlT,EAAM,GAAKsT,EAyBrBhF,EAAS,mBACHjB,EAAQ,4EAzBJrN,EAAM,GAAKkT,EA0BM,YAAYA,EAAO,8BAC/BI,EAAO,6CALZ/D,EAAYvwC,MAMQ,KALpBuwC,EAAYtwC,OAKoB,6CACnBuE,EAAI,4BAGjC,OAAO,IAAI,EAAAopC,eAAe0B,EAAQ,CAAC,yBAA0B,+BAMrD,YAAAuD,qBAAV,SAA+BxE,EAAkB7pC,EAAc+rC,GAC7D,IAAMvP,EAAQuP,EAAYpC,cACpBoG,EAAUvT,EAAM,GAChBsT,EAAUtT,EAAM,GAAKuT,EACrBL,EAAUlT,EAAM,GAAKsT,EACrBL,EAAUjT,EAAM,GAAKkT,EAErB,EAAuB,EAAAJ,aAAa9S,GAAnC+S,EAAQ,WAAEC,EAAQ,WACzB,GAAID,EAASx0D,OAASyhD,EAAMzhD,OAAQ,CAClC,IAAM4zD,EAAgB,EAAAC,kBAAkBpS,EAAO+S,GAGzCV,EAAgCC,KAAKjhB,MAAMihB,KAAKC,UAAUhD,IAChE8C,EAAelF,cAAgBgF,EAE/B,IAAM,EAAS,eACT57C,KAAKo5C,4BAA4BtC,EAAU7pC,EAAM6uC,GAAgBI,YAAW,qBACtEpF,EAAQ,+EACLA,EAAQ,IAAI,EAAAqF,kBARZ,CAAC,MAAO,MAAO,QAAS,SAAU,UAQIM,GAAS,4BAG9D,OAAO,IAAI,EAAApG,eAAe,EAAQ,CAAC,4BAA6B,2BAGlE,IAEM0B,EAAS,mBACHjB,EAAQ,wFACM4F,EAAO,YAAYC,EAAO,cAAcI,EAAO,0BACxDC,EAAO,8CALRhE,EAAYvwC,MAMQ,KALpBuwC,EAAYtwC,OAKoB,6CACnBuE,EAAI,4BAGjC,OAAO,IAAI,EAAAopC,eAAe0B,EAAQ,CAAC,4BAA6B,4BAMxD,YAAAwD,qBAAV,SAA+BzE,EAAkB7pC,EAAc+rC,GAC7D,IAAMvP,EAAQuP,EAAYpC,cACpBqG,EAAUxT,EAAM,GAChBuT,EAAUvT,EAAM,GAAKwT,EACrBF,EAAUtT,EAAM,GAAKuT,EACrBL,EAAUlT,EAAM,GAAKsT,EACrBL,EAAUjT,EAAM,GAAKkT,EAErB,EAAuB,EAAAJ,aAAa9S,GAAnC+S,EAAQ,WAAEC,EAAQ,WACzB,GAAID,EAASx0D,OAASyhD,EAAMzhD,OAAQ,CAClC,IAAM4zD,EAAgB,EAAAC,kBAAkBpS,EAAO+S,GAGzCV,EAAgCC,KAAKjhB,MAAMihB,KAAKC,UAAUhD,IAChE8C,EAAelF,cAAgBgF,EAE/B,IAAM,EAAS,iBACP57C,KAAKo5C,4BAA4BtC,EAAU7pC,EAAM6uC,GAAgBI,YAAW,uBACtEpF,EAAQ,4GAELA,EAAQ,IAAI,EAAAqF,kBATd,CAAC,MAAO,MAAO,QAAS,SAAU,SAAU,UASJM,GAAS,gCAGhE,OAAO,IAAI,EAAApG,eAAe,EAAQ,CAAC,4BAA6B,2BAGlE,IAEM0B,EAAS,qBACDjB,EAAQ,mHAEM4F,EAAO,YAAYC,EAAO,cAAcI,EAAO,4BACxDC,EAAO,eAAeC,EAAO,gDANhCjE,EAAYvwC,MAOU,KANtBuwC,EAAYtwC,OAMsB,+CACnBuE,EAAI,gCAGnC,OAAO,IAAI,EAAAopC,eACP0B,EAAQ,CAAC,yBAA0B,4BAA6B,gCAS5D,YAAAhC,MAAV,WAQE,IAPA,IAAMh1B,EAAS/gB,KAAK01C,QAAQa,YAAYD,aAClCiC,EAAOx3B,EAAO0oB,MAAMzhD,OACpBwwD,EAAUz3B,EAAOy3B,QACjB0E,EAASn8B,EAAOtY,MAChB00C,EAASp8B,EAAOrY,OAEhB00C,EAAe,GACZz3D,EAAI,EAAGA,EAAI4yD,EAAO,IAAK5yD,EAC9By3D,EAAaluD,KAAK,eACZvJ,EAAC,gBAAgB6yD,EAAQ7yD,GAAE,KACjCy3D,EAAaluD,KAAK,yBACFvJ,EAAC,OAAO6yD,EAAQ7yD,GAAE,KAEpCy3D,EAAaluD,KAAK,gBACVqpD,EAAO,GAAC,eAChB,IAAM8E,EAAO,gDAC4B9E,EAAI,wDACA2E,EAAM,KAAKC,EAAM,eACxDC,EAAa5vB,KAAK,IAAG,qDAEU+qB,EAAI,iBACnC6E,EAAa5vB,KAAK,IAAG,kBAG3B,MAAO,CAACuoB,MAAO,IAAI,EAAAM,eAAegH,EAAM,CAAC,iCAQjC,YAAArH,UAAV,sBACQO,EAAcv2C,KAAK01C,QAAQa,YAC3B9c,EAA2C,GAcjD,OAbAz5B,KAAK01C,QAAQa,YAAYuC,SAASpsC,SAAQ,SAACO,EAAMtnB,GAC/C,IAAM23D,EAAS/G,EAAY0C,aAAatzD,GAElC4yD,GADQ+E,EAAO1G,cAAc5uD,OAAS,EAAIs1D,EAAO1G,cAAgB0G,EAAO7T,OAC3DzhD,OACf8uD,EAAW,IAAI7pC,EACnBwsB,EAAOqd,GAAY,IAAI,EAAAT,eACnB,EAAKkH,mBAAmBtwC,EAAMsrC,EAAM+E,EAAO70C,MAAO60C,EAAO50C,QAAQ,GACjE,CAAC,6BAA6BouC,EAAY,6BAA8B,8BAE5Erd,EADAqd,GAAsB,MACH,IAAI,EAAAT,eACnB,EAAKkH,mBAAmBtwC,EAAMsrC,EAAM+E,EAAO70C,MAAO60C,EAAO50C,QAAQ,GACjE,CAAC,6BAA6BouC,EAAY,6BAA8B,iCAEvErd,GASC,YAAA8jB,mBAAV,SAA6BC,EAAiBjF,EAAc9vC,EAAeC,EAAgB+0C,GAEzF,IAAIxwC,EAAO,IAAIuwC,EAKf,OAJIC,IACFxwC,GAAc,MAGT,mBACKA,EAAI,UAAUsrC,EAAI,+CACMtrC,EAAI,wDACKxE,EAAK,KAAKC,EAAM,+CAJhD,EAAA2uC,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAKDgtC,UAAS,IAAI2E,EAAO,6DAavD,YAAAE,mBAAV,SAA6BF,EAAiBjF,EAAc9vC,EAAeC,EAAgB+0C,GAEzF,IAAIxwC,EAAO,IAAIuwC,EAAO,QAKtB,OAJIC,IACFxwC,GAAc,MAGT,kBACIA,EAAI,UAAUsrC,EAAI,gDACQiF,EAAO,wDACC/0C,EAAK,KAAKC,EAAM,wBAJhD,EAAA2uC,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAKxBgtC,UAAS,IAAI2E,EAAO,mCAI5C,EApyCA,CAAmC,EAAAG,SAAtB,EAAAC,iB,gCCVb,IAAYC,E,oKAAAA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KACtB,6BACA,+BAaW,EAAAC,YACX,SAAmB1I,EAAgCmB,GAAhC,KAAAnB,YAAgC,KAAAmB,eAE/B,EAAAoH,QACpB,SAAmBjI,GAAA,KAAAA,WAMR,EAAAW,eACX,SAAmB6F,EAA4BE,GAA5B,KAAAF,cAA4B,KAAAE,gBAKjD,iBAGE,WAAmBnvC,EAAcivC,EAAsBE,GAApC,KAAAnvC,OAEfjN,KAAKo8C,aADHA,GAGkB,GAGlBF,IACFl8C,KAAKk8C,YAAcA,GAQzB,OALE,YAAA6B,cAAA,SAAcj3D,GACRA,GACFkZ,KAAKo8C,aAAaltD,KAAKpI,IAG7B,EAnBA,GAAa,EAAAk3D,qBAsBb,+BA0DA,OAzDS,EAAAC,mBAAP,SAA0BC,GACxB,IAAKA,GAA0B,IAAjBA,EAAMl2D,OAClB,MAAO,GAGT,GAAqB,IAAjBk2D,EAAMl2D,OACR,OAAOk2D,EAGT,IAAMC,EAAa,IAAIC,IACjBC,EAAmB,IAAID,IACvB3kB,EAAS,IAAIzlB,MAGnB,OADAhU,KAAKs+C,mBAAmBJ,EAAOC,EAAYE,EAAkB5kB,GACtDA,GAGM,EAAA6kB,mBAAf,SACIC,EAAkCJ,EAAyBE,EAC3D5kB,GACF,IAAK,IAAI9zC,EAAI,EAAGA,EAAI44D,EAAWv2D,SAAUrC,EACvCqa,KAAKw+C,YAAYD,EAAW54D,GAAIw4D,EAAYE,EAAkB5kB,IAInD,EAAA+kB,YAAf,SACIC,EAA0BN,EAAyBE,EAA+B5kB,GAEpF,GAAKglB,IAAQJ,EAAiBK,IAAID,EAAKxxC,MAAvC,CAKA,GAAIkxC,EAAWO,IAAID,EAAKxxC,MACtB,MAAM,IAAIrf,MAAM,oFAIlBuwD,EAAWr9C,IAAI29C,EAAKxxC,MAGpB,IAAMmvC,EAAeqC,EAAKrC,aAC1B,GAAIA,GAAgBA,EAAap0D,OAAS,EACxC,IAAK,IAAIrC,EAAI,EAAGA,EAAIy2D,EAAap0D,SAAUrC,EACzCqa,KAAKw+C,YAAYpC,EAAaz2D,GAAIw4D,EAAYE,EAAkB5kB,GAKpEA,EAAOvqC,KAAKuvD,GAGZJ,EAAiBv9C,IAAI29C,EAAKxxC,MAG1BkxC,EAAWrM,OAAO2M,EAAKxxC,QAE3B,EA1DA,GAAa,EAAA0xC,+B,8yBCzDb,cAMA,cACE,WAAYjJ,G,OACV,YAAMA,IAAQ,KAuFlB,OAzFqC,OAInC,YAAAE,aAAA,WACE,OAAO,EAAP,KAAW51C,KAAK4+C,iBAAoB5+C,KAAK6+C,kBAE3C,YAAAzI,eAAA,WACE,MAAO,IAEC,YAAAwI,cAAV,WACE,MAAO,CACLxxB,OAAQ,IAAI,EAAAipB,eAAe,mGAMrB,YAAAwI,cAAV,WACE,MAAO,CACLphC,OAAQ,IAAI,EAAA44B,eAAe,sFAUrB,YAAAyI,YAAV,WACE,IAAMC,EAAaC,EAAgBtsB,iBAAmB,uBAAyB,GAC/E,MAAO,CACLtF,OAAQ,IAAI,EAAAipB,eAAe,kmBAYvB0I,EAAU,oHAWR,YAAAE,YAAV,WACE,IAAMF,EAAaC,EAAgBtsB,iBAAmB,uBAAyB,GAC/E,MAAO,CACLjV,OAAQ,IAAI,EAAA44B,eAAe,uJAGrB0I,EAAU,uYAcb,EAAArsB,eAAP,WACE,IAAMjrC,EAAI,IAAIy3D,YAAY,GACpB35D,EAAI,IAAIuH,YAAYrF,GACpBzB,EAAI,IAAI6B,WAAWJ,GAEzB,GADAlC,EAAE,GAAK,WACM,MAATS,EAAE,GACJ,OAAO,EAET,GAAa,MAATA,EAAE,GACJ,OAAO,EAET,MAAM,IAAI4H,MAAM,uBAEpB,EAzFA,CAAqC,EAAA+vD,SAAxB,EAAAqB,mB,+yBCNb,cACA,UAOA,cACE,WAAYtJ,G,OACV,YAAMA,IAAQ,KA+BlB,OAjCsC,OAIpC,YAAAE,aAAA,WACE,OAAO,EAAP,KAAW51C,KAAKm/C,gBAAmBn/C,KAAKo/C,oBAE1C,YAAAhJ,eAAA,WACE,MAAO,IAEC,YAAA+I,aAAV,WACE,IAAMvG,EAAO,EAAAvB,QAAQr3C,KAAK01C,QAAQN,UAAUvpC,SAC5C,MAAO,CACLszC,aAAc,IAAI,EAAA9I,eACd,2DAEIuC,EAAK73B,OAAM,yCAGf,CAAC,sBAGC,YAAAq+B,gBAAV,WACE,MAAO,CACLA,gBAAiB,IAAI,EAAA/I,eACjB,wGAKA,CAAC,sBAGX,EAjCA,CAAsC,EAAAsH,SAAzB,EAAA0B,oB,yGCRb,IAAMC,EAAwB,qFAK9B,0BAA+BC,GAG7B,IAFA,IACI1uC,EADE2uC,EAAiG,GAE/C,QAAhD3uC,EAAQyuC,EAAsBG,KAAKF,KAAmB,CAC5D,IAAMzyB,EAASjc,EAAM,GACD6uC,MAAM,KACN/L,KAAI,SAAA9tD,GACH,IAAM85D,EAAS95D,EAAE+5D,OAAOF,MAAM,KAC9B,OAAIC,GAA4B,IAAlBA,EAAO33D,OACZ,CAAC45B,KAAM+9B,EAAO,GAAI1yC,KAAM0yC,EAAO,IAEjC,QAERE,QAAO,SAAA54D,GAAK,OAAM,OAANA,KAChCu4D,EAAW3uC,EAAM,IAAM,CAACic,OAAM,EAAEuwB,KAAMxsC,EAAM,IAE9C,IAAK,IAAM,KAAQ2uC,EAGjB,IAFA,IAAMM,EArBc,6DAqBgB73D,QAAQ,WAAY,GAClD83D,EAAQ,IAAIvsC,OAAOssC,EAAa,M,aAEpC,IAAMl+B,EAAO/Q,EAAM,GACbmvC,EAAWnvC,EAAM,GACjBic,EAASjc,EAAM,GAAG6uC,MAAM,KACxBO,EAAW,EAAYr+B,EAAI,IAAIo+B,EAAQ,IAAM,GAC/CE,EAAkBV,EAAW,GAAMnC,KACnC8C,EAAiB,GACrBX,EAAW,GAAM1yB,OAAOpgB,SAAQ,SAACzlB,EAAGtB,GAC9BsB,IACFk5D,GAAqBl5D,EAAE26B,KAAI,IAAI36B,EAAEgmB,KAAI,MAAM6f,EAAOnnC,GAAE,UAKxD,IAAMy6D,EAAc,WAClBH,EAAQ,uBAFVC,GADAA,EAAaC,EAAc,MAAMD,GACfj4D,QAAQ,SAAa+3D,EAAQ,QAIpC,oBAGXT,EAASA,EAAOt3D,QAAQ4oB,EAAM,GAAIuvC,IApBI,QAAhCvvC,EAAQkvC,EAAMN,KAAKF,K,IAwB7B,OADAA,EAASA,EAAOt3D,QAAQq3D,EAAuB,M,kbC/CjD,cACA,UACA,UACA,UAYA,aAKE,WAAYlK,EAAyBmB,GAArC,WAHS,KAAA8J,KAAkC,GAClC,KAAAC,8BAA6E,GAGpFtgD,KAAK01C,QAAU,IAAI,EAAAoI,YAAY1I,EAAWmB,GAG1CplB,OAAOC,KAAK,EAAAmvB,cAAc7zC,SAAQ,SAACO,GACjC,IAAMuzC,EAAM,IAAI,EAAAD,aAAatzC,GAAM,EAAKyoC,SACxC,EAAK2K,KAAKpzC,GAAQuzC,KAIpB,IAAM7M,EAAM3zC,KAAKsgD,8BACjB,IAAK,IAAMG,KAAWzgD,KAAKqgD,KAAM,CAC/B,IACMK,EADM1gD,KAAKqgD,KAAKI,GACI7K,eAC1B,IAAK,IAAMgH,KAAW8D,EAAe,CACnC,IAAMnlC,EAAMklC,EAAU,IAAM7D,EACxB+D,OAAW,EACXhN,EAAIp4B,IACNolC,EAAchN,EAAIp4B,IACN2gC,YAAcwE,EAAc9D,GAASV,aAEjDyE,EAAc,IAAI,EAAA3C,mBAAmBziC,EAAKmlC,EAAc9D,GAASV,aACjEvI,EAAIp4B,GAAOolC,GAEb,IAAMvE,EAAesE,EAAc9D,GAASR,aAC5C,GAAIA,EACF,IAAK,IAAIz2D,EAAI,EAAGA,EAAIy2D,EAAap0D,SAAUrC,EACzC,GAAKguD,EAAIyI,EAAaz2D,IAKpBg7D,EAAY5C,cAAcpK,EAAIyI,EAAaz2D,SALlB,CACzB,IAAMmB,EAAO,IAAI,EAAAk3D,mBAAmB5B,EAAaz2D,IACjDguD,EAAIyI,EAAaz2D,IAAMmB,EACvB65D,EAAY5C,cAAcj3D,MA2ExC,OAjEE,YAAA85D,WAAA,WACE,IAAMrK,EAAcv2C,KAAK01C,QAAQa,YAC7BwB,EAASxB,EAAYsK,aAWzB,OARK7gD,KAAK01C,QAAQa,YAAYuK,UAC5B/I,EAAYA,EAAM,WAChB,EAAAgJ,yBAAyB/gD,KAAK01C,QAAQN,UAAUvpC,QAAS0qC,EAAYD,aAAa7M,MAAMzhD,SAG5F+vD,EAAS,EAAAiJ,eAAejJ,GAGd,EAAAkJ,sBAAsBjhD,KAAK01C,QAAQN,UAAUvpC,SAAQ,SAC7D7L,KAAKkhD,YAAY3K,EAAYuC,SAAUvC,EAAY4K,WAAU,SAC7DnhD,KAAKohD,WAAWrJ,GAAO,SACvBA,GAGM,YAAAqJ,WAAV,SAAqB7B,GACnB,IAAM8B,EAAmBrhD,KAAKshD,kCAAkC/B,GAEhE,GAAgC,IAA5B8B,EAAiBr5D,OACnB,MAAO,GAIT,IADA,IAAIu5D,EAAW,GACN57D,EAAI,EAAGA,EAAI07D,EAAiBr5D,SAAUrC,EAAG,CAChD,IAAI07D,EAAiB17D,GAAGu2D,YAGtB,MAAM,IAAItuD,MAAM,8CAA8CyzD,EAAiB17D,GAAGsnB,MAFlFs0C,GAAYF,EAAiB17D,GAAGu2D,YAAc,KAMlD,OAAOqF,GAED,YAAAD,kCAAR,SAA0C/B,GAA1C,WACQrB,EAA8B,GASpC,OAPA/sB,OAAOC,KAAKpxB,KAAKsgD,+BAA+B5zC,SAAQ,SAAA80C,GACtD,IAAM5E,EAAU4E,EAAgB9B,MAAM,KAAK,IACV,IAA7BH,EAAO/1D,QAAQozD,IACjBsB,EAAMhvD,KAAK,EAAKoxD,8BAA8BkB,OAI3C,EAAA7C,4BAA4BV,mBAAmBC,IAG9C,YAAAgD,YAAV,SAAsBpI,EAAqBqI,G,YACnCM,EAAyB,GAC/B,GAAI3I,E,IACF,IAAsB,QAAAA,GAAQ,8BAAE,CAA3B,IAAM4I,EAAO,QAChBD,EAAavyD,KAAK,qBAAqBwyD,EAAO,M,iGAGlD,GAAIP,E,IACF,IAAuB,QAAAA,GAAS,8BAAE,CAA7B,IAAMnB,EAAQ,QACjByB,EAAavyD,KACT,WAAW8wD,EAASp+B,KAAI,IAAIo+B,EAAS/yC,MAAO+yC,EAAS2B,YAAc,IAAI3B,EAAS2B,YAAW,IAAM,IAAE,M,iGAG3G,OAAOF,EAAaj0B,KAAK,OAE7B,EA9GA,GAAa,EAAAo0B,oB,yGCfb,cAEA,UACA,UACA,UACA,UAEa,EAAArB,aAAwE,CACnF,SAAY,EAAAvB,gBACZ,UAAa,EAAAK,iBACb,IAAO,EAAAwC,WACP,WAAc,EAAAC,kBACd,YAAe,EAAAlE,gB,gzBCZjB,cAMA,cACE,WAAYlI,G,OACV,YAAMA,IAAQ,KA+JlB,OAjKuC,OAIrC,YAAAE,aAAA,WACE,OAAO,EAAP,WACK51C,KAAK+hD,cACL/hD,KAAKgiD,oBACLhiD,KAAKiiD,mBACLjiD,KAAKkiD,mBACLliD,KAAKmiD,qBAGZ,YAAA/L,eAAA,WACE,MAAO,IAEC,YAAA2L,WAAV,WACE,IAAMxL,EAAcv2C,KAAK01C,QAAQa,YAC3B6L,EAAa7L,EAAYD,aAAa7M,MAAMzhD,OAC5CyxC,EAA2C,GAqBjD,OApBAz5B,KAAK01C,QAAQa,YAAYuC,SAASpsC,SAAQ,SAACO,EAAMtnB,GAC/C,IAAM8jD,EAAQ8M,EAAY0C,aAAatzD,GAAG8jD,MAC1C,GAAIA,EAAMzhD,QAAUo6D,EAAY,CAK9B,IAJA,IAAM7J,EAAO9O,EAAMzhD,OACbq6D,EAAYD,EAAa7J,EACzBzB,EAAW,gBAAgB7pC,EAC7Bq1C,EAAQ,GACH,EAAI,EAAG,EAAI/J,IAAQ,EAC1B+J,GAAS,2BACK,EAAC,sCAAqCD,EAAY,GAAC,OAAO5Y,EAAM,GAAE,qBAGlF,IAAM4T,EAAO,kBACNvG,EAAQ,wBAAwBsL,EAAU,0BAA0B7J,EAAI,mBAC3E+J,EAAK,wBAGT7oB,EAAOqd,GAAY,IAAI,EAAAT,eAAegH,OAGnC5jB,GAEC,YAAAuoB,iBAAV,WACE,IAAMzL,EAAcv2C,KAAK01C,QAAQa,YAC3B6L,EAAa7L,EAAYD,aAAa7M,MAAMzhD,OAC5CyxC,EAA2C,GAuBjD,OAtBAz5B,KAAK01C,QAAQa,YAAYuC,SAASpsC,SAAQ,SAACO,EAAMtnB,GAC/C,IAAM8jD,EAAQ8M,EAAY0C,aAAatzD,GAAG8jD,MAC1C,KAAMA,EAAMzhD,OAAS,GAAKyhD,EAAMzhD,OAASo6D,GAAa,CAKpD,IAJA,IAAM7J,EAAO9O,EAAMzhD,OACbq6D,EAAYD,EAAa7J,EACzBzB,EAAW,sBAAsB7pC,EACnCq1C,EAAQ,GACH,EAAI,EAAG,EAAI/J,EAAO,IAAK,EAC9B+J,GAAS,2BACK,EAAC,sCAAqCD,EAAY,GAAC,OAAO5Y,EAAM,GAAE,qBAGlF,IAAM4T,EAAO,kBACNvG,EAAQ,uBAAuBsL,EAAU,0BAA0B7J,EAAI,mBAC1E+J,EAAK,4BACO/J,EAAO,GAAC,uBAAsB6J,EAAa,GAAC,8BAC5C7J,EAAO,GAAC,uBAAsB6J,EAAa,GAAC,0BAG5D3oB,EAAOqd,GAAY,IAAI,EAAAT,eAAegH,OAGnC5jB,GAEC,YAAAyoB,gBAAV,WACE,IAAM3L,EAAcv2C,KAAK01C,QAAQa,YAC3B9c,EAA2C,GAWjD,OAVAz5B,KAAK01C,QAAQa,YAAYuC,SAASpsC,SAAQ,SAACO,EAAMtnB,GAC/C,IAAM8jD,EAAQ8M,EAAY0C,aAAatzD,GAAG8jD,MACpC+O,EAAUjC,EAAY0C,aAAatzD,GAAG6yD,QACtCD,EAAO9O,EAAMzhD,OACf8uD,EAAW,mBAAmB7pC,EAClCwsB,EAAOqd,GAAY,IAAI,EAAAT,eAAeyL,EAAkBS,oBAAoBzL,EAAUyB,EAAMC,IAE5F/e,EADAqd,EAAW,mBAAmB7pC,EAAI,MAE9B,IAAI,EAAAopC,eAAeyL,EAAkBS,oBAAoBzL,EAAUyB,EAAMC,EAAQtwD,QAAQ40D,eAExFrjB,GAEF,EAAA8oB,oBAAP,SAA2Bt1C,EAAcsrC,EAAcC,GAErD,IADA,IAAI8J,EAAQ,GACH38D,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B28D,GAAS,+BACa38D,EAAC,OAAO6yD,EAAQ7yD,GAAE,cAG1C,MAAO,eACCsnB,EAAI,gBAAgBsrC,EAAI,0CAE1B+J,EAAK,6CAKH,YAAAL,gBAAV,WACE,IAAM1L,EAAcv2C,KAAK01C,QAAQa,YAC3B9c,EAA2C,GAWjD,OAVAz5B,KAAK01C,QAAQa,YAAYuC,SAASpsC,SAAQ,SAACO,EAAMtnB,GAC/C,IAAM8jD,EAAQ8M,EAAY0C,aAAatzD,GAAG8jD,MACpC+O,EAAUjC,EAAY0C,aAAatzD,GAAG6yD,QACtCD,EAAO9O,EAAMzhD,OACf8uD,EAAW,mBAAmB7pC,EAClCwsB,EAAOqd,GAAY,IAAI,EAAAT,eAAeyL,EAAkBU,sBAAsB1L,EAAUyB,EAAMC,IAE9F/e,EADAqd,EAAW,mBAAmB7pC,EAAI,MAE9B,IAAI,EAAAopC,eAAeyL,EAAkBU,sBAAsB1L,EAAUyB,EAAMC,EAAQtwD,QAAQ40D,eAE1FrjB,GAEF,EAAA+oB,sBAAP,SAA6Bv1C,EAAcsrC,EAAcC,GAEvD,IADA,IAAM4E,EAAe,GACZz3D,EAAI,EAAGA,EAAI4yD,EAAO,IAAK5yD,EAC9By3D,EAAaluD,KAAK,mBACRvJ,EAAC,gBAAgB6yD,EAAQ7yD,GAAE,KACrCy3D,EAAaluD,KAAK,+BACIvJ,EAAC,OAAO6yD,EAAQ7yD,GAAE,KAI1C,OAFAy3D,EAAaluD,KAAK,oBACNqpD,EAAO,GAAC,eACb,gBACEtrC,EAAI,gCAAgCsrC,EAAI,iBAC3C6E,EAAa5vB,KAAK,IAAG,qBAInB,YAAA20B,iBAAV,WACE,IAAM5L,EAAcv2C,KAAK01C,QAAQa,YAC3B9c,EAA2C,GA0BjD,OAzBAz5B,KAAK01C,QAAQa,YAAYuC,SAASpsC,SAAQ,SAACO,EAAMtnB,GAK/C,IAJA,IAAM8jD,EAAQ8M,EAAY0C,aAAatzD,GAAG8jD,MACpC8O,EAAO9O,EAAMzhD,OACb8uD,EAAW,oBAAoB7pC,EACjCw1C,EAAY,GACP,EAAI,EAAG,EAAIlK,IAAQ,EAC1BkK,GAAa,mBACL,EAAC,OAAOhZ,EAAM,GAAE,IAE1B,IAAM4T,EAAO,kBACJvG,EAAQ,8BAA8ByB,EAAI,6BACnCA,EAAI,iBACdkK,EAAS,4BACGlK,EAAI,sOAUtB9e,EAAOqd,GAAY,IAAI,EAAAT,eAAegH,MAEjC5jB,GAEX,EAjKA,CAAuC,EAAAkkB,SAA1B,EAAAmE,qB,6KCOb,IAAMY,EAAoB,CACxB72C,QAAS,GACT06B,UAAW,YACXoc,cAAe,UACfC,YAAa,UACb/J,UAAW,YACX93B,OAAQ,eACR8hC,kBAAmB,IAEfC,EAAoB,CACxBj3C,QAAS,kBACT06B,UAAW,KACXoc,cAAe,MACfC,YAAa,KACb/J,UAAW,UACX93B,OAAQ,cACR8hC,kBAAmB,yBAGrB,SAAgBxL,EAAQxrC,GACtB,OAAmB,IAAZA,EAAgB62C,EAAcI,EADvC,YAIA,iCAAsCj3C,GACpC,IAAM+sC,EAAOvB,EAAQxrC,GACrB,OAAU+sC,EAAK/sC,QAAO,yCAEhB+sC,EAAKrS,UAAS,0BACdqS,EAAKrS,UAAS,gCAEdqS,EAAK+J,cAAa,8IAS1B,iCAAsC92C,GACpC,IAAM+sC,EAAOvB,EAAQxrC,GACrB,OAAU+sC,EAAK/sC,QAAO,+FAIlB+sC,EAAKgK,YAAW,yBAChBhK,EAAKiK,kBAAiB,sZA8B5B,oCAAyCh3C,EAAck3C,GAErD,MAAO,sCAESA,EAAiB,sFAHpB1L,EAAQxrC,GAMZkV,OAAM,wB,yyBChGjB,cAOA,cACE,WAAY20B,G,OACV,YAAMA,IAAQ,KAoGlB,OAtGgC,OAI9B,YAAAU,eAAA,WACE,MAAO,IAET,YAAAR,aAAA,WACE,OAAO,EAAP,SAAW51C,KAAKgjD,sBAAyBhjD,KAAKijD,WAAcjjD,KAAKkjD,cAAiBljD,KAAKmjD,eAE/E,YAAAH,mBAAV,WACE,IACMzK,EADev4C,KAAK01C,QAAQa,YAAYD,aACpB7M,MAAMzhD,OAC1Bo7D,EAAmC,CAACtiD,IAAK,KAAME,IAAK,KAAMi8B,IAAK,KAAMc,IAAK,MAC1EtE,EAA2C,GACjD,IAAK,IAAM,KAAQ2pB,EAAQ,CAGzB,IAFA,IAAMC,EAAW,EAAI,MACjBC,EAAkB,GACb39D,EAAI,EAAGA,EAAI4yD,IAAQ5yD,EAC1B29D,GAAmB,oBACV39D,EAAC,KAAKy9D,EAAO,GAAK,QAAQz9D,EAAC,iBAGtC,IAAM03D,EAAO,kBACJgG,EAAK,YAAY9K,EAAI,mBAAmBA,EAAI,mBAC/C+K,EAAe,wBAGrB7pB,EAAO4pB,GAAS,IAAI,EAAAhN,eAAegH,GAGrC,OAAO5jB,GAEC,YAAAwpB,QAAV,WAIE,IAHA,IACM1K,EADev4C,KAAK01C,QAAQa,YAAYD,aACpB7M,MAAMzhD,OAC5Bs7D,EAAkB,GACb39D,EAAI,EAAGA,EAAI4yD,IAAQ5yD,EAC1B29D,GAAmB,kBACV39D,EAAC,WAAWA,EAAC,eAGxB,IAAM03D,EAAO,gCACY9E,EAAI,mBAAmBA,EAAI,iBAC9C+K,EAAe,oBAGrB,MAAO,CAACL,QAAS,IAAI,EAAA5M,eAAegH,KAG5B,YAAA6F,WAAV,WASE,IARA,IACM3K,EADev4C,KAAK01C,QAAQa,YAAYD,aACpB7M,MAAMzhD,OAC5Bs6D,EAAQ,+CAEK/J,EAAI,0EAIZ5yD,EAAI,EAAGA,EAAI4yD,EAAO,IAAK5yD,EAC9B28D,GAAS,+BACa38D,EAAC,oBACbA,EAAC,2BAOb,IAAM03D,EAAO,qCACiB9E,EAAI,wCALlC+J,GAAS,kCAEG/J,EAAO,GAAC,wBAIT,sBAGX,MAAO,CAAC2K,WAAY,IAAI,EAAA7M,eAAegH,KAE/B,YAAA8F,WAAV,WASE,IARA,IACM5K,EADev4C,KAAK01C,QAAQa,YAAYD,aACpB7M,MAAMzhD,OAC5Bs6D,EAAQ,gDAEM/J,EAAI,uEAIb5yD,EAAI,EAAGA,EAAI4yD,EAAO,IAAK5yD,EAC9B28D,GAAS,+BACa38D,EAAC,2BACNA,EAAC,aAOpB,IAAM03D,EAAO,gCACY9E,EAAI,6BAL7B+J,GAAS,yCAEU/J,EAAO,GAAC,gBAIhB,kBAGX,MAAO,CAAC4K,WAAY,IAAI,EAAA9M,eAAegH,KAE3C,EAtGA,CAAgC,EAAAM,SAAnB,EAAAkE,c,uoBCNb,cACA,UACA,UACA,UAEA,UACA,UAKA,UAEA,aAKE,WAAmB5R,GAAA,KAAAA,UACjBjwC,KAAKujD,uBAAyB,IAAI9R,IAClCzxC,KAAKwjD,yBAA2B,IAAI/R,IAEpCzxC,KAAKyjD,eAAiB,IAAIhS,IAC1BzxC,KAAK0jD,eAAiB,IAAIjS,IA4R9B,OAzRE,YAAA12B,IAAA,SAAIqI,EAAmBugC,G,MACjBC,EAAW5jD,KAAKiwC,QAAQ4T,eAAeC,YAAY1gC,GACvD,IAAKwgC,EAAU,CACb,IAAMrN,EAAcnzB,EAAG2gC,kBAAkB/jD,KAAM2jD,GAC1CpN,EAAYtpC,OACfspC,EAAYtpC,KAAqB,QAAd,EAAAmW,EAAG6iB,mBAAW,eAAEh5B,MAErC22C,EAAW5jD,KAAKiwC,QAAQ4T,eAAe9Z,MAAMwM,GAC7Cv2C,KAAKiwC,QAAQ4T,eAAeG,YAAY5gC,EAAIwgC,GAE9C,IAAMK,EAAU7gC,EAAG8gC,cAAclkD,KAAM4jD,EAASrN,YAAaoN,GAE7D,OADA3jD,KAAKmkD,WAAWP,EAAUK,GACnB,CAACA,EAAQG,kBAAkBC,SAGpC,YAAAC,0BAAA,SAA0BV,EAAoBK,GAE5C,IAAK,IAAIt+D,EAAI,EAAGA,EAAIs+D,EAAQM,kBAAkBv8D,SAAUrC,EAAG,CACzD,IAAM2gD,EAAQ2d,EAAQM,kBAAkB5+D,GACpC2gD,EAAMkQ,WAAaoN,EAASrN,YAAYiO,mBAC1CP,EAAQM,kBAAkB5+D,GAAKqa,KAAKykD,OAAOne,IACjCA,EAAMkQ,UAAYoN,EAASrN,YAAYiO,qBACjDP,EAAQM,kBAAkB5+D,GAAKqa,KAAKm1C,KAAK7O,MAI/C,YAAA6d,WAAA,SAAWP,EAAoBK,GAI7B,GAHAjkD,KAAKskD,0BAA0BV,EAAUK,KAGnCA,EAAQG,kBAAkB5N,YAAeoN,EAASrN,YAAYmO,oBAClE,MAAM,IAAI92D,MAAM,uCAGlBoS,KAAKiwC,QAAQ4T,eAAe9oC,IAAI6oC,EAAUK,IAc5C,YAAAU,uBAAA,SAAuBN,EAAgB/G,EAAwB9G,QAAA,IAAAA,OAAA,GAC7D,IAAIoO,EAAK5kD,KAAK6kD,eAAeR,EAAOS,OAAQtO,GAC5C,GAAKoO,EAoBH,EAAAtP,OAAOE,QAAQ,mBAAoB,uCAAuC6O,EAAO3c,KAAI,UAXrF,GARA,EAAA4N,OAAOE,QAAQ,mBAAoB,uCAAuC6O,EAAO3c,KAAI,KAChF4V,IACHA,EAASt9C,KAAK+kD,6BAA6BV,EAAO3c,KAAKx/C,YAKzD08D,EAAK5kD,KAAK6kD,eAAeR,EAAOS,QAAStO,IAEvC,GAAIA,EAAU,CACZ,IAAMwO,EAAwBhlD,KAAKilD,yBAAyBZ,EAAQ,GAAG,EAAO,IAAI,GAC5Ea,EAAsBllD,KAAKmlD,kBAC7BH,EAAuBX,EAAOziC,KAAMyiC,EAAOe,WAAYf,EAAQ,GACnEO,EAAK5kD,KAAKm1C,KAAK+P,QAEfN,EAAK5kD,KAAKmlD,kBAAkB7H,EAAQ+G,EAAOziC,KAAMyiC,EAAOe,WAAYf,EAAQ,GAMlF,OAAOO,GAQT,YAAAS,4BAAA,SAA4B/H,EAAuBpV,GACjD,OAAOloC,KAAKmlD,kBAAkB7H,EAAQpV,IAYxC,YAAAod,sCAAA,SACIhI,EAAuBpV,EAA2B3rC,EAAyB8nD,GAC7E,OAAOrkD,KAAKmlD,kBAAkB7H,EAAQpV,EAAU3rC,EAAM8nD,EAAQ,IAGxD,YAAAc,kBAAR,SACI7H,EAAuBpV,EAA2B3rC,EAA0B8nD,EAC5EkB,GACF,EAAAjQ,OAAOE,QAAQ,mBAAoB,iCAAiCuG,KAAKC,UAAUsB,GAAO,KAC1F,IAAMkI,EAAUxlD,KAAKiwC,QAAQwV,eAAeC,wBAAwBxd,EAAUoV,EAAQ/gD,EAAMgpD,GAC5F,OAAOvlD,KAAK2lD,6BAA6BrI,EAAQpV,EAAUsd,EAASnB,IAUtE,YAAAuB,wBAAA,SACItI,EAAuBpV,EAA2Bsd,EAAuBK,GAC3E,OAAO7lD,KAAK2lD,6BAA6BrI,EAAQpV,EAAUsd,OAAStqC,EAAW2qC,IAGzE,YAAAF,6BAAR,SACIrI,EAAuBpV,EAA2Bsd,EAAuBnB,EAAiBwB,GAD9F,WAEQC,EAAW,OACZxI,GAAM,CACT+G,OAAQA,GACJ,IAAI,EAAA9a,OACI+T,EAAO1G,cAAe1O,GAAU,SAAC6d,GAAmB,SAAKC,YAAYF,UAAc5qC,OACnFA,EAAW2qC,GACvBL,QAAO,IAGT,OADAxlD,KAAKimD,eAAeH,EAAYzB,OAAOS,OAAQgB,EAAaxI,EAAO9G,UAC5DsP,GAGT,YAAAjB,eAAA,SAAegB,EAAqBrP,GAClC,YADkC,IAAAA,OAAA,GAC3Bx2C,KAAKiwC,QAAQiW,cAAcL,GAC9B7lD,KAAKiwC,QAAQ4U,eAAegB,EAAUrP,GACtCA,EAAWx2C,KAAKujD,uBAAuBnxD,IAAIyzD,GAAY7lD,KAAKwjD,yBAAyBpxD,IAAIyzD,IAE/F,YAAAI,eAAA,SAAeJ,EAAqBjB,EAAiBpO,QAAA,IAAAA,OAAA,GAC/Cx2C,KAAKiwC,QAAQiW,cAAcL,GAC7B7lD,KAAKiwC,QAAQgW,eAAeJ,EAAUjB,EAAIpO,IAEzCA,EAAWx2C,KAAKujD,uBAAyBvjD,KAAKwjD,0BAA0Bv3D,IAAI45D,EAAUjB,IAG3F,YAAAuB,sBAAA,SAAsB9B,EAAgB7N,GACpC,YADoC,IAAAA,OAAA,KAC3Bx2C,KAAK6kD,eAAeR,EAAOS,OAAQtO,IAK9C,YAAAyO,yBAAA,SACIZ,EAAgB+B,EAAmB5P,EAAkBI,EACrDyP,GAEF,YAHkB,IAAAD,MAAA,QAAmB,IAAA5P,OAAA,QACnC,IAAA6P,OAAA,GACSrmD,KAAK6kD,eAAeR,EAAOS,OAAQtO,IAIvCx2C,KAAK+kD,6BACK,IAAbqB,GAAkB5P,EAAW6N,EAAO3c,KAAO,EAAA4e,eAAejC,EAAO3c,MAAO0e,EAAUxP,EAClFJ,GAAY6P,EAAY,CAAC7P,SAAQ,EAAE6P,UAAS,QAAInrC,IAMtD,YAAA6pC,6BAAA,SACItb,EAA0B2c,EAAmBxP,EAC7C2P,QAD0B,IAAAH,MAAA,GAE5B,IAAM5P,KAAc+P,IAASA,EAAM/P,UAC7B,IACFx2C,KAAKiwC,QAAQuW,eAAeC,iBAAiBjQ,GAAWI,GAAyBnN,EAAO8c,GAAM,GAD3FG,EAAQ,KAAEC,EAAS,KAEtB,IAAkB,CAACD,EAAUC,GAAU,GAAtCl+C,EAAK,KAAEC,EAAM,KACd69C,GAASA,EAAMF,YACjB59C,EAAQk+C,EACRj+C,EAASg+C,GAEX,IAAMnO,EAAO9O,EAAMzhD,OACf4+D,EAAend,EAAMvhD,MAAM,GAI/B,GAHa,IAATqwD,IACFqO,EAAe,CAAC,IAED,IAAbR,EAEFxP,EAAgBnN,OACX,GAAI+M,EAAU,CACnB,GAAiB,IAAb4P,EACF,MAAM,IAAIx4D,MAAM,sCAElBgpD,EAAgBnN,EACZ8O,EAAO,IACTqO,EAAarO,EAAO,GAAKnzC,KAAKuO,KAAKizC,EAAarO,EAAO,GAAK,IAE1DA,EAAO,IACTqO,EAAarO,EAAO,GAAKnzC,KAAKuO,KAAKizC,EAAarO,EAAO,GAAK,SAEzD,IAAK3B,EACV,MAAM,IAAIhpD,MAAM,oDAElB,MAAO,CACL6a,MAAK,EACLC,OAAM,EACN09C,SAAQ,EACR5P,SAAQ,EACR/M,MAAOmd,EACPpO,QAAS,EAAA+B,UAAUsM,eAAeD,GAClChQ,cAAa,EACbkQ,WAAaP,GAASA,EAAMF,YAIhC,YAAA3R,QAAA,sBACE10C,KAAKiwC,QAAQwV,eAAesB,sBAC5B/mD,KAAKujD,uBAAuB72C,SAAQ,SAAAk4C,GAAM,SAAK3U,QAAQwV,eAAeuB,eAAepC,MACrF5kD,KAAKujD,uBAAyB,IAAI9R,IAClCzxC,KAAKwjD,yBAAyB92C,SAAQ,SAAAk4C,GAAM,SAAK3U,QAAQwV,eAAeuB,eAAepC,MACvF5kD,KAAKwjD,yBAA2B,IAAI/R,KAGtC,YAAAuU,YAAA,SAAYF,GACV,GAAIA,EAAYtP,SACd,OAAOx2C,KAAKgmD,YAAYhmD,KAAKykD,OAAOqB,IAEtC,IAAK9lD,KAAKiwC,QAAQuE,QAAQY,UAAU6R,2BAA4B,CAC9D,IACMC,GADK,IAAI,EAAAC,kBACIC,YAAYpnD,KAAM8lD,GACrC,OAAO9lD,KAAKiwC,QAAQwV,eAAe4B,wBAAwBH,GAE7D,OAAOlnD,KAAKiwC,QAAQwV,eAAeO,YAAYF,EAAaA,EAAYzB,OAAOziC,KAAMkkC,EAAYM,WAGnG,YAAAjR,KAAA,SAAK7O,GACH,IAAMghB,EAAWtnD,KAAK0jD,eAAetxD,IAAIk0C,EAAM+d,OAAOS,QACtD,GAAIwC,EACF,OAAOtnD,KAAKujD,uBAAuBnxD,IAAIk1D,GAEzC,IAAM/rC,EAAM,GAAG+qB,EAAMmD,MACjBrmB,EAAKpjB,KAAKiwC,QAAQsX,YAAYn1D,IAAImpB,GACjC6H,IACHA,EAAK,IAAI,EAAAokC,UACTxnD,KAAKiwC,QAAQsX,YAAYt7D,IAAIsvB,EAAK6H,IAEpC,IAAIwgC,EAAW5jD,KAAKiwC,QAAQ4T,eAAeC,YAAY1gC,GACvD,IAAKwgC,EAAU,CACb,IAAMrN,EAAcnzB,EAAG2gC,kBAAkB/jD,KAAM,CAACsmC,EAAM+d,SACtDT,EAAW5jD,KAAKiwC,QAAQ4T,eAAe9Z,MAAMwM,GAC7Cv2C,KAAKiwC,QAAQ4T,eAAeG,YAAY5gC,EAAIwgC,GAE9C,IAAMK,EAAU7gC,EAAG8gC,cAAclkD,KAAM4jD,EAASrN,YAAa,CAACjQ,EAAM+d,SAGpE,OAFArkD,KAAKmkD,WAAWP,EAAUK,GAC1BjkD,KAAK0jD,eAAez3D,IAAIq6C,EAAM+d,OAAOS,OAAQb,EAAQG,kBAAkBC,OAAOS,QACvEb,EAAQG,mBAGjB,YAAAK,OAAA,SAAOne,GACL,IAAMghB,EAAWtnD,KAAKyjD,eAAerxD,IAAIk0C,EAAM+d,OAAOS,QACtD,GAAIwC,EACF,OAAOtnD,KAAKwjD,yBAAyBpxD,IAAIk1D,GAQ3C,IAAM/rC,EAAM,GAAG+qB,EAAMsQ,cACjBxzB,EAAKpjB,KAAKiwC,QAAQwX,cAAcr1D,IAAImpB,GACnC6H,IACHA,EAAK,IAAI,EAAAskC,YACT1nD,KAAKiwC,QAAQwX,cAAcx7D,IAAIsvB,EAAK6H,IAEtC,IAAIwgC,EAAW5jD,KAAKiwC,QAAQ4T,eAAeC,YAAY1gC,GACvD,IAAKwgC,EAAU,CACb,IAAMrN,EAAcnzB,EAAG2gC,kBAAkB/jD,KAAM,CAACsmC,EAAM+d,SACtDT,EAAW5jD,KAAKiwC,QAAQ4T,eAAe9Z,MAAMwM,GAC7Cv2C,KAAKiwC,QAAQ4T,eAAeG,YAAY5gC,EAAIwgC,GAE9C,IAAMK,EAAU7gC,EAAG8gC,cAAclkD,KAAM4jD,EAASrN,YAAa,CAACjQ,EAAM+d,SAGpE,OAFArkD,KAAKmkD,WAAWP,EAAUK,GAC1BjkD,KAAKyjD,eAAex3D,IAAIq6C,EAAM+d,OAAOS,OAAQb,EAAQG,kBAAkBC,OAAOS,QACvEb,EAAQG,mBAEnB,EAtSA,GAAa,EAAAuD,yB,gpBCdb,aAGA,UACA,aACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,aACA,UACA,UAEa,EAAAC,uBAAuD,CAClE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIC,EAASC,aAAa,EAAAC,aAAcF,EAASG,aACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIH,EAASC,aAAa,EAAAG,YAAaJ,EAASK,cACzE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIC,EAAUC,cAAc,EAAAL,aAAcI,EAAUE,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIF,EAAUC,cAAc,CAAC,QAASD,EAAUG,aACxE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIT,EAASC,aAAa,EAAAG,YAAaJ,EAASU,cACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIV,EAASC,aAAa,EAAAG,YAAaJ,EAASW,cACzE,CAAC,cAAe,GAAI,OAAQ,WAAM,WAAI,EAAAC,mBACtC,CAAC,qBAAsB,GAAI,KAAM,WAAM,WAAI,EAAAC,0BAC3C,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIb,EAASC,aAAa,EAAAG,YAAaJ,EAASc,cACzE,CAAC,OAAQ,GAAI,OAAQ,WAAM,WAAI,EAAAC,YAC/B,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,cAC/B,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAC,YAC7B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIjB,EAASC,aAAa,EAAAG,YAAaJ,EAASkB,aACxE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIZ,EAAUC,cAAc,EAAAL,aAAcI,EAAUa,aAC5E,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAChC,CAAC,eAAgB,GAAI,KAAM,WAAM,WAAI,EAAAC,oBACrC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIf,EAAUC,cAAc,EAAAL,aAAcI,EAAUgB,iBAAajuC,EAAW,UACtG,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAkuC,WAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIvB,EAASC,aAAa,EAAAG,YAAaJ,EAASwB,aACxE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAChC,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIzB,EAASC,aAAa,EAAAG,YAAaJ,EAAS0B,eAC1E,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,cAC/B,CAAC,OAAQ,GAAI,OAAQ,WAAM,WAAI,EAAAC,WAAU,KACzC,CAAC,OAAQ,GAAI,MAAO,WAAM,WAAI,EAAAA,WAAU,KACxC,CAAC,oBAAqB,GAAI,KAAM,WAAM,WAAI,EAAAC,yBAC1C,CAAC,gBAAiB,GAAI,KAAM,WAAM,WAAI,EAAAC,qBACtC,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIxB,EAAUC,cAAc,EAAAL,aAAcI,EAAUyB,mBAAe1uC,EAAW,UAC1G,CAAC,WAAY,GAAI,KAAM,WAAM,WAAI2sC,EAASC,aAAa,EAAAC,aAAcF,EAASgC,kBAC9E,CAAC,cAAe,GAAI,KAAM,WAAM,WAAI,EAAAC,mBACpC,CAAC,wBAAyB,GAAI,KAAM,WAAM,WAAI,EAAAC,6BAC9C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAC,iBAClC,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI7B,EAAUC,cAAc,EAAAL,aAAcI,EAAU8B,gBAAY/uC,EAAW,UACpG,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI2sC,EAASC,aAAa,EAAAG,YAAaJ,EAASqC,aACxE,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,cAC/B,CAAC,UAAW,GAAI,MAAO,WAAM,WAAI,EAAAC,eACjC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIjC,EAAUC,cAAc,EAAAL,aAAcI,EAAUkC,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIxC,EAASC,aAAa,EAAAC,aAAcF,EAASyC,aACzE,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIzC,EAASC,aAAa,CAAC,QAASD,EAAS0C,aACrE,CAAC,KAAM,GAAI,KAAM,WAAM,WAAIpC,EAAUC,cAAc,CAAC,QAASD,EAAUqC,YACvE,CAAC,MAAO,GAAI,OAAQ,WAAM,WAAI,EAAAC,WAC9B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAItC,EAAUC,cAAc,EAAAH,YAAaE,EAAUuC,aAC3E,CAAC,QAAS,GAAI,KAAM,WAAM,WAAIvC,EAAUC,cAAc,EAAAH,YAAaE,EAAUwC,eAC7E,CAAC,eAAgB,GAAI,KAAM,WAAM,WAAIC,EAAUC,oBAC/C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAID,EAAUE,iBAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAIF,EAAUG,kBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIH,EAAUI,iBAC5C,CAAC,aAAc,GAAI,KAAM,WAAM,WAAIJ,EAAUK,kBAC7C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAIL,EAAUM,iBAC5C,CAAC,kBAAmB,GAAI,KAAM,WAAM,WAAIN,EAAUO,uBAClD,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAItD,EAASC,aAAa,EAAAG,YAAaJ,EAASuD,cACzE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAChC,CAAC,SAAU,GAAI,KAAM,WAAM,WAAI,EAAAC,kBAAkB,MACjD,CAAC,SAAU,GAAI,MAAO,WAAM,WAAI,EAAAA,kBAAkB,MAClD,CAAC,UAAW,GAAI,KAAM,WAAM,WAAIzD,EAASC,aAAa,EAAAG,YAAaJ,EAAS0D,iBAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI1D,EAASC,aAAa,EAAAG,YAAaJ,EAAS2D,aACxE,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI,EAAAC,gBAC/B,CAAC,QAAS,GAAI,MAAO,WAAM,WAAI,EAAAC,aAC/B,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAKhC,CAAC,QAAS,GAAI,KAAM,SAAC7kE,GAAS,WAAI,EAAA8kE,WAAW9kE,EAAK+kE,QAAQ7jE,UAC1D,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI6/D,EAASC,aAAa,EAAAG,YAAaJ,EAASiE,cACzE,CAAC,UAAW,GAAI,KAAM,WAAM,WAAI,EAAAC,eAChC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI5D,EAAUC,cAAc,EAAAL,aAAcI,EAAU6D,aAC5E,CAAC,MAAO,GAAI,KAAM,WAAM,WAAI,EAAAC,WAC5B,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIpE,EAASC,aAAa,EAAAG,YAAaJ,EAASqE,aACxE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAIrE,EAASC,aAAa,EAAAG,YAAaJ,EAASsE,cACzE,CAAC,OAAQ,GAAI,KAAM,WAAM,WAAI,EAAAC,YAC7B,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAC,iBAClC,CAAC,WAAY,GAAI,MAAO,WAAM,WAAI,EAAAC,cAAc,KAChD,CAAC,WAAY,GAAI,IAAK,WAAM,WAAI,EAAAA,cAAc,KAC9C,CAAC,YAAa,GAAI,KAAM,WAAM,WAAI,EAAAC,iBAClC,CAAC,MAAO,GAAI,KAAM,WAAM,WAAIpE,EAAUC,cAAc,CAAC,QAASD,EAAUqE,e,klBC7G1E,cAEA,UAIA,2B,+CAiCA,OAjC6C,OAC3C,YAAAzxC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM1K,EAAe0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAChE6nE,EAAc/I,EAAO,GAAGjc,KAAKx/C,QAC7BqwD,EAAOmU,EAAY1kE,OACnB2kE,EAAQ1T,EAAa,GACrBL,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjDg1C,EAAe,6BACCtI,EAAI,oEACuBoU,EAAMlkD,MAAK,KAAKkkD,EAAMjkD,OAAM,6CACzCkwC,EAAKC,UAAS,6DACfD,EAAKC,UAAS,gEACVD,EAAKC,UAAS,6DACrBD,EAAKC,UAAS,4FAEsB74C,KAAK4sD,QAAO,qBAEhF,MAAO,CACL3T,aAAY,EACZ3C,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,IAAK,QAAS,IAAK,OAAQ,YACtC+H,aAAY,IAGhB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KACrF0K,EAAOz7D,MAAM,GAAGwkB,SAAQ,SAAA7nB,GAAK,OAAAgoE,EAAS39D,KAAK6hD,EAAQ4T,uBAAuB9/D,OAC1E,IAAMioE,EAAW/b,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MAClG,MAAO,CAAC2iC,kBAAmBsI,EAAUzI,kBAAmB0I,EAAUC,YAAa,KAEnF,EAjCA,CAA6C,EAAAC,oBAAhC,EAAAtE,2B,wsBCNb,cAEA,UACA,UACA,UAIA,cAGE,WACIuE,EAAsDC,EAA6B1mB,EACnF2mB,GAFJ,MAGE,YAAMF,EAAgBzmB,EAAQ2mB,IAAW,K,OAFe,EAAAD,W,EAkG5D,OAtGmC,OAQjC,YAAAnyC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAMyJ,GAAe,EAAA7S,UAAU8S,SAAS1J,EAAO,GAAGjc,KAAMic,EAAO,GAAGjc,WAGpCxsB,IAA1Blb,KAAKstD,mBACPttD,KAAKstD,kBAAoBF,GAAerc,EAAQd,QAAQkF,MAG1D,IAAM8D,EAAej5C,KAAKstD,iBACtB3J,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,EAAG,GAAG,EAAMA,EAAE6iD,MAAM,MACrEic,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAC/C0oE,EAAcvtD,KAAKstD,iBACrBvc,EAAQgU,6BAA6BpB,EAAO,GAAGjc,KAAM,EAAGic,EAAO,GAAGjc,KAAM,CAAC8O,UAAU,EAAM6P,WAAW,IACpGtV,EAAQgU,6BAA6BpB,EAAO,GAAGjc,MAEnD,GAAI0lB,EAAa,CACf,IAAMV,EAAc,EAAA1S,cAAcwT,UAAU7J,EAAO,GAAGjc,KAAMic,EAAO,GAAGjc,MAAM,GAC5E,IAAKglB,EACH,MAAM,IAAI9+D,MAAM,gDAElB,IAAMw0D,EAAasK,EAAY1kE,OACzBylE,EAAkC,IAA1B9J,EAAO,GAAGjc,KAAK1/C,OAAe27D,EAAO,GAAGjc,KAAK1/C,OAAS,EAC9D0lE,EAAkC,IAA1B/J,EAAO,GAAGjc,KAAK1/C,OAAe27D,EAAO,GAAGjc,KAAK1/C,OAAS,EAC9D2lE,EAAmC,IAA1BhK,EAAO,GAAGjc,KAAK1/C,OAAe,qCAAuC,mBAC9E4lE,EAAmC,IAA1BjK,EAAO,GAAGjc,KAAK1/C,OAAe,qCAAuC,mBAG9E,EAAe,WACnBgY,KAAKktD,SAAS7P,KAAI,qCACQ+E,EAAU,8BACrBqL,EAAK,4BACLC,EAAK,eAClBC,EAAM,aACNC,EAAM,oBACC5tD,KAAKktD,SAASjgD,KAAI,uCAM7B,MAAO,CACLgsC,aAAY,EACZ3C,aANmBt2C,KAAKstD,iBACtBvc,EAAQgU,6BAA6B2H,EAAa,EAAGA,EAAa,CAAClW,UAAU,EAAM6P,WAAW,IAC9FtV,EAAQgU,6BAA6B2H,GAKvC5T,SAAU,CAAC,IAAK,KAChB+H,aAAY,EACZ2D,mBAAoBxkD,KAAKstD,iBACzB5I,oBAAqB1kD,KAAKstD,kBAG9B,IAAM1U,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjDg1C,EAAe,SACnB7gD,KAAKktD,SAAS7P,KAAI,wCAENzE,EAAKC,UAAS,oCACdD,EAAKC,UAAS,wCACV74C,KAAKktD,SAASjgD,KAAI,oBAChC2rC,EAAK73B,OAAM,0BAIf,OAAI/gB,KAAKstD,iBACA,CACLxM,SAAS,EACT7H,aAAY,EACZ3C,aAAciX,EACdzU,SAAU,CAAC,IAAK,KAChB+H,aAAY,EACZ2D,oBAAoB,EACpBE,qBAAqB,GAGhB,CACL5D,SAAS,EACT7H,aAAY,EACZ3C,aAAcvF,EAAQgU,6BAA6BpB,EAAO,GAAGjc,MAC7DoR,SAAU,CAAC,IAAK,KAChB+H,aAAY,IAIlB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GAItE,MAAO,CACLY,kBAJevkD,KAAKstD,iBAClB3J,EAAOhQ,KAAI,SAAC9uD,GAAM,OAAAksD,EAAQ4T,uBAAuB9/D,EAAGksD,EAAQkU,yBAAyBpgE,EAAG,GAAG,EAAO,IAAI,OACtG8+D,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OAGlFy+D,kBAAmBrT,EAAQsU,4BACvB9O,EAAYD,aAAct2C,KAAKmtD,WAAantD,KAAKmtD,WAAaxJ,EAAO,GAAG/hC,MAC5EmrC,YAAa,KAGnB,EAtGA,CAAmC,EAAAc,UAAtB,EAAAzF,gBAwGb,qBAUE,MAAO,CAAC/K,KARK,4HAQCpwC,KATD,OASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBAUE,MAAO,CAACzQ,KARK,4HAQCpwC,KATD,OASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBAUE,MAAO,CAACzQ,KARK,4HAQCpwC,KATD,OASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBAUE,MAAO,CAACzQ,KARK,4HAQCpwC,KATD,OASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,uBAUE,MAAO,CAACzQ,KARK,oJAQCpwC,KATD,SASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,yBAaE,MAAO,CAACzQ,KAXK,oNAWCpwC,KAZD,WAYO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,sBAaE,MAAO,CAACzQ,KAXK,4OAWCpwC,KAZD,QAYO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBAeE,MAAO,CAACzQ,KAbK,mTAaCpwC,KAdD,OAcO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,oBAeE,MAAO,CAACzQ,KAbK,iTAaCpwC,KAdD,MAcO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBAeE,MAAO,CAACzQ,KAbK,mTAaCpwC,KAdD,OAcO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBACE,OAoBF,SAA2BzK,GACzB,IAAMp2C,EAAUo2C,OAShB,MAAO,CAAChG,KARK,oIAQCpwC,KAAI,EAAE2U,KAAM,EAAAi8B,aAAaiQ,YA9BhCC,IAET,uBAeE,MAAO,CAAC1Q,KAbK,+SAaCpwC,KAdD,SAcO2U,KAAM,EAAAi8B,aAAaiQ,c,okBC/QzC,cAEA,UAIA,2B,+CA+BA,OA/B+B,OAC7B,YAAA/yC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM+I,EAAc/I,EAAO,GAAGjc,KAAKx/C,QAC7B0wD,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjDg1C,EAAe,mCACO7gD,KAAKqF,IAAG,qCACRrF,KAAKsF,IAAG,8CAEpBszC,EAAKC,UAAS,8BACxBD,EAAK73B,OAAM,gDAGjB,MAAO,CACLk4B,aAAc,CAAClI,EAAQkU,yBAAyBtB,EAAO,KACvDrN,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,KACX+H,aAAY,EACZC,SAAS,IAGb,YAAAoD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KACrF,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EA/BA,CAA+B,EAAAiB,MAAlB,EAAApF,a,4kBCNb,cAEA,UAGA,UAEA,UAEA,2B,+CA6IA,OA7IuC,OACrC,YAAA7tC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAMsK,EAAatK,EAAO,GAAGjc,KAAKx/C,QAClC,GAAI8X,KAAKkuD,MAAQD,EAAWjmE,QAAUgY,KAAKkuD,MAAS,EAAID,EAAWjmE,OACjE,MAAM,IAAI4F,MAAM,gEAEdoS,KAAKkuD,KAAO,IACdluD,KAAKkuD,KAAOD,EAAWjmE,OAASgY,KAAKkuD,MAKvC,IADA,IAAMxB,EAAcuB,EAAW/lE,MAAM,GAC5BvC,EAAI,EAAGA,EAAIg+D,EAAO37D,OAAQrC,IAEjC,IADA,IAAMwoE,EAAaxK,EAAOh+D,GAAG+hD,KAAKx/C,QACzBkmE,EAAY,EAAGA,EAAYH,EAAWjmE,OAAQomE,IAErD,GAAIA,IAAcpuD,KAAKkuD,KACrBxB,EAAY1sD,KAAKkuD,OAASC,EAAWC,QAGlC,GAAIH,EAAWG,KAAeD,EAAWC,GAC5C,MAAM,IAAIxgE,MAAM,oCAKtB,IAAM2qD,EAAOmU,EAAY1kE,OACnBswD,EAAS,EAAA+V,YAAY,SAAU9V,GAC/B+V,EAAQ,EAAApU,kBAAkB3B,GAC1BgW,EAAgB,EAAAC,oBAEhBC,EAAS9K,EAAOhQ,KAAI,SAAAhuD,GAAK,OAAAA,EAAE+hD,QAC3BgnB,EAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1CtI,EAAWsI,EAAcxmE,MAAM,EAAGqwD,GAClCoW,EAAoB,IAAI36C,MAAMy6C,EAAOzmE,OAAS,GAC9C8wD,EAAW6K,EAAOhQ,KAAI,SAAC1sD,EAAGtB,GAAM,UAAIA,KAG1C,IADAgpE,EAAQ,GAAKF,EAAO,GAAGzuD,KAAKkuD,MACnBvoE,EAAI,EAAGA,EAAIgpE,EAAQ3mE,OAAQrC,IAClCgpE,EAAQhpE,GAAKgpE,EAAQhpE,EAAI,GAAK8oE,EAAO9oE,GAAGqa,KAAKkuD,MAG/C,IAAMU,EAAUxI,EAASpmD,KAAKkuD,MACxBW,EAAezI,EAASl+D,OAAO,GAC/B4mE,EAAc1I,EAAS54B,OAEzBuhC,EAAkB,OAAOH,EAAO,MAAMD,EAAQ,GAAE,kDAEtCG,EAAW,WAAWD,EAAarhC,OAAM,eAEvD,IAAS7nC,EAAI,EAAGA,EAAIgpE,EAAQ3mE,OAAQrC,IAAK,CACvC,IAAM,EAAQgpE,EAAQhpE,EAAI,GAC1BopE,GAAmB,mBACTH,EAAO,MAAMD,EAAQhpE,GAAE,QAAQipE,EAAO,OAAOD,EAAQhpE,EAAI,GAAE,0DAEvDA,EAAC,IAAIqa,KAAKgvD,0BAA0B5I,EAAUwI,EAAS,GAAM,0BAC5D5uD,KAAKgvD,0BAA0BH,EAAcD,EAAS,GAAM,mBAG7E,IAAMK,EAAYN,EAAQ3mE,OACpBsG,EAAQqgE,EAAQA,EAAQ3mE,OAAS,GACvC+mE,GAAmB,mDAELE,EAAS,IAAIjvD,KAAKgvD,0BAA0B5I,EAAUwI,EAAStgE,GAAM,wBACpE0R,KAAKgvD,0BAA0BH,EAAcD,EAAStgE,GAAM,MAE3E,IAAMsqD,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SAEjDg1C,EAAe,aACf0N,EAAa,4BACEnI,EAASzS,KAAI,SAAArpD,GAAK,aAASA,KAAE,kBAC1CykE,EAAe,mDAIfT,EAAK,gEACgBI,EAAcnW,EAAO,GAAE,uBACrCmW,EAAcnW,EAAO,GAAE,aAAamW,EAAcnW,EAAO,GAAE,uBAC3DmW,EAAcnW,EAAO,GAAE,wDAEFD,EAAM,gCAElCA,EAAOC,EAAO,GAAE,MAAMD,EAAOC,EAAO,GAAE,wBAClCD,EAAOC,EAAO,GAAE,MAAMmU,EAAYnU,EAAO,GAAE,wCACzBD,EAAM,gCAG5BA,EAAOC,EAAO,GAAE,MAAMD,EAAOC,EAAO,GAAE,wBAClCD,EAAOC,EAAO,GAAE,MAAMmU,EAAYnU,EAAO,GAAE,wCACzBD,EAAM,gCAG5BA,EAAOC,EAAO,GAAE,MAAMD,EAAOC,EAAO,GAAE,wBAClCD,EAAOC,EAAO,GAAE,MAAMmU,EAAYnU,EAAO,GAAE,sBAC3CD,EAAOC,EAAO,GAAE,MAAMmU,EAAYnU,EAAO,GAAE,wCACzBD,EAAM,8BAE5BM,EAAK73B,OAAM,gCAInB,MAAO,CACLk4B,aAAc0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,EAAG,GAAG,EAAMA,EAAE6iD,MAAM,MACnF4O,aACIvF,EAAQgU,6BAA6B2H,EAAa,EAAGA,EAAa,CAAClW,UAAU,EAAM6P,WAAW,IAClGvN,SAAQ,EACR+H,aAAY,EACZC,SAAS,EACT0D,oBAAoB,EACpBE,qBAAqB,IAGzB,YAAAR,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,IAAI,MACrG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAUP,YAAAiC,0BAAV,SAAoC5I,EAAoBwI,EAAiBtgE,GACvE,IAAM4gE,EAAa9I,EAAS58D,QAAQolE,GAQpC,OAPYxI,EAASzS,KAAI,SAAC3tD,EAAGo3B,GAC3B,OAAIA,IAAQ8xC,EACAlpE,EAAC,MAAMsI,EAEVtI,KAGAwnC,QAEf,EA7IA,CAAuC,EAAA2hC,QAA1B,EAAAC,qB,4lBCRb,cAKA,UAIA,cAGE,mBACE,cAAO,K,OACP,EAAKC,aAAe,IAAIC,EACxB,EAAKC,WAAa,IAAI,EAAAH,kB,EA+B1B,OArCiC,OAU/B,YAAA3a,WAAA,SAAW7oC,GACT5L,KAAKqvD,aAAa5a,WAAW7oC,GAC7B5L,KAAKuvD,WAAW9a,WAAW7oC,IAG7B,YAAAmP,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAI8I,EAAiBxc,QAAQkF,MAAQwO,EAAO,GAAGjc,KAAK1/C,OAAS,EACpDykE,EAAiB1xC,IAAI/a,KAAKuvD,WAAY5L,GAEtC8I,EAAiB1xC,IAAI/a,KAAKqvD,aAAc1L,IAInD,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,OAAI5S,EAAQd,QAAQkF,MAAQwO,EAAO,GAAGjc,KAAK1/C,OAAS,EAC3CgY,KAAKuvD,WAAWxL,kBAAkBhT,EAAS4S,GAE3C3jD,KAAKqvD,aAAatL,kBAAkBhT,EAAS4S,IAGxD,YAAAO,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,OAAI5S,EAAQd,QAAQkF,MAAQwO,EAAO,GAAGjc,KAAK1/C,OAAS,EAC3CgY,KAAKuvD,WAAWrL,cAAcnT,EAASwF,EAAaoN,GAEpD3jD,KAAKqvD,aAAanL,cAAcnT,EAASwF,EAAaoN,IAGnE,EArCA,CAAiC,EAAAwL,QAApB,EAAAtG,cAsCb,+B,+CA4IA,OA5IyC,OACvC,YAAA9tC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAMsK,EAAatK,EAAO,GAAGjc,KAAKx/C,QAClC,GAAI8X,KAAKkuD,MAAQD,EAAWjmE,QAAUgY,KAAKkuD,MAAS,EAAID,EAAWjmE,OACjE,MAAM,IAAI4F,MAAM,gEAEdoS,KAAKkuD,KAAO,IACdluD,KAAKkuD,KAAOD,EAAWjmE,OAASgY,KAAKkuD,MAKvC,IADA,IAAMxB,EAAcuB,EAAW/lE,MAAM,GAC5BvC,EAAI,EAAGA,EAAIg+D,EAAO37D,OAAQrC,IAEjC,IADA,IAAMwoE,EAAaxK,EAAOh+D,GAAG+hD,KAAKx/C,QACzBkmE,EAAY,EAAGA,EAAYH,EAAWjmE,OAAQomE,IAErD,GAAIA,IAAcpuD,KAAKkuD,KACrBxB,EAAY1sD,KAAKkuD,OAASC,EAAWC,QAGlC,GAAIH,EAAWG,KAAeD,EAAWC,GAC5C,MAAM,IAAIxgE,MAAM,oCAKtB,IAEI4hE,EAFEjX,EAAOmU,EAAY1kE,OAKvBwnE,EADE7L,EAAO37D,OAAS,EACsBgY,KAAKyvD,4CAA4C9L,EAAO37D,QAExDgY,KAAK0vD,4CAA4C/L,EAAO37D,QAGlG,IAAM2nE,EAAoC3vD,KAAK2vD,kCAAkChM,EAAO37D,OAAQuwD,GAC1FqX,EAA+B5vD,KAAK4vD,6BAA6BjM,EAAO37D,QACxE8wD,EAAW6K,EAAOhQ,KAAI,SAAC1sD,EAAGtB,GAAM,UAAIA,KACpCk7D,EAAe,WACjB8O,EAAiC,WACjCC,EAA4B,WAC5BJ,EAAqC,qCACXjX,EAAI,wEAC2Bv4C,KAAKkuD,KAAI,6DAGtDluD,KAAKkuD,KAAI,eACrBluD,KAAKkuD,KAAI,oKAKb,MAAO,CACLjV,aAAc0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAC/DyxD,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAQ,EACRqI,UAAW,CAAC,CAACl0C,KAAM,mBAAoB2U,KAAM,MAAO+/B,YAAagC,EAAO37D,SACxE64D,aAAY,IAGhB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GAItE,IAHA,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OAC3FkqE,EAAmB,IAAI77C,MAAcuiC,EAAY0C,aAAajxD,QAChE8nE,EAAc,EACTnqE,EAAI,EAAGA,EAAI4wD,EAAY0C,aAAajxD,SAAUrC,EACrDmqE,GAAevZ,EAAY0C,aAAatzD,GAAG8jD,MAAMzpC,KAAKkuD,MACtD2B,EAAiBlqE,GAAKmqE,EAExB,IAAM/C,EAAc,CAAC8C,iBAAgB,GACrC,MAAO,CACLtL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAW,IAGP,YAAA0C,4CAAR,SAAoDM,GAClD,MAAO,qEACYA,EAAe,uHAS5B,YAAAL,4CAAR,SAAoDK,GAClD,OAAO/vD,KAAKyvD,4CAA4CM,IAGlD,YAAAJ,kCAAR,SAA0CI,EAAyBC,GAEjE,IADA,IAAMC,EAAsB,CAAC,mEAAmED,EAAU,QACjGrqE,EAAI,EAAGA,EAAIoqE,IAAmBpqE,EAC3B,IAANA,EACFsqE,EAAU/gE,KACN,yBACuBvJ,EAAC,gBAAgBA,EAAC,gBACpCA,IAAMoqE,EAAkB,EACjCE,EAAU/gE,KACN,qBACmBvJ,EAAC,gBAExBsqE,EAAU/gE,KACN,8BAC4BvJ,EAAC,gBAAgBA,EAAC,gBAMtD,OAHAsqE,EAAU/gE,KACN,OAEG+gE,EAAUziC,KAAK,OAGhB,YAAAoiC,6BAAR,SAAqCM,GAEnC,IADA,IAAMD,EAAsB,CAAC,sCAAsCC,EAAS,mBACnEvqE,EAAI,EAAGA,EAAIuqE,IAAavqE,EACrB,IAANA,EACFsqE,EAAU/gE,KACN,kBACgBvJ,EAAC,kBAAkBA,EAAC,QAC/BA,IAAMuqE,EAAY,EAC3BD,EAAU/gE,KACN,uBACqBvJ,EAAC,QAE1BsqE,EAAU/gE,KACN,uBACqBvJ,EAAC,kBAAkBA,EAAC,QAOjD,OAJAsqE,EAAU/gE,KACN,OAGG+gE,EAAUziC,KAAK,OAE1B,EA5IA,CAAyC,EAAA2hC,QAA5B,EAAAG,uB,0kBChDb,cACA,UACA,UACA,UACA,UAGA,UACA,UACA,SACA,UAEA,yE,OAKU,EAAAa,cAAgB,IAAI,EAAAC,mBAEpB,EAAAC,OAAS,IAAI,EAAAC,kBACb,EAAAC,cAAgB,IAAI,EAAAH,mB,EAuF9B,OA/FqC,OAUnC,YAAAr1C,IAAA,SAAI0xC,EAAyC9I,GAC3C,IAAME,EAAiB4I,EAAiBxc,QAAQ4T,eAC1C2M,EAAS7M,EAAO,GAAGjc,KAAKx/C,QACxBuoE,EAAS9M,EAAO,GAAGjc,KAAKx/C,QAE9B,GAAgC,IAA5B8X,KAAK0wD,YAAY1oE,OACnB,IAAK,IAAIrC,EAAI,EAAGA,EAAI8qE,EAAOzoE,SAAUrC,EACnCqa,KAAK0wD,YAAYxhE,KAAKuhE,EAAO9qE,IAgBjC,GAbA,EAAAgrE,aAAaC,yBACTjN,EAAO,GAAGjc,KAAM1nC,KAAKw4C,QAASx4C,KAAK6wD,UAAW7wD,KAAK0wD,YAAa1wD,KAAK8wD,KAAM9wD,KAAK+wD,SACpF,EAAAzb,OAAOE,QACH,OACA,WAAWx1C,KAAK+wD,QAAO,eAAe/wD,KAAK6wD,UAAS,WAAW7wD,KAAKgxD,MAAK,iBACrEhxD,KAAK0wD,YAAW,UAAU1wD,KAAK8wD,KAAI,aAAa9wD,KAAKw4C,SAExDx4C,KAAK0sD,cACR1sD,KAAK0sD,YAAc,EAAA5D,UAAUmI,gBAAgBT,EAAQC,EAAQzwD,KAAK6wD,UAAW7wD,KAAK8wD,KAAM9wD,KAAKw4C,eAE3Et9B,IAAhBlb,KAAKkxD,SACPlxD,KAAKkxD,OAAS,IAAI,EAAAC,kBAAkBnxD,KAAK0sD,YAAa+D,EAAQzwD,KAAK6wD,UAAW7wD,KAAK8wD,KAAM9wD,KAAKw4C,UAE5Fx4C,KAAKoxD,WAAY,CACnB,IAAMxlD,EAAa,IAAI,EAAA+lC,eAAUz2B,GACjCtP,EAAW3f,IAAI,wBAAyB,SAAW+T,KAAe,YAClEA,KAAKqwD,OAAO5b,WAAW7oC,GAGzB,IAAM69B,EACF,IAAI,EAAAF,OAAO,CAAC,GAAI,aAASruB,OAAWA,EAAW,IAAIzuB,WAAW,CAACgkE,EAAO,GAAIA,EAAO,GAAKA,EAAO,GAAKA,EAAO,MACxGzwD,KAAKqxD,YACRrxD,KAAKqxD,UAAY,GACjBrxD,KAAKu2C,YAAc,GACnBv2C,KAAKu2C,YAAY,GAAKv2C,KAAKkxD,OAAOnN,kBAAkB0I,EAAkB,CAAC9I,EAAO,GAAIA,EAAO,KACzF3jD,KAAKqxD,UAAU,GAAKxN,EAAe9Z,MAAM/pC,KAAKu2C,YAAY,IAE1Dv2C,KAAKu2C,YAAY,GAAKv2C,KAAKmwD,cAAcpM,kBAAkB0I,EAAkB,CAAC9I,EAAO,GAAIla,IACzFzpC,KAAKqxD,UAAU,GAAKxN,EAAe9Z,MAAM/pC,KAAKu2C,YAAY,KAI5D,IAAM+a,EAAgBtxD,KAAKkxD,OAAOhN,cAAcuI,EAAkBzsD,KAAKu2C,YAAY,GAAI,CAACoN,EAAO,GAAIA,EAAO,KAC1G8I,EAAiBnI,0BAA0BtkD,KAAKqxD,UAAU,GAAIC,GAC9DzN,EAAe9oC,IAAI/a,KAAKqxD,UAAU,GAAIC,GACtC,IAAMC,EAAeD,EAAclN,kBAAkBC,OAG/CmN,EACFxxD,KAAKmwD,cAAcjM,cAAcuI,EAAkBzsD,KAAKu2C,YAAY,GAAI,CAACoN,EAAO,GAAIla,IACxFgjB,EAAiBnI,0BAA0BtkD,KAAKqxD,UAAU,GAAIG,GAC9D3N,EAAe9oC,IAAI/a,KAAKqxD,UAAU,GAAIG,GACtC,IAAMC,EAAiBD,EAAqBpN,kBAAkBC,OAGxDqN,EAA6B,IAAlB/N,EAAO37D,OACxB,EAAAu0B,OAAOvc,KAAKqxD,UAAUrpE,OAAS,GAAG,WAAM,+CACV,IAA1BgY,KAAKqxD,UAAUrpE,SACjBgY,KAAKu2C,YAAY,GAAKv2C,KAAKqwD,OAAOtM,kBAC9B0I,EAAkBiF,EAAU,CAACD,EAAgBF,EAAc5N,EAAO,IAAM,CAAC8N,EAAgBF,IAC7FvxD,KAAKqxD,UAAU,GAAKxN,EAAe9Z,MAAM/pC,KAAKu2C,YAAY,KAE5D,IAAMob,EAAgB3xD,KAAKqwD,OAAOnM,cAC9BuI,EAAkBzsD,KAAKu2C,YAAY,GACnCmb,EAAU,CAACD,EAAgBF,EAAc5N,EAAO,IAAM,CAAC8N,EAAgBF,IAC3E9E,EAAiBnI,0BAA0BtkD,KAAKqxD,UAAU,GAAIM,GAC9D9N,EAAe9oC,IAAI/a,KAAKqxD,UAAU,GAAIM,GACtC,IAAMC,EAAeD,EAAcvN,kBAAkBC,OAG/CwN,EAAoB,IAAI,EAAAtoB,OAC1B,CAACvpC,KAAK0sD,YAAY1kE,QAAS,aAASkzB,OAAWA,EAC/C,IAAIzuB,WAAW,CAACuT,KAAK0sD,YAAY,GAAI1sD,KAAK0sD,YAAY,GAAI1sD,KAAK0sD,YAAY,GAAI1sD,KAAK0sD,YAAY,MAEpG,EAAAnwC,OAAOvc,KAAKqxD,UAAUrpE,OAAS,GAAG,WAAM,+CACV,IAA1BgY,KAAKqxD,UAAUrpE,SACjBgY,KAAKu2C,YAAY,GAAKv2C,KAAKuwD,cAAcxM,kBAAkB0I,EAAkB,CAACmF,EAAcC,IAC5F7xD,KAAKqxD,UAAU,GAAKxN,EAAe9Z,MAAM/pC,KAAKu2C,YAAY,KAE5D,IAAMub,EACF9xD,KAAKuwD,cAAcrM,cAAcuI,EAAkBzsD,KAAKu2C,YAAY,GAAI,CAACqb,EAAcC,IAG3F,OAFApF,EAAiBnI,0BAA0BtkD,KAAKqxD,UAAU,GAAIS,GAC9DjO,EAAe9oC,IAAI/a,KAAKqxD,UAAU,GAAIS,GAC/B,CAACA,EAAqB1N,kBAAkBC,SAEnD,EA/FA,CAAqC,EAAA0N,MAAxB,EAAAC,mB,4gCCXb,cACA,UAEA,UACA,UAKA,UACA,UAEA,cAKE,mBACE,cAAO,K,OACP,EAAKC,wBAA0B,IAAIC,EACnC,EAAKC,iBAAmB,IAAIC,EAC5B,EAAKC,eAAiB,IAAI,EAAAL,gB,EAoC9B,OA7C+B,OAY7B,YAAAvd,WAAA,SAAW7oC,GACT,YAAM6oC,WAAU,UAAC7oC,GACjB5L,KAAKiyD,wBAAwBxd,WAAW7oC,GACxC5L,KAAKmyD,iBAAiB1d,WAAW7oC,GACjC5L,KAAKqyD,eAAe5d,WAAW7oC,IAGjC,YAAAmP,IAAA,SAAI0xC,EAAyC9I,GAC3C,IAAM2O,EAAW7F,EAAiBxc,QAAQkF,KAC1C,OAAIn1C,KAAKgxD,MAAQ,EACRhxD,KAAKiyD,wBAAwBl3C,IAAI0xC,EAAkB9I,GACjD2O,GAAsC,IAA1B3O,EAAO,GAAGjc,KAAK1/C,QAAsC,IAAtB27D,EAAO,GAAGjc,KAAK,GAC5D1nC,KAAKqyD,eAAet3C,IAAI0xC,EAAkB9I,GAE1C3jD,KAAKmyD,iBAAiBp3C,IAAI0xC,EAAkB9I,IAIhD,EAAAsN,gBAAP,SACIhD,EAAsByC,EAAuBG,EAAqB0B,EAClE/Z,G,MACIga,EAAYvE,EAAW,GACvBwE,EAAoBxE,EAAW/lE,MAAM,GACrCwqE,EAAcD,EAAkBzqE,OAChC2qE,EAAcjC,EAAY,GAE1BkC,EADqBlC,EAAYxoE,MAAM,GACCyrD,KAAI,SAAC1sD,EAAGtB,GAAM,OAAAsB,GAAKA,EAAI,IAAM4pE,EAAUlrE,GAAK,MAEpFktE,EAD2BJ,EAAkB9e,KAAI,SAAC1sD,EAAGtB,GAAM,OAAAsB,EAAIsrE,EAAW5sE,GAAK4sE,EAAW5sE,EAAI+sE,MAEvE/e,KAAI,SAAC1sD,EAAGtB,GAAM,OAAAyf,KAAK+pB,OAAOloC,EAAI2rE,EAAmBjtE,GAAK6yD,EAAQ7yD,IAAM6yD,EAAQ7yD,OAEzG,OADoB,GAAC6sE,EAAWG,IAAaG,OAAM,eAAID,MAG3D,EA7CA,CAA+B,EAAAd,MAAlB,EAAAjJ,YA+Cb,+B,+CAmFA,OAnF8C,OAC5C,YAAA/tC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAGpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM+N,EAAU/N,EAAO37D,OAAS,EAC1B+qE,EAAcrB,EAAU,oCAAsC,GAC9DsB,EAASrP,EAAO,GAAGjc,KAAKx/C,QACxB+qE,EAAStP,EAAO,GAAGjc,KAAKx/C,QACxBgrE,EAAyBD,EAAO,GAAKjzD,KAAKgxD,MAEhD,GAAgC,IAA5BhxD,KAAK0wD,YAAY1oE,OACnB,IAAK,IAAIrC,EAAI,EAAGA,EAAIstE,EAAOjrE,SAAUrC,EACnCqa,KAAK0wD,YAAYxhE,KAAK+jE,EAAOttE,IAGjC,EAAAgrE,aAAaC,yBACTjN,EAAO,GAAGjc,KAAM1nC,KAAKw4C,QAASx4C,KAAK6wD,UAAW7wD,KAAK0wD,YAAa1wD,KAAK8wD,KAAM9wD,KAAK+wD,SACpF,EAAAzb,OAAOE,QACH,OACA,WAAWx1C,KAAK+wD,QAAO,eAAe/wD,KAAK6wD,UAAS,WAAW7wD,KAAKgxD,MAAK,iBACrEhxD,KAAK0wD,YAAW,UAAU1wD,KAAK8wD,KAAI,aAAa9wD,KAAKw4C,SAC7D,IAAMkU,EAAc5D,EAAUmI,gBAAgB+B,EAAQC,EAAQjzD,KAAK6wD,UAAW7wD,KAAK8wD,KAAM9wD,KAAKw4C,SACxFI,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SAEjD,EAAwC,EAAAsnD,qBAAqBnzD,KAAKoxD,YAAjEgC,EAAkB,qBAAEC,EAAe,kBAEpCxS,EAAe,qCACS7gD,KAAKw4C,QAAQ,GAAE,KAAKx4C,KAAKw4C,QAAQ,GAAE,oCACtCx4C,KAAK8wD,KAAK,GAAE,KAAK9wD,KAAK8wD,KAAK,GAAE,WACtDsC,EAAkB,+NAMgBF,EAAsB,8EAGhBD,EAAO,GAAE,6DACdA,EAAO,GAAE,2DACRA,EAAO,GAAE,mEACDjzD,KAAK6wD,UAAU,GAAE,gDAEzBmC,EAAO,GAAE,sFAITC,EAAO,GAAE,kEACDjzD,KAAK6wD,UAAU,GAAE,8CACzBmC,EAAO,GAAE,8QAU3CD,EAAW,WACXM,EAAe,WACfza,EAAK73B,OAAM,uCAGf,MAAO,CACLk4B,aAAc0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAC/DyxD,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU4Y,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KAC/C7Q,aAAY,EACZC,SAAS,IAIb,YAAAoD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OACjG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EAnFA,CAA8C,EAAAgF,MAAjC,EAAAG,2BAqFb,6E,OAuQY,EAAAoB,SAAW,EACX,EAAAC,UAAY,G,EACxB,OAzQuC,OACrC,YAAAx4C,IAAA,SAAI0xC,EAAyC9I,GAC3C,IAAME,EAAiB4I,EAAiBxc,QAAQ4T,eAChD,IAAK7jD,KAAKqxD,UAAW,CACnBrxD,KAAKqxD,UAAY,GAEjB,IADA,IAAMpmD,EAAejL,KAAKwzD,uBAAuB/G,EAAkB9I,GAC1Dh+D,EAAI,EAAGA,EAAIslB,EAAajjB,SAAUrC,EAAG,CAC5C,IAAMi+D,EAAW6I,EAAiBxc,QAAQ4T,eAAe9Z,MAAM9+B,EAAatlB,IAC5Eqa,KAAKqxD,UAAUniE,KAAK00D,IAGxB,IAAM6P,EAAezzD,KAAK0zD,mBAAmBjH,EAAkBzsD,KAAKqxD,UAAU1d,KAAI,SAAApuD,GAAK,OAAAA,EAAEgxD,eAAcoN,GAIvG,OAHA8I,EAAiBnI,0BAA0BtkD,KAAKqxD,UAAU,GAAIoC,EAAa,IAC3E5P,EAAe9oC,IAAI/a,KAAKqxD,UAAU,GAAIoC,EAAa,IACnD5P,EAAe9oC,IAAI/a,KAAKqxD,UAAU,GAAIoC,EAAa,IAC5C,CAACA,EAAa,GAAGrP,kBAAkBC,SAE5C,YAAAmP,uBAAA,SAAuB/G,EAAyC9I,GAC9D,IAAM6M,EAAS7M,EAAO,GAAGjc,KAAKx/C,QACxBuoE,EAAS9M,EAAO,GAAGjc,KAAKx/C,QAE9B,GAAgC,IAA5B8X,KAAK0wD,YAAY1oE,OAEnB,IADA,IAAM2rE,EAAQhQ,EAAO,GAAGjc,KACf/hD,EAAI,EAAGA,EAAIguE,EAAM3rE,SAAUrC,EAClCqa,KAAK0wD,YAAYxhE,KAAKykE,EAAMhuE,IAGhC,EAAAgrE,aAAaC,yBACTjN,EAAO,GAAGjc,KAAM1nC,KAAKw4C,QAASx4C,KAAK6wD,UAAW7wD,KAAK0wD,YAAa1wD,KAAK8wD,KAAM9wD,KAAK+wD,SACpF,EAAAzb,OAAOE,QACH,OACA,WAAWx1C,KAAK+wD,QAAO,eAAe/wD,KAAK6wD,UAAS,WAAW7wD,KAAKgxD,MAAK,iBACrEhxD,KAAK0wD,YAAW,UAAU1wD,KAAK8wD,KAAI,aAAa9wD,KAAKw4C,SAC7D,IAAMkU,EAAc5D,EAAUmI,gBAAgBT,EAAQC,EAAQzwD,KAAK6wD,UAAW7wD,KAAK8wD,KAAM9wD,KAAKw4C,SACxFob,EAAoB5zD,KAAK6zD,wBAAwBpH,EAAkB9I,EAAQ+I,GAGjF,MAAO,CAACkH,EADJ5zD,KAAK8zD,4BAA4BrH,EAAkBmH,EAAkBtd,aAAcqN,EAAQ+I,KAGjG,YAAAgH,mBAAA,SAAmBjH,EAAyCxhD,EAA6B04C,GAEvF,IAAMp5D,EAAIo5D,EAAO,GACXl8D,EAAIk8D,EAAO37D,QAAU,EAAI27D,EAAO,QAAKzoC,EACvC64C,EAAMtH,EAAiB5H,eAAet6D,EAAEu6D,QAC5C,IAAKiP,EAAK,CACR,EAAAze,OAAOE,QAAQ,OAAQ,uEACvB,IAAMwe,EACF5B,EAAkB6B,wBAAwB1pE,EAAEm9C,KAAKx/C,QAAS8X,KAAKgxD,MAAO,EAAGzmE,EAAEo9C,WAE/EosB,EAAMtH,EAAiBnH,sCACnBr6C,EAAa,GAAGguC,aAAa,GAAI1uD,EAAEq3B,KAAMoyC,EAAezpE,GAE9D,IAAM2pE,EAAiB,CACrB3P,kBAAmB,CAACkI,EAAiB9H,uBAAuBhB,EAAO,KACnES,kBAAmBqI,EAAiBpH,4BAA4Bp6C,EAAa,GAAGqrC,aAAcqN,EAAO,GAAG/hC,MACxGmrC,YAAa,IAETF,EAAW,CAACqH,EAAe9P,kBAAmB2P,GAsCpD,OArCItsE,GACFolE,EAAS39D,KAAKu9D,EAAiB9H,uBAAuBl9D,IAoCjD,CAACysE,EAjCkB,CACxB3P,kBAAmBsI,EACnBzI,kBAHeqI,EAAiBpH,4BAA4Bp6C,EAAa,GAAGqrC,aAAcqN,EAAO,GAAG/hC,MAIpGmrC,YAAa,GACboH,KAAM,SAAC/e,EAAyBwO,GAM9B,IALA,IAAMwQ,EAAKhf,EAAUgf,GACfC,EAAYzQ,EAASrN,YAAYzpB,OAAQunC,UACzCC,EAAoB1Q,EAASrN,YAAYzpB,OAAQwnC,kBACjDC,EAA0B3Q,EAAS4Q,iBAAiBC,MAAK,SAAAtuE,GAAK,MAAW,oBAAXA,EAAE8mB,QAA6B3jB,SAC/ForE,GAAQ,EACH,EAAI,EAAG,EAAIL,EAAW,GAAKC,EAClC,EAAAhf,OAAOE,QAAQ,WAAY,OAAO,EAAC,gBAAgB6e,EAAS,gBAAgBC,GACxE,IAAMA,IACRI,GAAQ,EACRN,EAAGO,OAAOP,EAAGQ,OACbxf,EAAUyf,aACVT,EAAGU,cAAcV,EAAGW,UACpB3f,EAAUyf,aACVT,EAAGY,UAAUZ,EAAG/2B,IAAK+2B,EAAG/2B,KACxB+X,EAAUyf,cAGZT,EAAGa,UAAUV,EAAyB,GACtCnf,EAAUyf,aACVzf,EAAU+e,OAGRO,IACFN,EAAGc,QAAQd,EAAGQ,OACdxf,EAAUyf,kBAMlB,YAAAhB,wBAAA,SAAwBpH,EAAyC9I,EAAkB+I,GAEjF,IAAM8D,EAAS7M,EAAO,GAAGjc,KAAKx/C,QACxBuoE,EAAS9M,EAAO,GAAGjc,KAAKx/C,QAExBqwD,EAAOmU,EAAY1kE,OACnBmtE,EAAa/C,EAAkBgD,eAAe5E,EAAQC,EAAQ/D,EAAa,GAC3EpW,EAAemW,EAAiB1H,6BAClCoQ,EAAY,EAAG,CAACA,EAAW,GAAIA,EAAW,GAAIA,EAAW,GAAoB,EAAhBA,EAAW,IAAS,CAACE,UAAW,IAE3FxU,EAAe,0BACF2P,EAAO,GAAE,2BACTA,EAAO,GAAE,2BACTA,EAAO,GAAE,2BACTxwD,KAAK0wD,YAAY,GAAE,2BACnB1wD,KAAK0wD,YAAY,GAAE,kCACZ1wD,KAAK6wD,UAAU,GAAE,kCACjB7wD,KAAK6wD,UAAU,GAAE,gCACnB7wD,KAAKw4C,QAAQ,GAAE,gCACfx4C,KAAKw4C,QAAQ,GAAE,6BAClBx4C,KAAK8wD,KAAK,GAAE,6BACZ9wD,KAAK8wD,KAAK,GAAE,8IAIJvY,EAAI,ylBAajBiY,EAAOxoE,OAAM,6VAiB7B,MAAO,CACLilB,KAAM,SACNgsC,aAAc,CAACwT,EAAiB1H,6BAA6ByL,IAC7Dla,aAAY,EACZwC,SAAU,CAAC,KACX+H,aAAY,IAGhB,YAAAiT,4BAAA,SACIrH,EAAyC6I,EAA6B3R,EACtE+I,GACF,IAMI6I,EANE/E,EAAS7M,EAAO,GAAGjc,KAAKx/C,QACxBuoE,EAAS9M,EAAO,GAAGjc,KAAKx/C,QACxBstE,EAAsB,CAAC/E,EAAO,GAAIrrD,KAAKuO,KAAM68C,EAAO,GAAKC,EAAO,GAAKA,EAAO,GAAM,IAClFgF,EAAUhJ,EAAiB1H,6BAC7ByQ,EAAqB,EAAG,CAACA,EAAoB,GAA6B,EAAzBA,EAAoB,IAAS,CAACH,UAAW,IAGxF9c,EAAOmU,EAAY1kE,OAEnBixD,EAAe,CAACqc,EAAcG,GACd,IAAlB9R,EAAO37D,SACTutE,EAAU9I,EAAiB1H,6BAA6BpB,EAAO,GAAGjc,KAAKx/C,SACvE+wD,EAAa/pD,KAAKqmE,IAEpB,IAAMjf,EAAemW,EAAiB1H,6BAA6B2H,GAC7DgJ,EAAa/R,EAAO37D,OAAS,EAAK,MAAQ,QAC1CqsE,EAAYiB,EAAa7rB,MAAM,GAE/B6qB,EADe7H,EAAiBxc,QAAQuE,QAAQY,UAAUugB,mBAAqB31D,KAAKoxD,YAChD3E,EAAiBxc,QAAQuE,QAAQS,mBACvEj1C,KAAK41D,sBAAsBnJ,EAAiBxc,QAAQuE,QAAQS,mBAAoBof,GAChFA,EACEvb,EAAW,CAAC,SAAU,KACN,IAAlB6K,EAAO37D,QACT8wD,EAAS5pD,KAAK,KAGV,MAAwC,EAAAikE,qBAAqBnzD,KAAKoxD,YAAjEgC,EAAkB,qBAAEC,EAAe,kBAEpCza,EAAO,EAAAvB,QAAQoV,EAAiBxc,QAAQuE,QAAQY,UAAUvpC,SAC1Dg1C,EAAe,SACnBuS,EAAkB,mCACQ7a,EAAI,qEAGjB+c,EAAa7rB,MAAMzhD,OAAM,yIAILstE,EAAa9c,QAAQ,GAAE,kBACtD8c,EAAa9c,QAAQ,GAAE,kBAAkB8c,EAAa9c,QAAQ,GAAE,8DAChCid,EAAQjd,QAAQ,GAAE,mEACbkd,EAAS,sCAC1BpB,EAAiB,sEACcgB,EAAa7sD,MAAK,KAAK6sD,EAAa5sD,OAAM,gEAC1C+sD,EAAQhtD,MAAK,KAAKgtD,EAAQ/sD,OAAM,4BACpEkwC,EAAKC,UAAS,2BAA2BD,EAAKC,UAAS,yFAItEwa,EAAe,+BAGnB,MAAO,CACLpmD,KAAM,aACNgsC,aAAgC,IAAlB0K,EAAO37D,OAAe,CAACstE,EAAcG,EAASF,GAAY,CAACD,EAAcG,GACvFnf,aAAY,EACZuK,aAAY,EACZ/H,SAAQ,EACRqI,UAAW,CAAC,CAACl0C,KAAM,kBAAmB2U,KAAM,QAC5CkL,OAAQ,CAACunC,UAAS,EAAEC,kBAAiB,KAGlC,EAAAL,wBAAP,SAA+BxqB,EAAiBunB,EAAe5K,EAAkByP,GAC/E,GAAc,IAAV7E,IAA6B,IAAb5K,GAAmB3c,EAAM,GAAKA,EAAM,GAAM2c,GAAa,GACzE,OAAOyP,EAOT,IALA,IAAMC,EAAiBrsB,EAAM,GACvBssB,EAAatsB,EAAM,GAAKA,EAAM,GAAKA,EAAM,GACzCusB,EAAa5wD,KAAKuO,KAAKoiD,EAAa/E,EAAQ5K,GAAYA,EAExDrhE,EAAS,IAAIiI,aADH8oE,EAAiBE,GAExB/vE,EAAI,EAAGA,EAAI6vE,IAAkB7vE,EAAG,CACvC,IAAMgwE,EAAYhwE,EAAI8vE,EAChBxuC,EAAYthC,EAAI+vE,EAAa/vE,EAAI+qE,EAAQ+E,EAC/ChxE,EAAOkH,IAAI4pE,EAAOr4C,SAASy4C,EAAWA,EAAYF,GAAaxuC,GAEjE,OAAOxiC,GAEF,EAAAqwE,eAAP,SAAsBnH,EAAsByC,EAAuBhE,EAAuBtG,GACxF,YADwF,IAAAA,MAAA,GACjF,CACLsG,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAC5CtnD,KAAKuO,KAAKs6C,EAAW,GAAKyC,EAAY,GAAKA,EAAY,GAAKtK,KAItD,YAAAwP,sBAAV,SAAgCM,EAA4B7B,GAC1D,OAAI6B,GAAsB,GAAK7B,EAAY6B,GAAsB7B,EAAY6B,GAAuB,EAC3F7B,EAEF6B,GAEC,YAAAC,cAAV,SAAwB7f,GAGtB,KAAIA,EAAa5tC,OAFS,IAK1B,MAAO,CAJmB,GADA,KAU9B,EAzQA,CAAuC,EAAAqpD,MAA1B,EAAAK,qB,4kBCjJb,cACA,UAKA,SACA,UAEA,2B,+CAoEA,OApEuC,OAKrC,YAAAr3C,IAAA,SAAI0xC,EAAyC9I,GAC3C,IAAME,EAAiB4I,EAAiBxc,QAAQ4T,eAC1CuS,EAA8B,QAAdp2D,KAAKujB,KAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3E8yC,EAAkC,QAAdr2D,KAAKujB,KAC3B,CACEogC,EAAO,GAAGjc,KAAK,GAAI1nC,KAAKs2D,UAAWt2D,KAAKs2D,UAAW3S,EAAO,GAAGjc,KAAK,GAAK1nC,KAAKu2D,aAAc5S,EAAO,GAAGjc,KAAK,GACzGic,EAAO,GAAGjc,KAAK,IAEjB,CACEic,EAAO,GAAGjc,KAAK,GAAIic,EAAO,GAAGjc,KAAK,GAAK1nC,KAAKu2D,aAAcv2D,KAAKs2D,UAAWt2D,KAAKs2D,UAAW3S,EAAO,GAAGjc,KAAK,GACzGic,EAAO,GAAGjc,KAAK,IAGf+V,EAAY,IAAI,EAAA4O,eAChBzgD,EAAa,IAAI,EAAA+lC,eAAUz2B,GACjCtP,EAAW3f,IAAI,OAAQ,OAAQmqE,GAC/B3Y,EAAUhJ,WAAW7oC,GAIrB,IAAM4qD,EAAsB,EAAAC,QAAQhK,EAAkB9I,EAAO,GAAI0S,GAG5Dr2D,KAAK02D,uBACR12D,KAAK02D,qBAAuBjZ,EAAUsG,kBAAkB0I,EAAkB,CAAC+J,IAC3Ex2D,KAAK22D,kBAAoB9S,EAAe9Z,MAAM/pC,KAAK02D,uBAErD,IAAME,EACFnZ,EAAUyG,cAAcuI,EAAkBzsD,KAAK02D,qBAAsB,CAACF,IAC1E/J,EAAiBnI,0BAA0BtkD,KAAK22D,kBAAmBC,GACnE/S,EAAe9oC,IAAI/a,KAAK22D,kBAAmBC,GAC3C,IAAMC,EAAkBD,EAAiBxS,kBAAkBC,OAO3D,MAAO,CAJQ,EAAAoS,QAAQhK,EAAkBoK,EAAiB,CACxDlT,EAAO,GAAGjc,KAAK,GAAIic,EAAO,GAAGjc,KAAK,GAAK1nC,KAAKu2D,aAAc5S,EAAO,GAAGjc,KAAK,GAAK1nC,KAAKs2D,UACnF3S,EAAO,GAAGjc,KAAK,GAAK1nC,KAAKs2D,cAKnB,YAAAQ,YAAV,SAAsBxwB,GACpB,IAAMksB,EAAYlsB,EAAMoB,KAAK,GACvBqvB,EAAazwB,EAAMoB,KAAK,GACxBsvB,EAAc1wB,EAAMoB,KAAK,GACzBuvB,EAAa3wB,EAAMoB,KAAK,GAC9B,GAAIqvB,EAAc/2D,KAAiB,cAAM,EACvC,MAAM,IAAIpS,MAAM,uDAKlB,MAAO,CAAC4kE,EAHYuE,EAAa/2D,KAAKu2D,aACjBS,EAAch3D,KAAKs2D,UACpBW,EAAaj3D,KAAKs2D,YAIxC,YAAApS,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OACjG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EApEA,CAAuC,EAAAmK,cAA1B,EAAAhO,qB,ukBCTb,IAKA,2B,+CAaA,OAbkC,OAChC,YAAAnuC,IAAA,SAAI0xC,EAAyC9I,GAC3C,GAAI3jD,KAAKm3D,SACP,MAAO,CAACxT,EAAO,IAEjB,MAAM,IAAI/1D,MAAM,iDAElB,YAAAm2D,kBAAA,SAAkBqT,EAAiCC,GACjD,MAAM,IAAIzpE,MAAM,iDAElB,YAAAs2D,cAAA,SAAckT,EAAiCE,EAA2BD,GACxE,MAAM,IAAIzpE,MAAM,iDAEpB,EAbA,CALA,QAKkC2pE,SAArB,EAAAtO,gB,mkBCLb,aAEA,UAIA,2B,+CA6BA,OA7B8B,OAC5B,YAAAluC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM+I,EAAc/I,EAAO,GAAGjc,KAAKx/C,QAC7B0wD,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjDg1C,EAAe,4CAELjI,EAAKC,UAAS,8BACxBD,EAAK73B,OAAM,0CAA0C/gB,KAAKsN,MAAMkqD,gBAAe,gDAGrF,MAAO,CACLve,aAAc,CAAClI,EAAQkU,yBAAyBtB,EAAO,KACvDrN,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,KACX+H,aAAY,EACZC,SAAS,IAGb,YAAAoD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KACrF,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EA7BA,CAA8B,EAAA0K,KAAjB,EAAArO,Y,ukBCNb,cAEA,UAGA,SAEA,2B,+CAMA,OANkC,OAChC,YAAAruC,IAAA,SAAI0xC,EAAyC9I,GAC3C,IAAM+T,EAAa,EAAAnd,UAAUod,aAAahU,EAAO,GAAGjc,KAAM1nC,KAAKkuD,MAE/D,MAAO,CAAC,EAAAuI,QAAQhK,EAAkB9I,EAAO,GAAI+T,KAEjD,EANA,CAAkC,EAAAE,SAArB,EAAAtO,gB,iHCPb,cAEA,gCAAqC8H,GACnC,IAAIgC,EAAqB,GACrByE,EAAiB,GACrB,OAAQzG,GACN,IAAK,OACHyG,EAAiB,EAAAzM,WAAWn+C,KAC5BmmD,EAAqB,EAAAhI,WAAW/N,KAChC,MACF,IAAK,UACHwa,EAAiB,EAAAtM,cAAct+C,KAC/BmmD,EAAqB,EAAA7H,cAAclO,KACnC,MACF,QAEEwa,EAAiB,GACjBzE,EAAqB,GAKzB,MAAO,CAACA,mBAAkB,EAAEC,gBAHJjC,EAAa,eAC3ByG,EAAc,WACa,M,skBCrBvC,cAEA,UAIA,2B,+CA4DA,OA5DiC,OAC/B,YAAA98C,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAGpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAOhD,IANA,IAAMsK,EAAatK,EAAO,GAAGjc,KAAKx/C,QAC5B4vE,EAAiBnU,EAAO,GAAGjc,KAAKx/C,QAChCwkE,EAAc,IAAI14C,MAAMi6C,EAAWjmE,OAAS8vE,EAAe9vE,OAAS,GAEpEkmE,EAAO,EAAA3T,UAAUwd,cAAc/3D,KAAKkuD,KAAMD,EAAWjmE,QACrDgwE,EAAyB,GACtBryE,EAAI,EAAGA,EAAI+mE,EAAY1kE,OAAQrC,IAMlCA,EAAIuoE,GACNxB,EAAY/mE,GAAKsoE,EAAWtoE,GAC5BqyE,EAAa9oE,KAAK,YAAYvJ,EAAC,iBAAiBA,EAAC,OAE7CA,EAAIuoE,EAAO4J,EAAe9vE,QAC5B0kE,EAAY/mE,GAAKmyE,EAAenyE,EAAIuoE,GACpC8J,EAAa9oE,KAAK,iBAAgBvJ,EAAIuoE,GAAI,iBAAiBvoE,EAAC,QAE5D+mE,EAAY/mE,GAAKsoE,EAAWtoE,EAAImyE,EAAe9vE,OAAS,GACxDgwE,EAAa9oE,KAAK,aAAYvJ,EAAImyE,EAAe9vE,OAAS,GAAC,iBAAiBrC,EAAC,OAKnF,IAGMk7D,EAAe,wCAHP6L,EAAY1kE,QAAU,GAIC,8BAHvBimE,EAAWjmE,OAID,iCAHT8vE,EAAe9vE,QAAU,GAIX,6CAEvBgwE,EAAaxqC,KAAK,cAAa,gEAEtB0gC,EAAI,uBAAuBD,EAAWC,GAAK,iDAG1D,MAAO,CACLjV,aAAc0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAC/DyxD,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,IAAK,KAChB+H,aAAY,IAGhB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OACjG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EA5DA,CAAiC,EAAAkL,QAApB,EAAAzO,e,i3BCNb,cAEA,UAIA,2B,+CAsEA,OAtE+B,OAC7B,YAAAzuC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkB0I,EAAyC9I,GACzD,IAAMuU,EAASvU,EAAO,GAAGjc,KAAKx/C,QACxBiwE,EAASxU,EAAO,GAAGjc,KAAKx/C,QACxB,IAAS,EAAAkwE,SAASC,qBACpBH,EAAQl4D,KAAKs4D,OAAQH,EAAQn4D,KAAKu4D,OAA0B,IAAlB5U,EAAO37D,OAAe27D,EAAO,GAAGjc,UAAOxsB,GAAU,GACzFs9C,EAAS,CAFP,KAAG,MAGX,IAAKA,EACH,MAAM,IAAI5qE,MAAM,uCAElB,IAAIymE,EAAY6D,EAAOA,EAAOlwE,OAAS,GACnCywE,EAAO,GACPz4D,KAAKs4D,SACPjE,EAAY6D,EAAO,IAEjBl4D,KAAKs4D,QAAUt4D,KAAKu4D,OACtBE,EAAO,8BACEz4D,KAAKs4D,SAAWt4D,KAAKu4D,OAC9BE,EAAO,6BACGz4D,KAAKs4D,QAAUt4D,KAAKu4D,OAC9BE,EAAO,4BACGz4D,KAAKs4D,QAAWt4D,KAAKu4D,SAC/BE,EAAO,2BAET,IAAMlgB,EAAOigB,EAAOxwE,OAId64D,EAAe,qCACStI,EAAI,yBACpBA,EAAI,uBACJA,EAAI,kBANiB,IAAlBoL,EAAO37D,OAAe,SAAS27D,EAAO,GAAGjc,KAAK1/C,OAAM,KAAO,IAO5D,kFANqB,IAAlB27D,EAAO37D,OAAe,8BAAgC,IAUvD,+DAGMqsE,EAAS,8BACnB9b,EAAO,GAAC,4BACRA,EAAO,GAAC,yBACVkgB,EAAI,iEAfqB,IAAlB9U,EAAO37D,OAAe,yBAA2B,IAmBlD,qCAIlB,MAAO,CACLixD,aAFmB0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAA4nE,EAAiBxH,yBAAyBpgE,MAG7EyxD,aAAcmW,EAAiB1H,6BAA6ByT,GAC5D1f,SAA4B,IAAlB6K,EAAO37D,OAAe,CAAC,IAAK,IAAK,KAAO,CAAC,IAAK,KACxDm5D,UAAW,CAAC,CAACl0C,KAAM,QAAS2U,KAAM,SAAU,CAAC3U,KAAM,OAAQ2U,KAAM,UACjEi/B,aAAY,IAGhB,YAAAqD,cAAA,SAAcuI,EAAyClW,EAA0BoN,GAC/E,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAA8mE,EAAiB9H,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OAC1G,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBACIqI,EAAiBpH,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MAC9FmrC,YAAa,CAAC,MAAS/sD,KAAKsN,MAAO,KAAQtN,KAAK04D,QAGtD,EAtEA,CAA+B,EAAAC,MAAlB,EAAAlP,a,8GCHb,cAEA,aAOE,WACImP,EAA2BlI,EAAuBG,EAAqBC,EAAgBtY,GACzFx4C,KAAK44D,gBAAkBA,EACvB54D,KAAK0wD,YAAcA,EACnB1wD,KAAK6wD,UAAYA,EACjB7wD,KAAK8wD,KAAOA,EACZ9wD,KAAKw4C,QAAUA,EAmFnB,OAhFE,YAAAz9B,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkB0I,EAAyC9I,GACzD,GAAsB,IAAlBA,EAAO37D,OACT,MAAM,IAAI4F,MAAM,+CAalB,IAVA,IAAM4iE,EAAS7M,EAAO,GAAGjc,KAAKx/C,QACxB2wE,EAASlV,EAAO,GAAGjc,KAAKx/C,QAGxBqwD,EAAOv4C,KAAK44D,gBAAgB5wE,OAC5B8wE,EAAc,CAACD,EAAO,GAAKA,EAAO,GAAKA,EAAO,GAAI74D,KAAK44D,gBAAgB,GAAK54D,KAAK44D,gBAAgB,IACjGG,EAAaF,EAAO,GAAKA,EAAO,GAChCtK,EAAgB,EAAAC,oBAClBwK,EAAW,GAENC,EAAM,EAAGA,GAAO,EAAGA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,GAAO,EAAGA,IAC1BF,GAAY,mCACYE,EAAG,6BACVD,EAAG,kCAEAH,EAAY,GAAE,aAAaA,EAAY,GAAE,gDAC3B94D,KAAK44D,gBAAgBrgB,EAAO,GAAE,QAAQv4C,KAAKw4C,QAAQ,GAAE,MAAMx4C,KAAK8wD,KAAK,GAAE,iCACpF9wD,KAAK6wD,UAAU,GAAE,iBAAiBkI,EAAU,OAAOF,EAAO,GAAE,6BAEnErI,EAlBH,GAkBiB,4DACOxwD,KAAK44D,gBAAgBrgB,EAAO,GAAE,OAAOv4C,KAAKw4C,QAAQ,GAAE,MAAMx4C,KAAK8wD,KAAK,GAAE,mCAClF9wD,KAAK6wD,UAAU,GAAE,qBAAqBkI,EAAU,MAAMF,EAAO,GAAE,+BAEtErI,EArBL,GAqBmB,0DAECuI,EAAU,+EAEhB,EAANE,EAAUC,GAAG,kLAWpC,IAAMrY,EAAe,SACnB0N,EAAa,8LAOTyK,EAAQ,qDAId,MAAO,CACL/rD,KAAM,oBACNgsC,aAAc,CAACwT,EAAiBxH,yBAAyBtB,EAAO,GAAI,GAAG,EAAM6M,GAAQ,IACrFla,aACImW,EAAiB1H,6BAA6B+T,EAAa,EAAGA,EAAa,CAACtiB,UAAU,EAAM6P,WAAW,IAC3GvN,SAAU,CAAC,KACX+H,aAAY,EACZC,SAAS,EACT0D,oBAAoB,EACpBE,qBAAqB,IAGzB,YAAAR,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EACFlJ,EAAOhQ,KAAI,SAAC9uD,GAAM,OAAAksD,EAAQ4T,uBAAuB9/D,EAAGksD,EAAQkU,yBAAyBpgE,EAAG,GAAG,EAAO,IAAI,OAC1G,MAAO,CACL0/D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EAhGA,GAAa,EAAAoE,qB,2kBCLb,IAKA,2B,+CAmDA,OAnDsC,OACpC,YAAAp2C,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM+I,EAAc/I,EAAO,GAAGjc,KAAKx/C,QAC7BqwD,EAAOmU,EAAY1kE,OAEnB64D,EAAe,WADC7gD,KAAKm5D,oBAAoBn5D,KAAKo5D,KAAKpxE,QAExC,qCACauwD,EAAI,iFAGlC,MAAO,CACLU,aAAc,CAAClI,EAAQkU,yBAAyBtB,EAAO,KACvDrN,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,KACXqI,UAAW,CAAC,CAACl0C,KAAM,OAAQ2U,KAAM,QAAS+/B,YAAa3hD,KAAKo5D,KAAKpxE,QAAS,CAACilB,KAAM,QAAS2U,KAAM,UAChGi/B,aAAY,IAGhB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KACrF,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,CAAC,KAAQ/sD,KAAKo5D,KAAM,MAASp5D,KAAK2sD,SAG3C,YAAAwM,oBAAR,SAA4BE,GAE1B,IADA,IAAMpJ,EAAsB,CAAC,4BAA4BoJ,EAAW,qBAC3D1zE,EAAI,EAAGA,EAAI0zE,IAAe1zE,EACvB,IAANA,EACFsqE,EAAU/gE,KACN,oBACkBvJ,EAAC,mBAAmBA,EAAC,QAClCA,IAAM0zE,EAAc,EAC7BpJ,EAAU/gE,KACN,wBACsBvJ,EAAC,QAE3BsqE,EAAU/gE,KACN,yBACuBvJ,EAAC,mBAAmBA,EAAC,QAMpD,OAHAsqE,EAAU/gE,KACN,OAEG+gE,EAAUziC,KAAK,OAE1B,EAnDA,CALA,QAKsC8rC,aAAzB,EAAAxP,oB,qlBCLb,cAEA,UAIA,2B,+CA6IA,OA7IgD,OAC9C,YAAA/uC,IAAA,SAAI0xC,EAAyC9I,GAA7C,WACO3jD,KAAKqxD,YACRrxD,KAAKqxD,UAAY,GACIrxD,KAAKu5D,mBAAmB9M,EAAkB9I,GAClDj3C,SAAQ,SAAC6pC,GACpB,IAAMqN,EAAW6I,EAAiBxc,QAAQ4T,eAAe9Z,MAAMwM,GAC/D,EAAK8a,UAAUniE,KAAK00D,OAIxB,IAAM4V,EAAWx5D,KAAKy5D,eAAehN,EAAkBzsD,KAAKqxD,UAAU1d,KAAI,SAAApuD,GAAK,OAAAA,EAAEgxD,eAAcoN,GAE/F,OADA6V,EAAS9sD,SAAQ,SAACzlB,EAAGtB,GAAM,OAAA8mE,EAAiBxc,QAAQ4T,eAAe9oC,IAAI,EAAKs2C,UAAU1rE,GAAIsB,MACnF,CAACuyE,EAAS,GAAGpV,kBAAkBC,SAGxC,YAAAqV,gBAAA,SAAgB/V,GACd,QAAK,YAAM+V,gBAAe,UAAC/V,IAIG,IAA1BA,EAAO,GAAGjc,KAAK1/C,QAQrB,YAAA2xE,iCAAA,SAAiClN,EAAyCmN,GACxE,IAAMC,EAAQD,EAAQnwB,MAChBmlB,EAAUiL,EAAM,GAChBC,EAAcD,EAAM,GAAKA,EAAM,GAC/BnN,EAAc,CAACmN,EAAM,GAAIjL,GACzBmL,EAAsB,CAACF,EAAM,GAAc,EAAVjL,GAEjC/N,EAAe,yLAOAgZ,EAAM,GAAE,2DAENA,EAAM,GAAE,0IAMDC,EAAW,iDAEpBD,EAAM,GAAE,2DAENA,EAAM,GAAE,4KAORC,EAAW,+BAIlC,MAAO,CACL7gB,aAAc,CAAC2gB,GACftjB,aAAcmW,EAAiB1H,6BAA6B2H,EAAa,EAAGqN,GAC5EjhB,SAAU,CAAC,KACX+H,aAAY,EACZ5zC,KAAM,oBAIV,YAAA+sD,8BAAA,SACIvN,EAAyCmN,EAAwBK,EACjE1E,EAAwB2E,GAC1B,IAAMthB,EAAO,EAAAvB,QAAQoV,EAAiBxc,QAAQuE,QAAQY,UAAUvpC,SAC1Dg1C,EAAe,oJAGoBqZ,EAAsBzxD,MAAK,KAAKyxD,EAAsBxxD,OAAM,oBAC1FkwC,EAAKC,UAAS,ihBAmBzB,MAAO,CACLI,aAAc,CAAC2gB,EAASM,EAAuBD,EAAa1E,GAC5Djf,aAAcmW,EAAiB1H,6BAA6B6U,EAAQnwB,OACpEqP,SAAU,CAAC,IAAK,kBAAmB,QAAS,KAC5CqI,UAAW,CAAC,CAACl0C,KAAM,UAAW2U,KAAM,UACpCi/B,aAAY,EACZ5zC,KAAM,iBAGV,YAAAssD,mBAAA,SAAmB9M,EAAyC9I,GAC1D,IAAMiW,EAAUnN,EAAiBxH,yBAAyBtB,EAAO,IAC3DsW,EAAcxN,EAAiBxH,yBAAyBtB,EAAO,IAC/D4R,EAAU9I,EAAiBxH,yBAAyBtB,EAAO,IAC3DwW,EAA6Bn6D,KAAK25D,iCAAiClN,EAAkBmN,GAK3F,MADoC,CAACO,EAHJn6D,KAAKg6D,8BAClCvN,EAAkBmN,EAASK,EAAa1E,EAAS4E,EAA2B7jB,gBAKlF,YAAAmjB,eAAA,SAAehN,EAAyCxhD,EAA6B04C,GACnF,IAAMzb,EAAWyb,EAAO,GAAG/hC,KACrBw4C,EAAU3N,EAAiB9H,uBAAuBhB,EAAO,GAAI14C,EAAa,GAAGguC,aAAa,IAC1FohB,EAAU5N,EAAiB9H,uBAAuBhB,EAAO,GAAI14C,EAAa,GAAGguC,aAAa,IAC1FqhB,EAAM7N,EAAiB9H,uBAAuBhB,EAAO,GAAI14C,EAAa,GAAGguC,aAAa,IACtFugB,EAAsB,GAW5B,OAVAA,EAAStqE,KAAK,CACZq1D,kBAAmB,CAAC6V,GACpBhW,kBAAmBqI,EAAiBpH,4BAA4Bp6C,EAAa,GAAGqrC,aAAcpO,GAC9F6kB,YAAa,KAEfyM,EAAStqE,KAAK,CACZq1D,kBAAmB,CAAC6V,EAASZ,EAAS,GAAGpV,kBAAmBiW,EAASC,GACrElW,kBAAmBqI,EAAiBpH,4BAA4Bp6C,EAAa,GAAGqrC,aAAcpO,GAC9F6kB,YAAa,CAAC,QAAW/sD,KAAK4sD,WAEzB4M,GAGX,EA7IA,CAAgD,EAAAe,uBAAnC,EAAAxQ,8B,ykBCNb,cAEA,UAIA,2B,+CA6BA,OA7BoC,OAClC,YAAAhvC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM+I,EAAc/I,EAAO,GAAGjc,KAAKx/C,QAC7B0wD,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjDg1C,EAAe,4CAELjI,EAAKC,UAAS,8BACxBD,EAAK73B,OAAM,+BAA+B/gB,KAAKsN,MAAK,2BAG1D,MAAO,CACLwzC,SAAS,EACT7H,aAAc,CAAClI,EAAQkU,yBAAyBtB,EAAO,KACvDrN,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,KACX+H,aAAY,IAGhB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KACrF,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EA7BA,CAAoC,EAAAyN,WAAvB,EAAAxQ,kB,2kBCNb,cAEA,UACA,UAGA,UAEA,UAEA,2B,+CAiEA,OAjEuC,OACrC,YAAAjvC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM+N,EAAU/N,EAAO37D,OAAS,EAC1B+qE,EAAcrB,EAAU,kCAAoC,GAC5DwG,EAASvU,EAAO,GAAGjc,KACnBywB,EAASxU,EAAO,GAAGjc,KACnBglB,EAAc,EAAA1S,cAAcwT,UAAU0K,EAAQC,GAAQ,GAE5D,IAAKzL,EACH,MAAM,IAAI9+D,MAAM,yCAElB,IAAMymE,EAAY6D,EAAOA,EAAOlwE,OAAS,GACnCyyE,EAAiBr1D,KAAKuO,KAAK0gD,EAAY,GACvC5G,EAAQyK,EAAOlwE,OACf0lE,EAAQyK,EAAOnwE,OAEf4wD,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjD6uD,EAAiB,EAAAxgB,kBAAkBwS,EAAY1kE,QAC/C8xD,EAAU4S,EAAY1kE,OACtB0mE,EAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAE1C,EAAwC,EAAAyE,qBAAqBnzD,KAAKoxD,YAAjEgC,EAAkB,qBAAEC,EAAe,kBACpCxS,EAAe,WACjBuS,EAAkB,kCAEhBsH,EAAc,sDACGhM,EAAc5U,EAAU,GAAE,iBACxC4U,EAAc5U,EAAU,GAAE,SAAS4U,EAAc5U,EAAU,GAAE,iBAC7D4U,EAAc5U,EAAU,GAAE,8EAGT2gB,EAAc,qCAiC5C,SAAc/L,EAAyBnW,GAErC,IADA,IAAIxX,EAAM,GACDp7C,EAAI,EAAGA,EAAI4yD,EAAO,EAAG5yD,IAC5Bo7C,GAAO,MAAM2tB,EAAc/oE,GAAE,KAI/B,OAFAo7C,EAAO,MAAM2tB,EAAcnW,EAAO,GAA3B,SArCiBoiB,CAAKjM,EAAejB,GAAM,+BA0CpD,SAAciB,EAAyBnW,GAErC,IADA,IAAIxX,EAAM,GACDp7C,EAAI,EAAGA,EAAI4yD,EAAO,EAAG5yD,IAC5Bo7C,GAAO,MAAM2tB,EAAc/oE,GAAE,KAI/B,OAFAo7C,EAAO,YACG2tB,EAAcnW,EAAO,GA/CPqiB,CAAKlM,EAAehB,GAAM,0GAI1CqF,EAAW,aACXM,EAAe,aACfza,EAAK73B,OAAM,sBAEjB,MAAO,CACL9T,KAAM,oBACNgsC,aAAc0K,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQkU,yBAAyBpgE,EAAG,GAAG,EAAM8+D,EAAOh+D,GAAG+hD,MAAM,MAChG4O,aACIvF,EAAQgU,6BAA6B2H,EAAa,EAAGA,EAAa,CAAClW,UAAU,EAAM6P,WAAW,IAClGvN,SAAU4Y,EAAU,CAAC,IAAK,IAAK,QAAU,CAAC,IAAK,KAC/C7Q,aAAY,EACZC,SAAS,EACT0D,oBAAoB,EACpBE,qBAAqB,IAGzB,YAAAR,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EACFlJ,EAAOhQ,KAAI,SAAC9uD,GAAM,OAAAksD,EAAQ4T,uBAAuB9/D,EAAGksD,EAAQkU,yBAAyBpgE,EAAG,GAAG,EAAO,IAAI,OAC1G,MAAO,CACL0/D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EAjEA,CAAuC,EAAA8N,QAA1B,EAAAvK,qB,4lBCVb,cAEA,UAGA,SAEA,cAKE,mBACE,cAAO,K,OACP,EAAKf,WAAa,IAAI,EAAAe,kBACtB,EAAKjB,aAAe,IAAIyL,E,EAoC5B,OA5CiC,OAW/B,YAAA//C,IAAA,SAAI0xC,EAAyC9I,GAC3C,QAA8BzoC,IAA1Blb,KAAKstD,iBAAgC,CACvC,IAAMF,GAAe,EAAA7S,UAAU8S,SAAS1J,EAAO,GAAGjc,KAAMic,EAAO,GAAGjc,MAClE1nC,KAAKstD,kBAAoBF,GAAeX,EAAiBxc,QAAQkF,KAGnE,OAAIn1C,KAAKstD,iBACAb,EAAiB1xC,IAAI/a,KAAKuvD,WAAY5L,GAEtC8I,EAAiB1xC,IAAI/a,KAAKqvD,aAAc1L,IAInD,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,QAA8BzoC,IAA1Blb,KAAKstD,iBAAgC,CACvC,IAAMF,GAAe,EAAA7S,UAAU8S,SAAS1J,EAAO,GAAGjc,KAAMic,EAAO,GAAGjc,MAClE1nC,KAAKstD,kBAAoBF,GAAerc,EAAQd,QAAQkF,KAG1D,OAAIn1C,KAAKstD,kBAAoB3J,EAAO,GAAGjc,KAAK1/C,OAAS,EAC5CgY,KAAKuvD,WAAWxL,kBAAkBhT,EAAS4S,GAE3C3jD,KAAKqvD,aAAatL,kBAAkBhT,EAAS4S,IAIxD,YAAAO,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,OAAI3jD,KAAKstD,kBAAoB3J,EAAO,GAAGjc,KAAK1/C,OAAS,EAC5CgY,KAAKuvD,WAAWrL,cAAcnT,EAASwF,EAAaoN,GAEpD3jD,KAAKqvD,aAAanL,cAAcnT,EAASwF,EAAaoN,IAGnE,EA5CA,CAAiC,EAAAkX,QAApB,EAAA1Q,cA8Cb,+B,+CA6CA,OA7CyC,OACvC,YAAApvC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAMuU,EAASvU,EAAO,GAAGjc,KACnBywB,EAASxU,EAAO,GAAGjc,KACnBglB,EAAc,EAAA1S,cAAcwT,UAAU0K,EAAQC,GAAQ,GAC5D,IAAKzL,EACH,MAAM,IAAI9+D,MAAM,yCAElB,IAAM2qD,EAAOmU,EAAY1kE,OACnB+yE,EAAQ7C,EAAOlwE,OACfgzE,EAAQ7C,EAAOnwE,OAEf64D,EAAe,qCACStI,EAAI,yBACpBwiB,EAAK,uBACLC,EAAK,qJAJD9C,EAAOA,EAAOlwE,OAAS,GASR,8BACnB+yE,EAAQ,GAAC,4BACTC,EAAQ,GAAC,+FAKvB,MAAO,CACL/hB,aAAc0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAC/DyxD,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,IAAK,KAChB+H,aAAY,IAGhB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OACjG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EA7CA,CAAyC,EAAA8N,QAA5B,EAAAC,uB,sGCpDb,cAGA,UAEA,UAEA,2BAkEA,OAjEE,YAAA//C,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,GAAsB,IAAlBA,EAAO37D,OACT,MAAM,IAAI4F,MAAM,oDAGlB,IAiHc2qD,EAAc7Q,EAAgB+S,EAAcC,EAjHpDuT,EAAatK,EAAO,GAAGjc,KAEvB4O,EACFvF,EAAQgU,6BAA6BkJ,EAAY,EAAGA,EAAY,CAACzX,UAAU,EAAM6P,WAAW,IAC1FqG,EAAcpW,EAAa7M,MAC3BwxB,EAAYhN,EAAWjmE,OACvBo6D,EAAasK,EAAY1kE,OAEzB0yE,EAAiB,EAAAxgB,kBAAkBkI,GACnCgE,EAAW,EAAAiI,YAAY,KAAMjM,GAC7B8Y,GAuGQ3iB,EAvGS6J,EAuGK1a,EAvGO0e,EAuGS3L,EAvGCwT,EAAWA,EAAWjmE,OAAS,GAuGlB0yD,EAvGsBuT,EAAWA,EAAWjmE,OAAS,GAwGpG,IAATuwD,GAAuB,IAATA,EACT,GAIO,iBACJ7Q,EAAK6Q,EAAO,GAAE,kBACd7Q,EAAK6Q,EAAO,GAAE,oBACZ7Q,EAAK6Q,EAAO,GAAE,wBACd7Q,EAAK6Q,EAAO,GAAE,kCACJmC,EAAI,8BACJD,EAAI,WAzGpB0gB,EA0CV,SAAiC5iB,EAAc9O,EAA0B/B,GACvE,GAAa,IAAT6Q,EACF,MAAO,QAAQ9O,EAAM,GAIvB,IADA,IAAI2xB,EAAO,GACFz1E,EAAI4yD,EAAO,EAAG5yD,EAAI4yD,EAAM5yD,IAC/By1E,GAAW1zB,EAAK/hD,GAAE,OAAO8jD,EAAM9jD,EAAI4yD,EAAO,GACtC5yD,EAAI4yD,EAAO,IACb6iB,GAAQ,MAIZ,OAAOA,EAvDwBC,CAAwBjZ,EAPnC,IAAd6Y,EACgB,CAAC,EAAG,GACC,IAAdA,EACS,CAAChN,EAAW,GAAI,GAEhB,CAACA,EAAW7L,EAAa,GAAI6L,EAAW7L,EAAa,IAESgE,GAC5ErlC,EA4DV,SAAmB0oB,EAA0B/B,GAC3C,IAAM6Q,EAAO9O,EAAMzhD,OAEnB,GAAa,IAATuwD,EACF,MAAO,kBAGT,GAAa,IAATA,EACF,MAAO,oCACa9O,EAAM,GAAE,0CAI9B,IAII3kD,EAAI,GACR,GAAIyzD,EAAO,EACT,IAAK,IAAI5yD,EAAI,EAAGA,EAAI4yD,EAAO,IAAK5yD,EAC9Bb,GAAW4iD,EAAK/hD,GAAE,IAGtB,MAAO,QAAQb,EAAR,uCACqBA,EADrB,yCAEqBA,EAFrB,kDAG8BA,EAH9B,YAnFUw2E,CAAUrN,EAAY7H,GAE/BxN,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjDg1C,EAAe,sCAEb6Z,EAAc,4CAEXS,EAAoB,oBACrBviB,EAAK73B,OAAM,gDAEXm6C,EAAK,mBAELtiB,EAAK73B,OAAM,WAAWA,EAAM,qCAKtC,MAAO,CACL9T,KAAM,YACNgsC,aAAc,CAAClI,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,EAAO,IAAI,IACzErN,aAAY,EACZwC,SAAU,CAAC,KACX+H,aAAY,EACZC,SAAS,EACT0D,oBAAoB,EACpBE,qBAAqB,IAGzB,YAAAR,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KACrF,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EAlEA,GAAa,EAAAvF,a,gCCRb,SAAgB+T,EAAetuD,EAAcsrC,GAC3C,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKrwD,MAAM,EAAGqwD,GAAM5E,KAAI,SAAAvtD,GAAK,OAAG6mB,EAAI,IAAI7mB,K,2GAD3E,mBAIA,uBAA4B6mB,EAAcsrC,GACxC,OAAa,IAATA,EACK,CAACtrC,GAEHsuD,EAAetuD,EAAMsrC,IAG9B,+BACE,MAAO,sX,olBCZT,cAEA,UACA,UAIA,2B,+CA+BA,OA/B8B,OAC5B,YAAAx9B,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkB0I,EAAyC9I,GACzD,IAAM+I,EAAc,EAAAnS,UAAUihB,SAAS7X,EAAO,GAAGjc,KAAKx/C,QAAS8X,KAAK8wD,MAC9DvY,EAAOmU,EAAY1kE,OACnByzE,EAAUhP,EAAiBxH,yBAAyBtB,EAAO,IAG3D9C,EAAe,WAFD6a,EAChB,EAAArkB,QAAQoV,EAAiBxc,QAAQuE,QAAQY,UAAUvpC,SAAU,IAAK4vD,EAASz7D,KAAKujB,KAAMvjB,KAAK8wD,KAAM9wD,KAAKiiB,OAE3F,6BACOs2B,EAAI,yDAG1B,MAAO,CACLU,aAAc,CAACwiB,GACfnlB,aAAcmW,EAAiB1H,6BAA6B2H,GAC5D5T,SAAU,CAAC,KACX+H,aAAY,IAGhB,YAAAqD,cAAA,SAAcuI,EAAyClW,EAA0BoN,GAC/E,IAAMkJ,EAAW,CAACJ,EAAiB9H,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KAC9F,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBACIqI,EAAiBpH,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MAC9FmrC,YAAa,KAGnB,EA/BA,CAA8B,EAAA4O,KAgC9B,SAAgBD,EACZ9iB,EAAY3rC,EAAc+rC,EAA4Bz1B,EAAcutC,EAAgB7uC,GACtF,OAAQsB,GACN,IAAK,WACH,OAYN,SACIq1B,EAAY3rC,EAAcw8B,EAA0B+O,EAA4B/vC,EAAeC,EAC/FooD,EAAgB7uC,GAGlB,IAFA,IAAMs2B,EAAO9O,EAAMzhD,OACfs6D,EAAQ,GACH38D,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B28D,GAAS,qBACK38D,EAAC,OAAOmrE,EAAKnrE,GAAE,iEAEZ8jD,EAAM9jD,GAAE,+CACH6yD,EAAQ7yD,GAAE,gBAGlC,MAAO,sBACUsnB,EAAI,UAAUsrC,EAAI,gDACIt2B,EAAK,kEAGlCqgC,EAAK,oDACgC75C,EAAK,KAAKC,EAAM,+CACvBkwC,EAAKC,UAAS,IAAI5rC,EAAI,4DAhCnD2uD,CACHhjB,EAAM3rC,EAAM+rC,EAAYvP,MAAOuP,EAAYR,QAASQ,EAAYvwC,MAAOuwC,EAAYtwC,OAAQooD,EAAM7uC,GACvG,IAAK,UACH,OAkCN,SACI22B,EAAY3rC,EAAcw8B,EAA0B+O,EAA4B/vC,EAAeC,EAC/FooD,GAIF,IAHA,IAAMvY,EAAO9O,EAAMzhD,OAEfs6D,EAAQ,GACH38D,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B28D,GAAS,mBACG38D,EAAC,OAAOmrE,EAAKnrE,GAAE,6EAGD,GAAK8jD,EAAM9jD,GAAK,GAAE,8EAE5B8jD,EAAM9jD,GAAE,0DAEJ6yD,EAAQ7yD,GAAE,cAGhC,MAAO,oBACQsnB,EAAI,UAAUsrC,EAAI,8DAGzB+J,EAAK,kDACgC75C,EAAK,KAAKC,EAAM,6CACvBkwC,EAAKC,UAAS,IAAI5rC,EAAI,sDA1DjD4uD,CACHjjB,EAAM3rC,EAAM+rC,EAAYvP,MAAOuP,EAAYR,QAASQ,EAAYvwC,MAAOuwC,EAAYtwC,OAAQooD,GACjG,IAAK,OACH,OA4DN,SACIlY,EAAY3rC,EAAcw8B,EAA0B+O,EAA4B/vC,EAAeC,EAC/FooD,GAIF,IAHA,IAAMvY,EAAO9O,EAAMzhD,OAEfs6D,EAAQ,GACH38D,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B28D,GAAS,iBACC38D,EAAC,OAAOmrE,EAAKnrE,GAAE,+CAEZ8jD,EAAM9jD,GAAE,UAAS8jD,EAAM9jD,GAAK,GAAC,0BACxB6yD,EAAQ7yD,GAAE,YAG9B,MAAO,kBACMsnB,EAAI,UAAUsrC,EAAI,wDAGzB+J,EAAK,gDACgC75C,EAAK,KAAKC,EAAM,2CACvBkwC,EAAKC,UAAS,IAAI5rC,EAAI,gDAhF/C6uD,CACHljB,EAAM3rC,EAAM+rC,EAAYvP,MAAOuP,EAAYR,QAASQ,EAAYvwC,MAAOuwC,EAAYtwC,OAAQooD,GACjG,QACE,MAAM,IAAIljE,MAAM,iBA7CT,EAAA68D,WAgCb,oB,4rBCvCA,cAEA,UAIA,2B,+CAiBA,OAjB4C,OAC1C,YAAA1vC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkB0I,EAAyC9I,GACzD,OAAOoY,EACHtP,EAAkB9I,GAAQ,EAAM3jD,KAAK0wD,YAAa1wD,KAAK+wD,QAAS/wD,KAAKw4C,QAASx4C,KAAK8wD,KAAM9wD,KAAKg8D,kBAEpG,YAAA9X,cAAA,SAAcuI,EAAyClW,EAA0BoN,GAC/E,IAAMkJ,EAAW,CAACJ,EAAiB9H,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KAC9F,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBACIqI,EAAiBpH,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MAC9FmrC,YAAa,KAGnB,EAjBA,CAA4C,EAAAkP,mBAA/B,EAAAvS,yBAmBb,+B,+CAiBA,OAjBsC,OACpC,YAAA3uC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkB0I,EAAyC9I,GACzD,OAAOoY,EACHtP,EAAkB9I,GAAQ,EAAO3jD,KAAK0wD,YAAa1wD,KAAK+wD,QAAS/wD,KAAKw4C,QAASx4C,KAAK8wD,KAAM9wD,KAAKg8D,kBAErG,YAAA9X,cAAA,SAAcuI,EAAyClW,EAA0BoN,GAC/E,IAAMkJ,EAAW,CAACJ,EAAiB9H,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KAC9F,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBACIqI,EAAiBpH,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MAC9FmrC,YAAa,KAGnB,EAjBA,CAAsC,EAAAmP,aAkBtC,SAASH,EACLtP,EAAyC9I,EAAkBwY,EAA2BzL,EACtFK,EAAcvY,EAAwBsY,EAAqBkL,QAD2B,IAAAtL,MAAA,SACtF,IAAAK,MAAA,SAAc,IAAAvY,MAAA,SAAwB,IAAAsY,MAAA,IACxC,IAAM7C,EAAatK,EAAO,GAAGjc,KAAKx/C,QAClC,EAAAyoE,aAAayL,qBAAqBD,EAAkBlO,EAAYyC,EAAalY,EAASsY,GACtF,IAAMpE,EACF,EAAAiE,aAAa0L,uBAAuBF,EAAkBlO,EAAYzV,EAASkY,EAAaI,EAAMC,GAC5FgI,EAAa,EAAAxe,UAAUptC,KAAKujD,GAE9B4L,EAAM,GAERA,GADEN,EACK,kBAAkBjD,EAAU,KAE5B,kBAAkBA,EAAU,WAErC,IAAM/f,EAAcyT,EAAiBxH,yBAAyBtB,EAAO,IAE/D9C,EAAe,WADD0b,EAAoBvjB,EAAa0X,EAAaI,EAAMtY,EAR5D,kBAQ0E8jB,EAAK,OAE1E,SAEjB,MAAO,CACLrjB,aAAc,CAACD,GACf1C,aAAcmW,EAAiB1H,6BAA6B2H,GAC5D5T,SAAU,CAAC,KACX+H,aAAY,GA1CH,EAAA4H,mBA8Cb,+B,+CAiBA,OAjBwC,OACtC,YAAA1tC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkB0I,EAAyC9I,GACzD,OAAO6Y,EACH/P,EAAkB9I,GAAQ,EAAM3jD,KAAK0wD,YAAa1wD,KAAK+wD,QAAS/wD,KAAKw4C,QAASx4C,KAAK8wD,OAEzF,YAAA5M,cAAA,SAAcuI,EAAyClW,EAA0BoN,GAC/E,IAAMkJ,EAAW,CAACJ,EAAiB9H,uBAAuBhB,EAAO,KACjE,MAAO,CACLY,kBAAmBsI,EACnBzI,kBACIqI,EAAiBpH,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MAC9FmrC,YAAa,KAGnB,EAjBA,CAAwC,EAAA0P,eAA3B,EAAA9S,qBAmBb,+B,+CAiBA,OAjBkC,OAChC,YAAA5uC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkB0I,EAAyC9I,GACzD,OAAO6Y,EACH/P,EAAkB9I,GAAQ,EAAO3jD,KAAK0wD,YAAa1wD,KAAK+wD,QAAS/wD,KAAKw4C,QAASx4C,KAAK8wD,OAE1F,YAAA5M,cAAA,SAAcuI,EAAyClW,EAA0BoN,GAC/E,IAAMkJ,EAAW,CAACJ,EAAiB9H,uBAAuBhB,EAAO,KACjE,MAAO,CACLY,kBAAmBsI,EACnBzI,kBACIqI,EAAiBpH,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MAC9FmrC,YAAa,KAGnB,EAjBA,CAAkC,EAAA2P,SAkBlC,SAASF,EACL/P,EAAyC9I,EAAkBwY,EAA2BzL,EACtFK,EAAcvY,EAAwBsY,QADgD,IAAAJ,MAAA,SACtF,IAAAK,MAAA,SAAc,IAAAvY,MAAA,SAAwB,IAAAsY,MAAA,IACxC,IAAM7C,EAAatK,EAAO,GAAGjc,KAAKx/C,QAClC,EAAAyoE,aAAayL,qBAAqBD,EAAkBlO,EAAYyC,EAAalY,EAASsY,GACtF,IAAMpE,EACF,EAAAiE,aAAa0L,uBAAuBF,EAAkBlO,EAAYzV,EAASkY,EAAaI,EAAMC,GAK5F/X,EAAcyT,EAAiB1H,6BAA6BkJ,GAE5DpN,EAAe,SADD0b,EAAoBvjB,EAAa0X,EAAaI,EAAMtY,EAL5D,qDAGA,GAE+E,QAE5E,OAEf,MAAO,CACLS,aAAc,CAACD,GACf1C,aAAcmW,EAAiB1H,6BAA6B2H,GAC5D5T,SAAU,CAAC,KACX+H,aAAY,GAIhB,SAAgB0b,EACZjyE,EAAkBomE,EAAuBI,EAAgBtY,EAAmBmkB,EAAaL,EACzFM,GACF,IAAMC,EAAYvyE,EAAEm/C,MACd8O,EAAOjuD,EAAEm/C,MAAMzhD,OACrB,GAAI0oE,EAAY1oE,QAAU,EAAG,CAC3B,IAKI80E,EALEC,EAAKrM,EAAYA,EAAY1oE,OAAS,GACtCg1E,EAAKxkB,EAAQA,EAAQxwD,OAAS,GAC9Bi1E,EAAUnM,EAAKA,EAAK9oE,OAAS,EAAI,GACjCk1E,EAAQpM,EAAKA,EAAK9oE,OAAS,GAC3Bm1E,EAAON,EAAUtkB,EAAO,GAE1B6kB,EAAQ,GACRC,EAAW,GAmBf,GAjBEP,EADEG,EAAUC,IAAU,EACd,yCACwBH,EAAE,iCAClBxkB,EAAI,mBAAmBA,EAAI,WAAWykB,EAAE,MAAMC,EAAO,kCACjD1kB,EAAI,kBAAkBA,EAAI,YAAY4kB,EAAI,0GAIhDR,EAAG,sBAGT,yCACwBI,EAAE,iCAClBxkB,EAAI,mBAAmBA,EAAI,WAAWykB,EAAE,MAAMC,EAAO,4BACvDN,EAAG,sBAIQ,IAAvBjM,EAAY1oE,OAAc,CAC5B,IAAMs1E,EAAK5M,EAAYA,EAAY1oE,OAAS,GACtCu1E,EAAK/kB,EAAQA,EAAQxwD,OAAS,GAC9Bw1E,EAAU1M,EAAKA,EAAK9oE,OAAS,EAAI,GACjCy1E,EAAQ3M,EAAKA,EAAK9oE,OAAS,GAC3B01E,EAAOb,EAAUtkB,EAAO,GAE5B6kB,EADEI,EAAUC,IAAU,EACd,uCACoBH,EAAE,+BAClB/kB,EAAI,mBAAmBA,EAAI,WAAWglB,EAAE,MAAMC,EAAO,gCACjDjlB,EAAI,kBAAkBA,EAAI,YAAYmlB,EAAI,gCACxCX,EAAE,kEAKZ,yCACsBO,EAAE,iCAClB/kB,EAAI,mBAAmBA,EAAI,WAAWglB,EAAE,MAAMC,EAAO,0BAGrEH,EAAW,kCAmBb,MAdoB,2CACgB9kB,EAAI,6BACtBA,EAAI,yEAGIqkB,EAAQ,gDAEtBQ,EAAK,mBACLN,EAAK,mBACLO,EAAQ,mBACRf,EAAG,2DAMf,IAAMvD,EAAa,EAAAxe,UAAUptC,KAAKujD,GAC5BiN,EAAgB,EAAApjB,UAAUsM,eAAe6J,GACzCkN,EAAcD,EAAc31E,OAC5B61E,EAAW/M,EAAK9oE,OAChB81E,EAA0B7b,EAAgB2b,GAC1CG,EAAgBC,EAAUnB,EAAW,aACrCoB,EAAWD,EAAUlN,EAAM,QAC3BoN,EAAoBF,EAAUL,EAAe,iBAkDnD,MA9BoB,iBACVG,EAAuB,2CACGvlB,EAAI,+BACpBA,EAAI,wEAECqlB,EAAW,gCACbC,EAAQ,qCACHtlB,EAAI,yCACAqlB,EAAW,mCACjBA,EAAW,uBACvBK,EAAQ,qBACRF,EAAa,qBA9BPC,EAAUxlB,EAAS,WA+Bd,qBACX0lB,EAAiB,qCAEHtB,EAAQ,6GAGF7D,EAAU,kJAGbxgB,EAAI,MAAMqlB,EAAW,SAASrlB,EAAI,mEACbA,EAAI,MAAMqlB,EAAW,2CACtCrlB,EAAI,MAAMqlB,EAAW,4CAzCxC9M,EAAKqN,QAAO,SAAC30C,EAAK40C,GAAQ,OAAA50C,EAAM40C,KAGpC,oOAQEzB,EAAG,oBAGL,4CAEIA,GA0BW,wCAEbL,EAAG,mDAQrB,SAAgB0B,EAAU1/C,EAA0B+/C,GAElD,IADA,IAAI/b,EAAQ,GACH38D,EAAI,EAAGA,EAAI24B,EAAMt2B,OAAQrC,IAChC28D,GAAS,WACL+b,EAAS,IAAI14E,EAAC,OAAO24B,EAAM34B,GAAE,UAGnC,OAAO28D,EAGT,SAAgBL,EAAgB1J,GAC9B,MAAO,8CACkCA,EAAI,sBAAsBA,EAAI,2BAC7DA,EAAI,iEAGYA,EAAI,+HAIhBA,EAAI,yBArMP,EAAA6R,eA0Cb,wBAuIA,cAUA,qB,0rBCrRA,aAEA,UAIA,2B,+CAiEA,OAjE0C,OAGxC,YAAArvC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAUhD,IATA,IAAM+I,EAAwB,GACxB4R,EAAQ3a,EAAO,GAAGjc,KAAK1/C,QAAU,EAEjCu2E,EAAU,GAEVC,EAAO,EAAAjkB,UAAUkkB,cAAcz+D,KAAKw+D,KAAM7a,EAAO,GAAGjc,KAAK1/C,QACzD02E,EAAM1+D,KAAK2+D,OAAOhb,EAAQ6a,GAC5B5T,EAAY8T,EAAI,GAEXn0E,EAAI,EAAGA,EAAIo5D,EAAO,GAAGjc,KAAK1/C,OAAQuC,IAErCi0E,EAAKh1E,QAAQe,IAAM,GAAqB,IAAhBi0E,EAAKx2E,QAC3BgY,KAAK4+D,UACPlS,EAAYx9D,KAAK,GAInB07D,EAAY,sBACDrgE,EAAC,UAAUA,EAAC,MAAMo5D,EAAO,GAAGjc,KAAKn9C,GAAE,MAAMA,EAAC,6BACxCA,EAAC,QAAQA,EAAC,gBACnBqgE,EAAS,0BAIb2T,EAAQrvE,KAAK,YAAY3E,EAAC,iBAAiBmiE,EAAY1kE,OAAM,MAE7D0kE,EAAYx9D,KAAKy0D,EAAO,GAAGjc,KAAKn9C,KAIpC,IAEMs2D,EAAe,wCAFP6L,EAAY1kE,QAAU,GAGC,oFAElBs2E,EAAK,6CAClBC,EAAQ/wC,KAAK,MAAK,aAClBkxC,EAAI,GAAE,kDACN9T,EAAS,aACT8T,EAAI,GAAE,8EAIZ,MAAO,CACLzlB,aAAc0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAC/DyxD,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,KACX+H,aAAY,IAGhB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OACjG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EAjEA,CAA0C,EAAA8R,YAmE1C,2B,+CAIA,OAJoC,OAClC,YAAAF,OAAA,SAAOtH,GACL,MAAO,CAAC,eAAgB,yBAA0B,KAEtD,EAJA,CAAoCyH,GAAvB,EAAA5T,iBAMb,+B,+CAWA,OAXqC,OACnC,YAAAyT,OAAA,SAAOhb,EAAkB6a,GAEvB,IADA,IAAIrxD,EAAO,EACF5iB,EAAI,EAAGA,EAAIo5D,EAAO,GAAGjc,KAAK1/C,OAAQuC,KACrCi0E,EAAKh1E,QAAQe,IAAM,GAAqB,IAAhBi0E,EAAKx2E,UAC/BmlB,GAAQw2C,EAAO,GAAGjc,KAAKn9C,IAI3B,MAAO,CAAC,eAAgB,yBAA0B,YAAY4iB,EAAI,OAEtE,EAXA,CAAqC2xD,GAAxB,EAAA/T,kBAab,+B,+CAWA,OAXoC,OAClC,YAAA4T,OAAA,SAAOhb,EAAkB6a,GAEvB,IADA,IAAMO,EAAU,GACPx0E,EAAI,EAAGA,EAAIo5D,EAAO,GAAGjc,KAAK1/C,OAAQuC,KACrCi0E,EAAKh1E,QAAQe,IAAM,GAAqB,IAAhBi0E,EAAKx2E,SAC/B+2E,EAAQ7vE,KAAK,YAAY3E,EAAC,UAI9B,MAAO,CAAIw0E,EAAQvxC,KAAK,MAAK,0BAA2B,oCAAqC,KAEjG,EAXA,CAAoCsxC,GAAvB,EAAAhU,iBAab,+B,+CAWA,OAXoC,OAClC,YAAA6T,OAAA,SAAOhb,EAAkB6a,GAEvB,IADA,IAAMO,EAAU,GACPx0E,EAAI,EAAGA,EAAIo5D,EAAO,GAAGjc,KAAK1/C,OAAQuC,KACrCi0E,EAAKh1E,QAAQe,IAAM,GAAqB,IAAhBi0E,EAAKx2E,SAC/B+2E,EAAQ7vE,KAAK,YAAY3E,EAAC,UAI9B,MAAO,CAAIw0E,EAAQvxC,KAAK,MAAK,0BAA2B,oCAAqC,KAEjG,EAXA,CAAoCsxC,GAAvB,EAAA9T,iBAab,+B,+CAIA,OAJqC,OACnC,YAAA2T,OAAA,SAAOtH,GACL,MAAO,CAAC,eAAgB,yBAA0B,KAEtD,EAJA,CAAqCyH,GAAxB,EAAA7T,kBAMb,+B,+CAIA,OAJuC,OACrC,YAAA0T,OAAA,SAAOtH,GACL,MAAO,CAAC,eAAgB,yBAA0B,wBAEtD,EAJA,CAAuCyH,GAA1B,EAAAjU,oBAMb,+B,+CAIA,OAJ0C,OACxC,YAAA8T,OAAA,SAAOtH,GACL,MAAO,CAAC,wBAAyB,oCAAqC,KAE1E,EAJA,CAA0CyH,GAA7B,EAAA3T,wB,6kBClIb,aAEA,UACA,UAIA,UAEA,yE,OAqJU,EAAA6T,sBAAuB,E,EAEjC,OAvJwC,OACtC,YAAAjkD,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,GAAsB,IAAlBA,EAAO37D,OACT,MAAM,IAAI4F,MAAM,sDAmBlB,IAEIorD,EAFEimB,EAAmBtb,EAAO,GAAGjc,KAInC,GAHA1nC,KAAKk/D,aAAeC,EAAcxb,EAAO,GAAGjc,MAE5CsR,EAAcjI,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,EAAMsb,GAAkB,GACrD,IAA5BA,EAAiBj3E,OAAc,CACjC,IAAMo3E,EAAsBpmB,EAE5BA,EAAcjI,EAAQgU,6BAClB/kD,KAAKk/D,aAAc,EAAGl/D,KAAKk/D,aAAc,CAAC1oB,UAAU,EAAM6P,WAAW,IAGzErmD,KAAKg/D,qBACAhmB,EAAYtwC,SAAW02D,EAAoB12D,QAAYswC,EAAYvwC,QAAU22D,EAAoB32D,MAGxGzI,KAAK0sD,YAAc,EAAAnS,UAAU8kB,sBAAsBJ,EAAkBtb,EAAO,GAAG2b,aAC/E,IAAMC,EAAsBJ,EAAcn/D,KAAK0sD,aAE/C1sD,KAAKs2C,aAAevF,EAAQgU,6BACxBwa,EAAqB,EAAGA,EAAqB,CAAC/oB,UAAU,EAAM6P,WAAW,IAG7E,IADA,IAAImZ,EAAW,GACN75E,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI85E,EAAe,GACnB,OAAQ95E,GACN,KAAK,EACH85E,EAAe,qBACf,MACF,KAAK,EACHA,EAAe,4CACf,MACF,KAAK,EACHA,EAAe,4CACf,MACF,KAAK,EACHA,EAAe,8CACf,MACF,QACE,MAAM,IAAI7xE,MAGd4xE,GAAY,aACRC,EAAY,cACZ95E,EAAI,EAAI,sDAAwD,IAAE,6OAMzDA,EAAC,iFAEVA,EAAI,EAAI,IAAM,IAAE,WAGtB,IAsF4B8jD,EACxB+O,EACAF,EAxFEM,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SAEjDg1C,EAAe,YAoFOpX,EAnFDzpC,KAAKk/D,aAoF5B1mB,EAAU,EAAA+B,UAAUsM,eAAepd,GACnC6O,EAAS,CAAC,IAAK,IAAK,KACZ,QAWP,oEAVwBE,EACK7E,KAAI,SAACgF,EAAQhzD,GAKZ,MAJc,OAAO2yD,EAAO3yD,GAAE,MAAhB,WAAiCgzD,EAIhC,MAHDhzD,IAAM6yD,EAAQxwD,OAAS,EACjC,OAAOswD,EAAO3yD,EAAI,GAAE,MAApB,WAAqC2yD,EAAO3yD,GAAE,MAAMgzD,EACpD,YAAYL,EAAO3yD,GAAE,MAAMgzD,GACN,OAE1BnrB,KAAK,IAhGlB,qDA0GzB,SAAiCic,GAC/B,IAAM+O,EAAU,EAAA+B,UAAUsM,eAAepd,GAEzC,MAAO,+FAGe+O,EAAQ,GAAE,iBAAiBA,EAAQ,GAAE,sBA9GrDknB,CAAwBH,GAAoB,WAC5C,EAAA/Q,oBAAmB,yJAQN+Q,EAAoB,GAAE,yBACtBA,EAAoB,GAAE,gBAEjCC,EAAQ,aACR5mB,EAAK73B,OAAM,4BAIjB,MAAO,CACL9T,KAAM,qBACNgsC,aAAc,CAACD,GACf1C,aAAct2C,KAAKs2C,aACnBwC,SAAU,CAAC,KACX+H,aAAY,EACZC,SAAS,EACT0D,oBAAoB,EACpBE,qBAAqB,IAGzB,YAAAR,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAIkJ,EACEuS,EAAsBruB,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,EAAO,IAAI,GAChFgc,EAAkB5uB,EAAQ4T,uBAAuBhB,EAAO,GAAIyb,GAAqB,GAEvF,GAAIp/D,KAAKg/D,qBAAsB,CAC7B,IAAMY,EAAqC,CACzCxZ,SAAU,EACV19C,OAAQ02D,EAAoB12D,OAC5BD,MAAO22D,EAAoB32D,MAC3BghC,MAAOzpC,KAAKk/D,aACZ1mB,QAAS,EAAA+B,UAAUsM,eAAe7mD,KAAKk/D,cACvCtoB,cAAe52C,KAAKk/D,cAItBrS,EAAW,CADP9b,EAAQ6U,wBAAwBga,EAAqBjc,EAAO,GAAG/hC,KAAM+9C,EAAgBna,eAIzFqH,EAAW,CAAC8S,GAEd,IAAIrpB,EAAet2C,KAAKs2C,aASxB,OAPAA,EAAa7M,MAAQzpC,KAAK0sD,YAC1BpW,EAAaM,cAAgB52C,KAAK0sD,iBACbxxC,IAAjBo7B,IACFA,EAAevF,EAAQgU,6BACnB/kD,KAAK0sD,YAAa,EAAG1sD,KAAK0sD,YAAa,CAAClW,UAAU,EAAM6P,WAAW,KAGlE,CACL9B,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B/O,EAAcuW,EAAS,GAAGxI,OAAOziC,MACxFmrC,YAAa,KAOnB,EAvJA,CAAwC,EAAA8S,SAyJxC,SAASV,EAAc11B,GACrB,GAAqB,IAAjBA,EAAMzhD,OACR,MAAO,CAAC,EAAG,EAAG,GAKhB,IAFA,IAAM83E,EAAYr2B,EAAMzhD,QAAU,EAAIyhD,EAAMvhD,MAAM,EAAGuhD,EAAMzhD,OAAS,GAAK,CAAC,GACtE+3E,EAAQ,EACHp6E,EAAI,EAAGA,EAAIm6E,EAAU93E,SAAUrC,EACtCo6E,GAASD,EAAUn6E,GAErB,MAAO,CAACo6E,EAAOt2B,EAAMzhD,OAAS,EAAIyhD,EAAMA,EAAMzhD,OAAS,GAAK,EAAGyhD,EAAMA,EAAMzhD,OAAS,IAnKzE,EAAAooE,sB,glBCTb,aAEA,UAGA,UACA,UAEA,cAEE,mBACE,cAAO,K,OACP,EAAKb,WAAa,IAAI,EAAAa,mB,EAW1B,OAfkC,OAMhC,YAAAr1C,IAAA,SAAI0xC,EAAyC9I,GAC3C,GAAI8I,EAAiBxc,QAAQkF,KAC3B,OAAOsX,EAAiB1xC,IAAI/a,KAAKuvD,WAAY5L,GAE7C,IAAMqc,EAAe,EAAAzlB,UAAU8kB,sBAAsB1b,EAAO,GAAGjc,KAAMic,EAAO,GAAG2b,aAE/E,MAAO,CADgB7I,EAAQhK,EAAkB9I,EAAO,GAAIqc,KAIlE,EAfA,CAAkC,EAAAH,SAiBlC,SAAgBpJ,EACZhK,EAAyCnmB,EAAe05B,GAC1D,IAAM5F,EAAU3N,EAAiB9H,uBAAuBre,GACpD25B,EAAcD,EACO,IAArB5F,EAAQhU,WACV6Z,EAAc,EAAA3Z,eAAe0Z,IAE/B,IAAME,EAAkC,CACtC9Z,SAAUgU,EAAQhU,SAClB19C,OAAQ0xD,EAAQ1xD,OAChBD,MAAO2xD,EAAQ3xD,MAEfghC,MAA8B,IAAvBw2B,EAAYj4E,OAAei4E,EAAc,CAAC,GACjDznB,QAAS,EAAA+B,UAAUsM,eAAeoZ,GAClCrpB,cAAeopB,GAIjB,OADuBvT,EAAiB7G,wBAAwBsa,EAAkB55B,EAAM1kB,KAAMw4C,EAAQ5U,SAChFnB,OAnCX,EAAAgH,eAiBb,a,y3BCzBA,cAEA,UAGA,UAEA,UAEA,2B,+CA0BA,OA1BuC,OACrC,YAAAtwC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM3K,EAAcjI,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,EAAMA,EAAO,GAAGjc,MAAM,GAEnF,IAA6B1nC,KAAKmgE,cAAcxc,GAAO,GAAjDyc,GAAF,KAAQ,MAAE1T,EAAW,KAEzBpW,EACFvF,EAAQgU,6BAA6B2H,EAAa,EAAGA,EAAa,CAAClW,UAAU,EAAM6P,WAAW,IAGlG,OAeJ,SACIzN,EAAYr1B,EAAcy1B,EAA4B1C,EAA6B8pB,EACnFC,EAAwBC,EAA+BC,EAA4BC,EACnFC,EAAyBC,GAE3B,GADeN,EAAOO,OAAM,SAAA96E,GAAK,OAAM,IAANA,MAAwC,uBAA5B66E,EAE3C,MAAO,CACLznB,aAAc,CAACD,GACf1C,aAAY,EACZwC,SAAU,CAAC,KACXgI,SAAS,EACTD,aAAc,iCACHjI,EAAKC,UAAS,0BACvBD,EAAK73B,OAAM,gBAIjB,IAAM2rC,EAAcpW,EAAaM,cAC3B/N,EAAM6jB,EAAY1kE,OACxB,GAAI6gD,EAAM,EACR,MAAM,IAAIj7C,MAAM,kDAAkDi7C,GAGpE,IAAM+3B,EAAelU,EAAY7jB,EAAM,GACjCg4B,EAAcnU,EAAY7jB,EAAM,GAEhColB,EAAajV,EAAYpC,cAC/B,GAAI/N,IAAQolB,EAAWjmE,OACrB,MAAM,IAAI4F,MAAM,uCAAuCqgE,EAAWjmE,OAAM,aAAa6gD,GAEvF,IAAMmuB,EAAc/I,EAAWplB,EAAM,GAC/BouB,EAAahJ,EAAWplB,EAAM,GAE9Bi4B,EAAeV,EAAOv3B,EAAM,GAC5Bk4B,EAAcX,EAAOv3B,EAAM,GAE7Bm4B,EAAqB,GAEzB,GAAa,WAATz9C,EAEF,MAAM,IAAI31B,MAAM,2CAA2C21B,EAAI,KAEjE,OAAQm9C,GACN,IAAK,aACHM,EAAqB,gHAKrB,MACF,IAAK,aACHA,EAAqB,8HAKrB,MACF,IAAK,gBACHA,EAAqB,mFAEKH,EAAW,aAAaD,EAAY,aAAaC,EAAW,aAClFD,EAAY,8CACW3J,EAAU,aAAaD,EAAW,aAAaC,EAAU,aAChFD,EAAW,4HAKf,MACF,QAEE,MAAM,IAAIppE,MAAM,8DAA8D8yE,EAAuB,KAGzG,IAAMhG,EAAiB,EAAAxgB,kBAAkBrR,GAkFzC,MAAO,CACLoQ,aAAc,CAACD,GACf1C,aAAY,EACZwC,SAAU,CAAC,KACX+H,aApFa,uCACmBmW,EAAW,OAAOC,EAAU,6CAC1B6J,EAAY,OAAOC,EAAW,OAAOD,EAAY,OAAOC,EAAW,iBAHjF,EAAAvS,oBAID,aACbwS,EAAkB,wKAKhBtG,EAAc,83BAiBWkG,EAAe,GAAC,0CAChBC,EAAc,GAAC,gtEAkDxCjoB,EAAK73B,OAAM,wCAQnB+/B,SAAS,EACT0D,oBAAoB,EACpBE,qBAAqB,GAlLduc,CADM,EAAA5pB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SAE7C7L,KAAKujB,KAAMy1B,EAAa1C,EAAc8pB,EAAQC,EAAKrgE,KAAKkhE,iBAAkBlhE,KAAKugE,mBACrFvgE,KAAKwgE,kBAAmBxgE,KAAKygE,eAAgBzgE,KAAK0gE,0BAGxD,YAAAxc,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMyW,EACFrpB,EAAQ4T,uBAAuBhB,EAAO,GAAI5S,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,EAAO,IAAI,IAExG,MAAO,CAACY,kBAAmB,CAAC6V,GAAUhW,kBADrBrT,EAAQsU,4BAA4B9O,EAAYD,aAAc8jB,EAAQ/V,OAAOziC,MAC3BmrC,YAAa,KAIpF,EA1BA,CAAuC,EAAAoU,UAA1B,EAAA7V,qB,qlBCTb,cAEA,UAIA,2B,+CAWA,OAXgC,OAC9B,YAAAvwC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAGpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,OAAOI,EAAkBhT,EAAS4S,EAAO,GAAI3jD,KAAKohE,OAAQphE,KAAKqhE,KAAMrhE,KAAKw+D,OAE5E,YAAAta,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,OAAOO,EAAcnT,EAASwF,EAAaoN,IAE/C,EAXA,CAAgC,EAAA2d,OAAnB,EAAA5V,aAab,+B,+CAwBA,OAxBmC,OACjC,YAAA3wC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAGpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAK5S,EAAQd,QAAQiW,cAAcvC,EAAO,GAAGmB,UAAY/T,EAAQd,QAAQiW,cAAcvC,EAAO,GAAGmB,SAC5FnB,EAAO37D,QAAU,IAAM+oD,EAAQd,QAAQiW,cAAcvC,EAAO,GAAGmB,SAC/DnB,EAAO37D,QAAU,IAAM+oD,EAAQd,QAAQiW,cAAcvC,EAAO,GAAGmB,QAClE,MAAM,IAAIl3D,MAAM,4CAElB,GAAI+1D,EAAO37D,QAAU,GAAK27D,EAAO,GAAG2b,YAAYiC,MAAK,SAAC57E,GAAc,OAAM,IAANA,KAClE,MAAM,IAAIiI,MAAM,oDAElB,IAAMwzE,EAASptD,MAAMu4B,KAAKoX,EAAO,GAAG2b,aAC9B+B,EAAOrtD,MAAMu4B,KAAKoX,EAAO,GAAG2b,aAC5Bd,EAAO7a,EAAO37D,QAAU,EAAIgsB,MAAMu4B,KAAKoX,EAAO,GAAG2b,aAAe,GAEtE,OAAOvb,EAAkBhT,EAAS4S,EAAO,GAAIyd,EAAQC,EAAM7C,IAG7D,YAAAta,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,OAAOO,EAAcnT,EAASwF,EAAaoN,IAE/C,EAxBA,CAAmC,EAAA6d,UA0BnC,SAASzd,EACLhT,EAAgCzmD,EAAW82E,EAA2BC,EACtE7C,GACkB,IAAhBA,EAAKx2E,SACPw2E,EAAOl0E,EAAEo9C,KAAKx/C,MAAM,GAAGyrD,KAAI,SAACvlB,EAAKqzC,GAAQ,OAAAA,MAE3CjD,EAAO,EAAAjkB,UAAUkkB,cAAcD,EAAMl0E,EAAEo9C,KAAK1/C,QAC5Co5E,EAASA,EAAOztB,KAAI,SAAC5tB,EAAO07C,GAC1B,OAAI17C,EAAQz7B,EAAEo9C,KAAK82B,EAAKiD,IAAQ,EACvBn3E,EAAEo9C,KAAK82B,EAAKiD,IAEd,EAAAlnB,UAAUwd,cAAchyC,EAAOz7B,EAAEo9C,KAAK82B,EAAKiD,QAEpDJ,EAAOA,EAAK1tB,KAAI,SAACtmB,EAAKo0C,GACpB,OAAIp0C,EAAM/iC,EAAEo9C,KAAK82B,EAAKiD,IAAQ,EACrBn3E,EAAEo9C,KAAK82B,EAAKiD,IAEd,EAAAlnB,UAAUwd,cAAc1qC,EAAK/iC,EAAEo9C,KAAK82B,EAAKiD,QAMlD,IAHA,IAAM/U,EAAcpiE,EAAEo9C,KAAKx/C,QAErBw5E,EAAqB,GAClB/7E,EAAI,EAAGA,EAAI64E,EAAKx2E,OAAQrC,IAC/B+mE,EAAY8R,EAAK74E,IAAM07E,EAAK17E,GAAKy7E,EAAOz7E,GACpCy7E,EAAOz7E,GAAK,GACd+7E,EAASxyE,KAAK,aAAasvE,EAAK74E,GAAE,QAAQy7E,EAAOz7E,GAAE,KAIvD,IACMk7D,EAAe,uCADR6L,EAAY1kE,OAEa,iBAC9B05E,EAASl0C,KAAK,YAAW,2CAGjC,MAAO,CACLyrB,aAAc,CAAClI,EAAQkU,yBAAyB36D,IAChDgsD,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,KACX+H,aAAY,GAIhB,SAASqD,EAAcnT,EAAgCwF,EAA0BoN,GAC/E,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KACrF,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,IA3EJ,EAAAtB,iB,g+BCnBb,cAEA,UACA,UAIA,cACE,a,OACE,cAAO,KA+MX,OAjNkC,OAIhC,YAAA1wC,IAAA,SAAI0xC,EAAyC9I,GAA7C,WACO3jD,KAAKqxD,YACRrxD,KAAKqxD,UAAY,GACIrxD,KAAKu5D,mBAAmB9M,EAAkB9I,GAClDj3C,SAAQ,SAACi1D,GACpB,IAAM/d,EAAW6I,EAAiBxc,QAAQ4T,eAAe9Z,MAAM43B,GAC/D,EAAKtQ,UAAUniE,KAAK00D,OAIxB,IAAM4V,EAAWx5D,KAAKy5D,eAAehN,EAAkBzsD,KAAKqxD,UAAU1d,KAAI,SAAApuD,GAAK,OAAAA,EAAEgxD,eAAcoN,GAG/F,OAFA6V,EAAS9sD,SAAQ,SAACzlB,EAAGtB,GAAM,OAAA8mE,EAAiBxc,QAAQ4T,eAAe9oC,IAAI,EAAKs2C,UAAU1rE,GAAIsB,MAEnF,CAACuyE,EAASA,EAASxxE,OAAS,GAAGo8D,kBAAkBC,SAE1D,YAAAud,yBAAA,SAEInV,EAAyCnmB,EAAe57C,EAAW5F,EACnE+8E,EAAwCC,GAC1C,IAAM7T,EAAa3nB,EAAMoB,KAAKx/C,QACxB8wD,EAAcyT,EAAiB1H,6BAA6BkJ,GAC5DvB,EAAcuB,EACd1V,EAAOmU,EAAY1kE,OACnB+5E,EAAe/oB,EAAYvwC,MAC3Bu5D,EAAgBhpB,EAAYtwC,OAElC,GAAIhe,EAAI,GAAK5F,EAAI,EACf,MAAM,IAAI8I,MAAM,8EAGlB,GAA6C,IAAzCi0E,EAAwBp4B,MAAMzhD,QAA4D,IAA5C85E,EAA2Br4B,MAAMzhD,OACjF,MAAM,IAAI4F,MAAM,0DAGlB,GAAIi0E,EAAwBp4B,MAAM,KAAO/+C,GAAKo3E,EAA2Br4B,MAAM,KAAO/+C,EACpF,MAAM,IAAIkD,MAAM,0EAGlB,IAAMizD,EAAe,2BACDtI,EAAI,kKAGmBwpB,EAAY,KAAKC,EAAa,kIAIrCl9E,EAAC,sTAYrC,MAAO,CACLm0D,aAAc,CAACD,EAAa6oB,EAAyBC,GACrDxrB,aAAcmW,EAAiB1H,6BAA6B2H,GAC5D5T,SAAU,CAAC,IAAK,MAAO,QACvB+H,aAAY,EACZ5zC,KAAM,YAOV,YAAAg1D,6BAAA,SAEIxV,EAAyCniE,EAAWI,EAAW5F,EAAW+8E,EAC1EnV,GACF,IAAMwV,EAAUzV,EAAiB1H,6BAA6Bz6D,EAAEo9C,KAAKx/C,SAC/DqwD,EAAOmU,EAAY1kE,OACnB+5E,EAAeG,EAAQz5D,MACvBu5D,EAAgBE,EAAQx5D,OAE9B,GAAIhe,EAAI,GAAK5F,EAAI,EACf,MAAM,IAAI8I,MAAM,8EAGlB,GAA2B,IAAvB8+D,EAAY1kE,OACd,MAAM,IAAI4F,MAAM,4CAGlB,GAAI8+D,EAAY,KAAOhiE,EACrB,MAAM,IAAIkD,MAAM,4DAGlB,GAA6C,IAAzCi0E,EAAwBp4B,MAAMzhD,OAChC,MAAM,IAAI4F,MAAM,0DAGlB,GAAIi0E,EAAwBp4B,MAAM,KAAO/+C,EACvC,MAAM,IAAIkD,MAAM,0EAGlB,IACMizD,EAAe,2BACDtI,EAAI,qEAEwBzzD,EAAC,+FAI9BA,EAAC,+DARP,EAAAuyD,QAAQoV,EAAiBxc,QAAQuE,QAAQY,UAAUvpC,SAUlBgtC,UAAS,oDACnDkpB,EAAY,KAAKC,EAAa,2DAKlC,MAAO,CACL/oB,aAAc,CAACipB,EAASL,GACxBvrB,aAAcmW,EAAiB1H,6BAA6B2H,GAC5D5T,SAAU,CAAC,IAAK,OAChB+H,aAAY,EACZ5zC,KAAM,gBAMV,YAAAk1D,4BAAA,SAEI1V,EAAyCniE,EAAWI,EAAW5F,EAAW4nE,GAC5E,IAAMwV,EAAUzV,EAAiB1H,6BAA6Bz6D,EAAEo9C,KAAKx/C,SAC/DqwD,EAAOmU,EAAY1kE,OACnB+5E,EAAeG,EAAQz5D,MACvBu5D,EAAgBE,EAAQx5D,OAE9B,GAAIhe,EAAI,GAAK5F,EAAI,EACf,MAAM,IAAI8I,MAAM,8EAGlB,GAA2B,IAAvB8+D,EAAY1kE,OACd,MAAM,IAAI4F,MAAM,4CAGlB,GAAI8+D,EAAY,KAAOhiE,EACrB,MAAM,IAAIkD,MAAM,4DAGlB,IAAMgrD,EAAO,EAAAvB,QAAQoV,EAAiBxc,QAAQuE,QAAQY,UAAUvpC,SAC1Dg1C,EAAe,+BACGtI,EAAI,yEAEwBzzD,EAAC,8CAEjB8zD,EAAKC,UAAS,gDAAgDkpB,EAAY,KAC1GC,EAAa,mCACMl9E,EAAC,oEAEkB8zD,EAAKC,UAAS,oDACpDkpB,EAAY,KAAKC,EAAa,qHAOlC,MAAO,CACL/oB,aAAc,CAACipB,GACf5rB,aAAcmW,EAAiB1H,6BAA6B2H,GAC5D5T,SAAU,CAAC,KACX+H,aAAY,EACZ5zC,KAAM,eAGV,YAAAssD,mBAAA,SAAmB9M,EAAyC9I,GAC1D,IAAMsK,EAAatK,EAAO,GAAGjc,KAAKx/C,QAC5BgmE,EAAO,EAAA3T,UAAUwd,cAAc/3D,KAAKkuD,KAAMD,EAAWjmE,QACrD0C,EAAI,EAAA6vD,UAAU6nB,gBAAgBnU,EAAYC,GAC1CppE,EAAI,EAAAy1D,UAAU8nB,kBAAkBpU,EAAYC,GAC5CoU,EAAwBtiE,KAAKmiE,4BAA4B1V,EAAkB9I,EAAO,GAAIj5D,EAAG5F,EAAG,CAAC4F,IAC7F63E,EACFviE,KAAKiiE,6BAA6BxV,EAAkB9I,EAAO,GAAIj5D,EAAG5F,EAAGw9E,EAAsBhsB,aAAc,CAAC5rD,IAK9G,MADoC,CAAC43E,EAAuBC,EAHjCviE,KAAK4hE,yBAC5BnV,EAAkB9I,EAAO,GAAIj5D,EAAG5F,EAAGw9E,EAAsBhsB,aAAcisB,EAAwBjsB,gBAKrG,YAAAmjB,eAAA,SAAehN,EAAyCxhD,EAA6B04C,GACnF,IAAMzb,EAAWyb,EAAO,GAAG/hC,KACrBw4C,EAAU3N,EAAiB9H,uBAAuBhB,EAAO,GAAI14C,EAAa,GAAGguC,aAAa,IAC1FugB,EAAsB,GAC5BA,EAAStqE,KAAK,CACZq1D,kBAAmB,CAAC6V,GACpBhW,kBAAmBqI,EAAiBpH,4BAA4Bp6C,EAAa,GAAGqrC,aAAcpO,GAC9F6kB,YAAa,KAEf,IAAK,IAAIpnE,EAAI,EAAGA,EAAIslB,EAAajjB,SAAUrC,EACzC6zE,EAAStqE,KAAK,CACZq1D,kBAAmB,EAAF,OAAMiV,EAAS7zE,EAAI,GAAG4+D,oBAAiB,CAAEiV,EAAS7zE,EAAI,GAAGy+D,oBAC1EA,kBAAmBqI,EAAiBpH,4BAA4Bp6C,EAAatlB,GAAG2wD,aAAcpO,GAC9F6kB,YAAa,KAGjB,OAAOyM,GAGX,EAjNA,CAAkC,EAAAgJ,SAArB,EAAA7W,gB,k3BCPb,cAEA,UAIA,2B,+CAqDA,OArDgC,OAC9B,YAAA5wC,IAAA,SAAI0xC,EAAyC9I,GAA7C,WACE,IAAK3jD,KAAKqxD,UAAW,CACnBrxD,KAAKqxD,UAAY,GAGjB,IAFA,IAAMnD,EAAO,EAAA3T,UAAUwd,cAAc/3D,KAAKkuD,KAAMvK,EAAO,GAAGjc,KAAK1/C,QACzDi7B,EAAQjjB,KAAKyiE,gBAAgBhW,EAAkB9I,EAAQuK,GACpDvoE,EAAI,EAAGA,EAAIs9B,IAASt9B,EAAG,CAC9B,IAAM4wD,EAAcv2C,KAAK+jD,kBAAkB0I,EAAkB9I,EAAO,GAAIuK,EAAMvoE,GACxEi+D,EAAW6I,EAAiBxc,QAAQ4T,eAAe9Z,MAAMwM,GAC/Dv2C,KAAKqxD,UAAUniE,KAAK00D,IAGxB,IAAM8e,EAAoB,GAO1B,OALA1iE,KAAKqxD,UAAU3kD,SAAQ,SAAAk3C,GACrB,IAAM+e,EAAU,EAAKze,cAAcuI,EAAkB7I,EAASrN,YAAaoN,GAC3E8I,EAAiBxc,QAAQ4T,eAAe9oC,IAAI6oC,EAAU+e,GACtDD,EAAQxzE,KAAKyzE,EAAQve,kBAAkBC,WAElCqe,GAET,YAAAD,gBAAA,SAAgBhW,EAAyC9I,EAAkBuK,GAEzE,OADM,EAAc,EAAA0U,UAAUC,WAAWlf,EAAO,GAAGjc,KAAMwmB,EAAMluD,KAAK0/C,MAAO1/C,KAAK8iE,YAAW,GAA3E,GACD96E,QAEjB,YAAA+7D,kBAAA,SAAkB0I,EAAyCnmB,EAAe4nB,EAAc3kC,GAChF,QAAoB,EAAAq5C,UAAUC,WAAWv8B,EAAMoB,KAAMwmB,EAAMluD,KAAK0/C,MAAO1/C,KAAK8iE,YAAW,GAAtFrU,EAAM,KACP7rD,EADgB,KACC2mB,GACjBmjC,EAAc+B,EAAOllC,GAErBs3B,EAAe,qCADR6L,EAAY1kE,OAES,yBACpBkmE,EAAI,QAAQtrD,EAAM,0CAGhC,MAAO,CACLqK,KAAM,aACNgsC,aAAc,CAACwT,EAAiBxH,yBAAyB3e,IACzDgQ,aAAcmW,EAAiB1H,6BAA6B2H,GAC5D5T,SAAU,CAAC,KACX+H,aAAY,IAGhB,YAAAqD,cAAA,SAAcuI,EAAyClW,EAA0BoN,GAC/E,IAAMkJ,EAAW,CAACJ,EAAiB9H,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KAC9F,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBACIqI,EAAiBpH,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MAC9FmrC,YAAa,KAInB,EArDA,CAAgC,EAAAgW,OAAnB,EAAAnX,c,ukBCNb,cAEA,UAEA,SAEA,2B,+CAKA,OALkC,OAChC,YAAA7wC,IAAA,SAAI0xC,EAAyC9I,GAC3C,IAAM+T,EAAa,EAAAnd,UAAUgC,aAAaoH,EAAO,GAAGjc,KAAM1nC,KAAKw+D,MAC/D,MAAO,CAAC,EAAA/H,QAAQhK,EAAkB9I,EAAO,GAAI+T,KAEjD,EALA,CAAkC,EAAAsL,SAArB,EAAAjX,gB,mkBCNb,cAEA,UAIA,2B,+CA6BA,OA7B8B,OAC5B,YAAAhxC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM/K,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjD6gD,EAAc/I,EAAO,GAAGjc,KAAKx/C,QAC7B+6E,EAAUtf,EAAOhQ,KAAI,SAAC1sD,EAAGtB,GAAM,OAAGizD,EAAKC,UAAS,KAAKlzD,EAAC,iBAAe6nC,KAAK,OAC1EsrB,EAAW6K,EAAOhQ,KAAI,SAAC1sD,EAAGtB,GAAM,UAAIA,KAC1C,MAAO,CACLszD,aAAc0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAC/DyxD,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAQ,EACR+H,aAAc,gDAEIoiB,EAAO,cACrBrqB,EAAK73B,OAAM,sBAEf+/B,SAAS,IAGb,YAAAoD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OACjG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EA7BA,CAA8B,EAAAmW,KAAjB,EAAAjX,Y,okBCNb,IAKA,2B,+CAqCA,OArC+B,OAC7B,YAAAlxC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAGpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAKhD,IAJA,IAAMsK,EAAatK,EAAO,GAAGjc,KAAKx/C,QAC5BwkE,EAAc,IAAI14C,MAAMi6C,EAAWjmE,QAEnCm7E,EAAoB,GACjBx9E,EAAI,EAAGA,EAAIsoE,EAAWjmE,OAAQrC,IACrC+mE,EAAY/mE,GAAKsoE,EAAWtoE,GAAKg+D,EAAO,GAAGyB,WAAWz/D,GACtDw9E,EAAQj0E,KAAK,YAAYvJ,EAAC,+BAA+BA,EAAC,OAAOsoE,EAAWtoE,GAAE,QAGhF,IAAM4yD,EAAOmU,EAAY1kE,OACnB64D,EAAe,qCACStI,EAAI,4BACjBA,EAAI,aACjB4qB,EAAQ31C,KAAK,MAAK,sCAGtB,MAAO,CACLyrB,aAAc0K,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAksD,EAAQkU,yBAAyBpgE,MAC/DyxD,aAAcvF,EAAQgU,6BAA6B2H,GACnD5T,SAAU,CAAC,KACX+H,aAAY,IAGhB,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OACjG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EArCA,CALA,QAK+BqW,MAAlB,EAAAhX,a,k+BCLb,cAEA,UACA,UAIA,2B,+CA+DA,OA/DoC,OAClC,YAAArxC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAA0f,eAAA,SAAeC,GACb,IAAMC,EAAOvjE,KAAKwjE,gBAAgBF,EAAY,IAC9C,OAAO,EAAA/oB,UAAUkpB,gBAAgBH,EAAY,GAAIC,IAEnD,YAAAxf,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM2f,EAAc3f,EAAOhQ,KAAI,SAAA9uD,GAAK,OAAAA,EAAE6iD,KAAKx/C,WACrCq7E,EAAOvjE,KAAKwjE,gBAAgBF,EAAY,IACxCI,EAAsB1jE,KAAKqjE,eAAeC,GAC1C/qB,EAAOoL,EAAO,GAAGjc,KAAK1/C,OAItB64D,EAAe,WACjB7gD,KAAK2jE,oBAAoB,OAAQJ,EAAMhrB,GAAK,qCAClBA,EAAI,uBACtBA,EAAI,gEAIVjC,EAAevF,EAAQgU,6BAA6B2e,EAAqB,EAAGA,GAClF,MAAO,CAACzqB,aAAc,CAAClI,EAAQkU,yBAAyBtB,EAAO,KAAMrN,aAAY,EAAEwC,SAAU,CAAC,KAAM+H,aAAY,IAElH,YAAAqD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,KACrF,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGjB,YAAA6W,sBAAA,SAAsB7yB,EAAgCkd,EAAsBhhD,GAC1E,IAAMy/C,EAAc1sD,KAAKqjE,eAAe,CAACpV,IAIzC,OAHKhhD,IACHA,EAAO,QAEF,CACLA,KAAI,EACJowC,KAAMr9C,KAAK2jE,oBAAoB12D,EAAMjN,KAAKwjE,gBAAgBvV,GAAavB,EAAY1kE,QACnF45B,KAAM,EAAAi8B,aAAagmB,WACnB5V,WAAU,EACVvB,YAAW,IAGL,YAAA8W,gBAAV,SAA0BvV,GACxB,IAAIsV,EAAOvjE,KAAKujE,KAIhB,OAHIA,GAAQA,EAAKv7E,SAAWimE,EAAWjmE,SACrCu7E,EAAO,OAAKtV,EAAW78B,SAAS0rB,WAE3BymB,GAEC,YAAAI,oBAAV,SAA8B12D,EAAcs2D,EAAgBhrB,GAC1D,IAAMurB,EAAc,GACpBA,EAAY50E,KAAK,QAAQ+d,EAAI,cAAcsrC,EAAI,cAAcA,EAAI,QACjE,IAAK,IAAI5yD,EAAI,EAAGA,EAAI4yD,IAAQ5yD,EAC1Bm+E,EAAY50E,KAAK,OAAOq0E,EAAK59E,GAAE,SAASA,EAAC,MAG3C,OADAm+E,EAAY50E,KAAK,OACV40E,EAAYt2C,KAAK,OAE5B,EA/DA,CAAoC,EAAAu2C,WAAvB,EAAA1X,kB,8ZCPb,cACA,UAIA,2BA8EA,OA7EE,YAAAjF,YAAA,SAAYqF,EAAyCnmB,GACnD,IAAMomB,EAAcpmB,EAAMmD,MACpB,IAAkBgjB,EAAiBxc,QAAQuW,eAAeC,iBAAiBngB,EAAMmD,OAAM,GACvF6M,EAA8B,CAClC7tC,MAFU,KAGVC,OAHkB,KAIlB09C,SAAU,EACV3c,MAAOijB,EACPlU,QAAS,EAAA+B,UAAUsM,eAAe6F,GAClC9V,cAAe8V,GAEX9T,EAAO,EAAAvB,QAAQoV,EAAiBxc,QAAQuE,QAAQY,UAAUvpC,SAqD1D0qC,EACF,CAACtpC,KAAM,cAAegsC,aAAc,CAAC3S,GAAQgQ,aAAY,EAAEwC,SAAU,CAAC,KAAM+H,aAjD3D,8sCA6CDjI,EAAKC,UAAS,6BAC5BD,EAAK73B,OAAM,oCAG6E+/B,SAAS,GACjG8C,EAAW6I,EAAiBxc,QAAQ4T,eAAe9Z,MAAMwM,GAEzDytB,EAAUvX,EAAiBxc,QAAQuE,QAAQY,UAAU6uB,WAAW,OAAQ,GACxEze,EACFiH,EAAiBxc,QAAQuE,QAAQY,UAAU8uB,gBAAgB5tB,EAAa7tC,MAAO6tC,EAAa5tC,OAAQs7D,GAElG/f,EAAU,CAACM,kBAAmB,CAACje,GAAQ8d,kBADnBqI,EAAiB7G,wBAAwBtP,EAAc,QAASkP,GAC1BuH,YAAa,IAG7E,OADAN,EAAiBxc,QAAQ4T,eAAe9oC,IAAI6oC,EAAUK,GAC/CA,EAAQG,mBAEnB,EA9EA,GAAa,EAAA+C,oB,6wBCLb,cAEA,UACA,UAIA,cACE,WAAsB8F,EAAsDC,GAA5E,MACE,YAAMD,IAAe,K,OADD,EAAAA,iBAAsD,EAAAC,W,EAiD9E,OAlDkC,OAIhC,YAAAnyC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,IAAM+I,EAAc/I,EAAO,GAAGjc,KAAKx/C,QAC7B8wD,EAAcjI,EAAQd,QAAQkF,KAChCpE,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,EAAMA,EAAO,GAAGjc,MAAM,GACrEqJ,EAAQkU,yBAAyBtB,EAAO,IAEtCrN,EAAevF,EAAQd,QAAQkF,KACjCpE,EAAQgU,6BAA6B2H,EAAa,EAAGA,EAAa,CAAClW,UAAU,EAAM6P,WAAW,IAC9FtV,EAAQgU,6BAA6B2H,GACnC9T,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SACjDg1C,EAAe,WACjB7gD,KAAKktD,SAAS7P,KAAI,2CAEPzE,EAAKC,UAAS,gCACnB74C,KAAKktD,SAASjgD,KAAI,iBACtB2rC,EAAK73B,OAAM,yBAIjB,OAAIgwB,EAAQd,QAAQkF,KACX,CACL8D,aAAc,CAACD,GACf1C,aAAY,EACZwC,SAAU,CAAC,KACX+H,aAAY,EACZC,SAAS,EACT0D,oBAAoB,EACpBE,qBAAqB,GAGhB,CAACzL,aAAc,CAACD,GAAc1C,aAAY,EAAEwC,SAAU,CAAC,KAAM+H,aAAY,EAAEC,SAAS,IAG/F,YAAAoD,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMyW,EAAUrpB,EAAQd,QAAQkF,KAC5BpE,EAAQ4T,uBAAuBhB,EAAO,GAAI5S,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,EAAO,IAAI,IACpG5S,EAAQ4T,uBAAuBhB,EAAO,IAC1C,MAAO,CACLY,kBAAmB,CAAC6V,GACpBhW,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAc8jB,EAAQ/V,OAAOziC,MAChGmrC,YAAa,KAGnB,EAlDA,CAAkC,EAAAoX,SA0KlC,SAASC,EAAiB/gB,GACxB,IAAMp2C,EAAUo2C,EAAK,IASrB,MAAO,CAAChG,KARK,aACLpwC,EAAI,2BACDo2C,EAAK,qBAETp2C,EAAI,0BACAo2C,EAAK,gBAGFp2C,KAAI,EAAE2U,KAAM,EAAAi8B,aAAaiQ,YApL5B,EAAAhG,eAoDb,qBACE,OAAOsc,EAAiB,QAE1B,sBACE,OAAOA,EAAiB,SAE1B,sBACE,OAAOA,EAAiB,SAE1B,sBACE,OAAOA,EAAiB,SAE1B,sBACE,OAAOA,EAAiB,SAE1B,qBACE,OAAOA,EAAiB,QAE1B,qBACE,OAAOA,EAAiB,QAE1B,uBACE,OAAOA,EAAiB,UAE1B,0BAUE,MAAO,CAAC/mB,KARK,2GAQCpwC,KATD,aASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBACE,OAAOsW,EAAiB,QAE1B,qBAUE,MAAO,CAAC/mB,KARK,iGAQCpwC,KATD,OASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBAgBE,MAAO,CAACzQ,KAdK,wRAcCpwC,KAfD,OAeO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,qBACE,OAAOsW,EAAiB,QAE1B,sBAUE,MAAO,CAAC/mB,KARK,yHAQCpwC,KATD,QASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,yBAUE,MAAO,CAACzQ,KARK,+IAQCpwC,KATD,WASO2U,KAAM,EAAAi8B,aAAaiQ,aAEzC,sBACE,OAAOsW,EAAiB,SAE1B,qBACE,OAAOA,EAAiB,QAE1B,sBAcE,MAAO,CAAC/mB,KAZK,yOAYCpwC,KAbD,QAaO2U,KAAM,EAAAi8B,aAAaiQ,c,0HC9KzC,cAGA,UACA,UAEA,2BA0DA,OAzDE,YAAA/yC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAChD,GAAsB,IAAlBA,EAAO37D,OACT,MAAM,IAAI4F,MAAM,oDAGlB,IAAMy2E,EAAetzB,EAAQ8T,eAAelB,EAAO,GAAGmB,QAAQ,GAC9D,IAAKuf,EACH,MAAM,IAAIz2E,MAAM,mCAGlB,IACM02E,EAAiD,IADnCvzB,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,GACrC/M,cAAc5uD,OACtCsuD,EAAevF,EAAQgU,6BAA6Bsf,EAAaztB,eAEjE2B,EADcjC,EAAa7M,MACRzhD,OAEnBo+D,EAAW,EAAAiI,YAAY,KAAM9V,GAC7BgsB,EAAYne,EAASl+D,OAAO,GAC5BwyE,EAAiB,EAAAxgB,kBAAkB3B,GACnCgW,EAAgB,EAAAC,oBAChBgW,EAAeF,EAAW,GAAKG,EAAgBlsB,EAAM6N,GACrD9N,EAASC,GAAQ,EAAI,KAAO,QAAQgsB,EAAU/2C,KAAK,KAAI,IAEvDqzB,EAAe,SACnB0N,EAAa,8BAEXmM,EAAc,yIAGU8J,EAAY,eAP3B,EAAAntB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SAS9CkV,OAAM,mCAAmCu3B,EAAM,0BAIxD,MAAO,CACLrrC,KAAM,cACNgsC,aAAc,CAAClI,EAAQkU,yBAAyBtB,EAAO,GAAI,GAAG,EAAMA,EAAO,GAAGjc,MAAM,IACpF4O,aAAY,EACZwC,SAAU,CAAC,KACX+H,aAAY,EACZC,SAAS,EACT0D,oBAAoB,EACpBE,qBAAqB,IAGzB,YAAAR,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAW,CAAC9b,EAAQ4T,uBAAuBhB,EAAO,GAAIpN,EAAY0C,aAAa,IAAI,IACzF,MAAO,CACLsL,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,KAGnB,EA1DA,GA4DA,SAAgB0X,EAAgBlsB,EAAc7Q,GAC5C,GAAa,IAAT6Q,EACF,MAAO,KAIT,IADA,IAAID,EAAS,GACJ3yD,EAAI,EAAGA,EAAI4yD,EAAM5yD,IACxB2yD,GAAU5Q,EAAK/hD,GACXA,EAAI4yD,EAAO,IACbD,GAAU,KAGd,OAAOA,EAxEI,EAAAoP,cA4Db,qB,ykBCnEA,cAEA,UAEA,SAEA,2B,+CAKA,OALoC,OAClC,YAAA3sC,IAAA,SAAI0xC,EAAyC9I,GAC3C,IAAM+T,EAAa,EAAAnd,UAAUmqB,eAAe/gB,EAAO,GAAGjc,KAAM1nC,KAAKw+D,MACjE,MAAO,CAAC,EAAA/H,QAAQhK,EAAkB9I,EAAO,GAAI+T,KAEjD,EALA,CAAoC,EAAAiN,WAAvB,EAAApY,kB,wkBCNb,cAEA,UAIA,2B,+CAuLA,OAvLmC,OACjC,YAAAxxC,IAAA,SAAI0xC,EAAyC9I,GAC3C,OAAO8I,EAAiB1xC,IAAI/a,KAAM2jD,IAEpC,YAAAI,kBAAA,SAAkBhT,EAAgC4S,GAchD,IAdF,WACQ3K,EAAcjI,EAAQkU,yBAAyBtB,EAAO,IACtD+I,EAAc/I,EAAO,GAAGjc,KAAKiM,KAAI,SAAC9K,EAAKljD,GAAM,OAAAyf,KAAK+pB,MAAM0Z,EAAM,EAAKu3B,OAAOz6E,OAC1E2wD,EAAevF,EAAQgU,6BAA6B2H,GACpD7jB,EAAM6jB,EAAY1kE,OAElB4wD,EAAO,EAAAvB,QAAQtG,EAAQd,QAAQuE,QAAQY,UAAUvpC,SAEjD+4D,EAAgB,IAAI5wD,MAAc60B,GAClCg8B,EAAe,IAAI7wD,MAAc60B,GACnCi8B,EAAuB,8BACJj8B,EAAG,+BACJA,EAAG,aAEhBziD,EAAIyiD,EAAM,EAAGziD,GAAK,EAAGA,IAC5Bw+E,EAAcx+E,GAAMA,IAAMyiD,EAAM,EAAK,EAAI+7B,EAAcx+E,EAAI,GAAKsmE,EAAYtmE,EAAI,GAChFy+E,EAAaz+E,GAAMA,IAAMyiD,EAAM,EAAK,EAAIg8B,EAAaz+E,EAAI,GAAKu9D,EAAO,GAAGjc,KAAKthD,EAAI,GAEjF0+E,GAAwB,0BACP1+E,EAAC,OAAOw+E,EAAcx+E,GAAE,0BACzBA,EAAC,OAAOy+E,EAAaz+E,GAAE,YAGzC,IAAM2+E,EAAwB,qFAEU/rB,EAAYvwC,MAAK,KAAKuwC,EAAYtwC,OAAM,2CAC9CkwC,EAAKC,UAAS,kDAyIhD,MAAO,CACLI,aAAc,CAACD,GACf1C,aAAY,EACZwC,SAAU,CAAC,KACX+H,aAxIiC,YAAd7gD,KAAKujB,KAEtB,WACAwhD,EAAqB,qCACKl8B,EAAG,4FAEkByN,EAAa7tC,MAAK,KAAK6tC,EAAa5tC,OAAM,iBAEvFo8D,EAAoB,0DAGIj8B,EAAG,saAerB,IAARA,EAEI,WACJk8B,EAAqB,+HAG0BzuB,EAAa7tC,MAAK,KAAK6tC,EAAa5tC,OAAM,iBAEvFo8D,EAAoB,qoCA2BQnhB,EAAO,GAAGjc,KAAK,GAAE,ovBAuB3C,WACJq9B,EAAqB,+HAG0BzuB,EAAa7tC,MAAK,KAAK6tC,EAAa5tC,OAAM,iBAEvFo8D,EAAoB,oxBAoBQnhB,EAAO,GAAGjc,KAAK,GAAE,ovBA2BjDyZ,UAAW,CAAC,CAACl0C,KAAM,SAAU2U,KAAM,MAAO+/B,YAAa3hD,KAAKogE,OAAOp4E,WAGvE,YAAAk8D,cAAA,SAAcnT,EAAgCwF,EAA0BoN,GACtE,IAAMkJ,EAAWlJ,EAAOhQ,KAAI,SAAC9uD,EAAGc,GAAM,OAAAorD,EAAQ4T,uBAAuB9/D,EAAG0xD,EAAY0C,aAAatzD,OACjG,MAAO,CACL4+D,kBAAmBsI,EACnBzI,kBAAmBrT,EAAQsU,4BAA4B9O,EAAYD,aAAcuW,EAAS,GAAGxI,OAAOziC,MACpGmrC,YAAa,CAACqT,OAAQpgE,KAAKogE,OAAOzsB,KAAI,SAAArpD,GAAK,OAAA8a,KAAKuO,KAAKrpB,SAG3D,EAvLA,CAAmC,EAAA62E,UAAtB,EAAA7U,iB,opBCNb,cACA,UAEA,UACA,UAcA,aAKE,WACW0Y,EAAqC5vB,EACrC6vB,GADA,KAAAD,WAAqC,KAAA5vB,YACrC,KAAA6vB,wBACTjlE,KAAKklE,KAAO,IAAIzzB,IAChBzxC,KAAKmlE,iBAAkB,EAwJ3B,OAtJE,YAAArhB,YAAA,SAAYvoC,GACV,OAAOvb,KAAKklE,KAAK9yE,IAAImpB,IAEvB,YAAAyoC,YAAA,SAAYzoC,EAAcqoC,GACxB5jD,KAAKklE,KAAKj5E,IAAIsvB,EAAKqoC,IAErB,YAAA7oC,IAAA,SAAIqqD,EAAyBnhB,GAA7B,I,EAAA,OACEjkD,KAAKglE,SAASK,MAAM,KAAM,uBAAoD,QAA9B,EAAAD,EAAc7uB,YAAYtpC,YAAI,QAAI,mBAAoB,WACpG,IAAMmnD,EAAK,EAAKhf,UAAUgf,GACpBkR,EAAUF,EAAcE,QAC9BlR,EAAGmR,WAAWD,GACd,IACE,EAAKE,WAAWvhB,EAAQG,mBACnB,EAAK+gB,iBACR,EAAKM,eAAeL,EAAcM,iBAEpC,EAAKC,aAAaP,EAAc5Q,iBAAkBvQ,EAAQ8I,YAAa9I,EAAQM,mBAC/E,MAAO1nC,GAEP,MADA,EAAAy4B,OAAO7sD,MAAM,iBAAkB28E,EAAc7uB,YAAYsK,cACnDhkC,EAER,EAAKmoD,SAASK,MAAM,UAAW,oBAAoB,WACjD,EAAKO,OAAOR,EAAenhB,QAE5BjkD,KAAKo1C,YAEV,YAAAV,QAAA,sBACM10C,KAAK6lE,cACP7lE,KAAKo1C,UAAU0wB,aAAa9lE,KAAK6lE,cAEnC7lE,KAAKklE,KAAKx4D,SAAQ,SAAAnnB,GAAK,SAAK6vD,UAAU2wB,cAAcxgF,EAAE+/E,aAExD,YAAAv7B,MAAA,SAAMwM,GAAN,WACE,OAAOv2C,KAAKglE,SAASK,MAAM,UAAW,wBAAwB,WAC5D,IAAMW,EAAe,IAAI,EAAApkB,iBAAiB,EAAKxM,UAAWmB,GACpD0vB,EAAaD,EAAaplB,aAC1B0kB,EAAU,EAAKY,QAAQD,GAQ7B,MAPiB,CACf1vB,YAAW,EACX+uB,QAAO,EACP9Q,iBAAkB,EAAK2R,oBACnBb,EAASU,EAAatwB,QAAQa,YAAYuC,SAAUktB,EAAatwB,QAAQa,YAAY4K,WACzFukB,gBAAiB,EAAKU,mBAAmBd,QAKrC,YAAAM,OAAV,SAAiBhiB,EAAoBK,GAC/BA,EAAQkQ,MACV,EAAA7e,OAAOE,QAAQ,iBAAkB,wBACjCyO,EAAQkQ,KAAKn0D,KAAKo1C,UAAWwO,IAE7B5jD,KAAKo1C,UAAU+e,QAGT,YAAA+R,QAAV,SAAkBG,GAChB,IAAKrmE,KAAK6lE,aAAc,CACtB,EAAAvwB,OAAOE,QAAQ,kBAAmB,0DAClC,IAAM8wB,EAAqB,EAAAC,sBAAsBvmE,KAAKo1C,UAAUvpC,SAChE7L,KAAK6lE,aAAe7lE,KAAKo1C,UAAUoxB,cAAcF,EAAoBtmE,KAAKo1C,UAAUgf,GAAGqS,eAErF,EAAAtgD,IAAIugD,OACN,EAAApxB,OAAOE,QAAQ,kBAAmB,gBACtC6wB,EAAgB,MAGd,IAAMM,EAAa3mE,KAAKo1C,UAAUoxB,cAAcH,EAAkBrmE,KAAKo1C,UAAUgf,GAAGwS,iBAC9EtB,EAAUtlE,KAAKo1C,UAAUyxB,cAAc7mE,KAAK6lE,aAAcc,GAEhE,OADA3mE,KAAKo1C,UAAU0wB,aAAaa,GACrBrB,GAET,YAAAE,WAAA,SAAW5gB,GACT,IAAMn8C,EAAQm8C,EAAGn8C,MACXC,EAASk8C,EAAGl8C,OAClB,EAAA4sC,OAAOE,QACH,kBACA,8CAA8C/sC,EAAK,IAAIC,EAAM,WAAWk8C,EAAGnb,MAAK,UAAUmb,EAAGP,OAAOziC,MACxG5hB,KAAKo1C,UAAU0xB,kBAAkBliB,EAAGY,QAAS/8C,EAAOC,IAEtD,YAAA+8D,eAAA,SAAeC,GACb,IAAMqB,EAAiBrB,EAAgBrxC,SACjC2yC,EAAqBtB,EAAgBuB,aAC3CjnE,KAAKo1C,UAAU8xB,oBAAoBH,EAAgBC,GACnDhnE,KAAKmlE,iBAAkB,GAEzB,YAAAQ,aAAA,SAAanR,EAA6CzH,EAA0BriD,G,QAC5E0pD,EAAKp0D,KAAKo1C,UAAUgf,GACtB+S,EAAkB,E,IACtB,IAAkD,QAAA3S,GAAgB,8BAAE,CAAzD,cAAC,EAAI,OAAE5yC,EAAI,OAAE,EAAQ,WAAE+/B,EAAW,cAC3C,OAAQ//B,GACN,IAAK,YACH5hB,KAAKonE,YAAY18D,EAASy8D,GAAkB,EAAUA,GACtDA,IACA,MACF,IAAK,QACCxlB,EACFyS,EAAGiT,WAAW,EAAUta,EAAY,IAEpCqH,EAAGkT,UAAU,EAAUva,EAAY,IAErC,MACF,IAAK,MACCpL,EACFyS,EAAGmT,WAAW,EAAUxa,EAAY,IAEpCqH,EAAGa,UAAU,EAAUlI,EAAY,IAErC,MACF,QACE,MAAM,IAAIn/D,MAAM,4BAA4Bg0B,K,mGAIpD,YAAAwlD,YAAA,SAAYxiB,EAAiB4iB,EAAqCnzC,GAChEr0B,KAAKo1C,UAAUqyB,qBAAqB7iB,EAAGY,QAASnxB,EAAUmzC,IAE5D,YAAApB,mBAAA,SAAmBd,GACjB,MAAO,CACLjxC,SAAUr0B,KAAK0nE,kBAAkBpC,EAAS,YAC1C2B,aAAcjnE,KAAK0nE,kBAAkBpC,EAAS,kBAGlD,YAAAa,oBAAA,SAAoBb,EAAuBxsB,EAAqBqI,G,YAExDqT,EAA8C,GACpD,GAAI1b,E,IACF,IAAsB,QAAAA,GAAQ,8BAAE,CAA3B,IAAM4I,EAAO,QAChB8S,EAAiBtlE,KAAK,CAAC+d,KAAMy0C,EAAS9/B,KAAM,YAAat4B,SAAU0W,KAAKkN,mBAAmBo4D,EAAS5jB,M,iGAGxG,GAAIP,E,IACF,IAAuB,QAAAA,GAAS,8BAAE,CAA7B,IAAMnB,EAAQ,QACjBwU,EAAiBtlE,KAAK,EAAD,KAAK8wD,GAAQ,CAAE12D,SAAU0W,KAAKkN,mBAAmBo4D,EAAStlB,EAAS/yC,U,iGAG5F,OAAOunD,GAET,YAAAtnD,mBAAA,SAAmBo4D,EAAuBr4D,GACxC,IACM06D,EADK3nE,KAAKo1C,UAAUgf,GACLlnD,mBAAmBo4D,EAASr4D,GACjD,GAAkB,OAAd06D,EACF,MAAM,IAAI/5E,MAAM,WAAWqf,EAAI,eAEjC,OAAO06D,GAET,YAAAD,kBAAA,SAAkBpC,EAAuBr4D,GAGvC,OAFWjN,KAAKo1C,UAAUgf,GACWsT,kBAAkBpC,EAASr4D,IAGpE,EAjKA,GAAa,EAAA26D,kB,gHChBb,cAEA,UAKA,UACA,UACA,UACA,UACA,UAGA,aAaE,WAA4BpzB,EAAuCkB,GAAvC,KAAAlB,UAAuC,KAAAkB,UACjE11C,KAAKwmD,eAAiB,IAAI,EAAAqhB,sBAAsBrzB,EAAQY,UAAU0yB,gBAClE9nE,KAAK6jD,eAAiB,IAAI,EAAA+jB,eAAe5nE,KAAK01C,QAAQsvB,SAAUxwB,EAAQY,UAAWp1C,KAAKwmD,gBACxFxmD,KAAKylD,eAAiB,IAAI,EAAAsiB,eACtBvzB,EAAQY,UAAWp1C,KAAKwmD,eAAgBxmD,KAAK01C,QAAQsvB,SACrD,CAACgD,cAA4C,SAA7BxzB,EAAQU,mBAC5Bl1C,KAAKujD,uBAAyB,IAAI9R,IAClCzxC,KAAKwjD,yBAA2B,IAAI/R,IACpCzxC,KAAKunD,YAAc,IAAI9V,IACvBzxC,KAAKynD,cAAgB,IAAIhW,IACzBzxC,KAAKm1C,KAAOX,EAAQW,KACpBn1C,KAAKyjD,eAAiB,IAAIhS,IAC1BzxC,KAAK0jD,eAAiB,IAAIjS,IA4C9B,OAzCE,YAAAw2B,uBAAA,WACE,OAAO,IAAI,EAAAtgB,sBAAsB3nD,OAEnC,YAAAkoE,mBAAA,SAAmBjhC,GACjB,IAAMkhC,EAAelhC,EAAMmhC,YAAYvoB,QAAO,SAAA54D,GAAK,OAAY,IAAZA,EAAEslD,MAAetlD,EAAEo9D,UAAQ1Q,KAAI,SAAA1sD,GAAK,OAAAA,EAAEo9D,OAAQS,UACjG9kD,KAAKmoE,aAAe,IAAI/pB,IAAI+pB,IAE9B,YAAAjiB,cAAA,SAAcL,GACZ,QAAO7lD,KAAKmoE,cAAenoE,KAAKmoE,aAAazpB,IAAImH,IAEnD,YAAAwiB,eAAA,SAAexiB,GACb7lD,KAAKmoE,aAAarnE,IAAI+kD,IAExB,YAAAhB,eAAA,SAAegB,EAAqBrP,GAClC,OAAIA,EACKx2C,KAAKujD,uBAAuBnxD,IAAIyzD,GAEhC7lD,KAAKwjD,yBAAyBpxD,IAAIyzD,IAG7C,YAAAI,eAAA,SAAeJ,EAAqBC,EAA0BtP,QAAA,IAAAA,OAAA,GAC5D,EAAAlB,OAAOE,QAAQ,sBAAuB,iCAClCgB,EACFx2C,KAAKujD,uBAAuBt3D,IAAI45D,EAAUC,GAE1C9lD,KAAKwjD,yBAAyBv3D,IAAI45D,EAAUC,IAGhD,YAAApR,QAAA,sBACE10C,KAAK6jD,eAAenP,UACpB10C,KAAKylD,eAAesB,sBACpB/mD,KAAKujD,uBAAuB72C,SAAQ,SAAAk4C,GAAM,SAAKa,eAAeuB,eAAepC,GAAI,MACjF5kD,KAAKujD,uBAAyB,IAAI9R,IAClCzxC,KAAKwjD,yBAAyB92C,SAAQ,SAAAk4C,GAAM,SAAKa,eAAeuB,eAAepC,GAAI,MACnF5kD,KAAKwjD,yBAA2B,IAAI/R,KAEtC,YAAAxgD,QAAA,SAAQnK,EAAkBwhF,EAA0BrhC,GAClD,IAAM7jB,EAAK,EAAAmlD,gBAAgBzhF,EAAMwhF,EAAQ,EAAA1gB,wBAEzC,OADAxkC,EAAGqxB,WAAW3tD,EAAK8kB,WAAY9kB,EAAMmgD,GAC9B7jB,GAEX,EArEA,GAAa,EAAAuyB,uB,4JChBb,cAqCA,aAKE,WAAYye,EAA4BhO,GACtC,QADsC,IAAAA,MAAA,GACrB,IAAbA,EACFpmD,KAAKwoE,eAAiBpU,EAAGqU,KACzBzoE,KAAKmqB,OAASiqC,EAAGsU,IACjB1oE,KAAK2oE,YAAcvU,EAAG5hB,MACtBxyC,KAAK85D,YAAc1T,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAIx4D,MAAM,+BAA+Bw4D,GAL/CpmD,KAAKwoE,eAAiBpU,EAAGwU,QACzB5oE,KAAKmqB,OAASiqC,EAAGyU,KACjB7oE,KAAK2oE,YAAcvU,EAAG5hB,MACtBxyC,KAAK85D,YAAc1T,GAiCzB,OA5BE,YAAAh5B,OAAA,SAAOzoC,EAA4BmkF,GACjC,IAAIrvC,EACAse,EAcJ,OAbIpzD,EAAIshD,cAAgBj5C,eACtB,EAAAsoD,OAAOG,QAAQ,UAAW,2DAC1BsC,EAAS,IAAI/qD,aAAarI,IAExBmkF,EAAc9oE,KAAK85D,YAAcn1E,EAAIqD,QACvC,EAAAstD,OAAOG,QAAQ,UAAW,kDAC1BsC,EAASpzD,EACT80C,EAASz5B,KAAKszB,SAASw1C,EAAc9oE,KAAK85D,aAC1C/hB,EAAOrrC,SAAQ,SAACzlB,EAAGtB,GAAM,OAAA8zC,EAAO9zC,GAAKsB,MAGrCwyC,EADAse,EAASpzD,EAGJ80C,GAET,YAAAnG,SAAA,SAASnmB,GACP,OAAO,IAAIngB,aAAoB,EAAPmgB,IAE1B,YAAAsQ,OAAA,SAAO14B,EAA+BgkF,GACpC,OAAyB,IAArB/oE,KAAK85D,YACe/0E,EAAwB86D,QAAO,SAAC59B,EAAOsH,GAAU,OAAAA,EAAQ,GAAM,KAAG/L,SAAS,EAAGurD,GAG/FhkF,EAAOy4B,SAAS,EAAGurD,IAE9B,EAhDA,GAAa,EAAAC,wBAoDb,iBAKE,WAAY5U,EAA2BhO,EAAcuiB,GACnD,QADqC,IAAAviB,MAAA,GACpB,IAAbA,GAA+B,IAAbA,EACpB,MAAM,IAAIx4D,MAAM,+BAA+Bw4D,GAEjDpmD,KAAKwoE,eAAiBpU,EAAGyU,KACzB7oE,KAAKmqB,OAASiqC,EAAGyU,KACjB7oE,KAAK85D,YAAc1T,EACnBpmD,KAAK2oE,YAAcA,GAAevU,EAAG5hB,MAqBzC,OAnBE,YAAAplB,OAAA,SAAOzoC,EAAmBmkF,GACxB,IAAI3jD,EAAOxgC,EAMX,OALyB,IAArBqb,KAAK85D,cACP,EAAAxkB,OAAOE,QAAQ,UAAW,iCAC1BrwB,EAAOnlB,KAAKszB,SAASw1C,GACrBnkF,EAAI+nB,SAAQ,SAACzlB,EAAGtB,GAAM,OAAAw/B,EAAS,EAAJx/B,GAASsB,MAE/Bk+B,GAET,YAAAmO,SAAA,SAASnmB,GACP,OAAO,IAAIngB,aAAoB,EAAPmgB,IAE1B,YAAAsQ,OAAA,SAAO14B,EAA+BgkF,GACpC,OAAyB,IAArB/oE,KAAK85D,YACe/0E,EAAwB86D,QAAO,SAAC59B,EAAOsH,GAAU,OAAAA,EAAQ,GAAM,KAAG/L,SAAS,EAAGurD,GAG/FhkF,EAAOy4B,SAAS,EAAGurD,IAE9B,EAjCA,GAAa,EAAAE,uBAmCb,iBAKE,WAAY7U,EAA2BhO,GACrC,QADqC,IAAAA,MAAA,GADvC,KAAA0T,YAAc,EAEK,IAAb1T,EACFpmD,KAAKwoE,eAAiBpU,EAAG8U,MACzBlpE,KAAKmqB,OAASiqC,EAAG8U,MACjBlpE,KAAK2oE,YAAcvU,EAAG+U,cACtBnpE,KAAK85D,YAAc1T,MACd,IAAiB,IAAbA,EAMT,MAAM,IAAIx4D,MAAM,+BAA+Bw4D,GAL/CpmD,KAAKwoE,eAAiBpU,EAAGyU,KACzB7oE,KAAKmqB,OAASiqC,EAAGyU,KACjB7oE,KAAK2oE,YAAcvU,EAAG+U,cACtBnpE,KAAK85D,YAAc1T,GAiBzB,OAZE,YAAAh5B,OAAA,SAAOzoC,EAAiBykF,GACtB,OAAO,IAAIvhF,WAAWlD,EAAII,OAAQJ,EAAIkvD,WAAYlvD,EAAIkJ,aAExD,YAAAylC,SAAA,SAASnmB,GACP,OAAO,IAAItlB,WAAWslB,EAAOnN,KAAK85D,cAEpC,YAAAr8C,OAAA,SAAO14B,EAA+BgkF,GACpC,GAAIhkF,aAAkB8C,WACpB,OAAO9C,EAAOy4B,SAAS,EAAGurD,GAE5B,MAAM,IAAIn7E,MAAM,uBAAuB7I,EAAOkhD,cAElD,EAhCA,GAAa,EAAAojC,oB,6PC5Hb,cACA,UAkBA,aACE,WAAmBvB,GAAA,KAAAA,iBAoCrB,OAnCE,YAAArhB,iBAAA,SAAiBhd,EAA0B8c,GAEzC,GAAqB,IAAjB9c,EAAMzhD,OACR,MAAO,CAAC,EAAG,GAEb,IAAM8/E,EAAiB9nE,KAAK8nE,eAC5B,GAAIvhB,QAA6BrrC,IAApBqrC,EAAM8O,UAAyB,CAE1C,IAAMiU,EAAQ/iB,EAAM8O,WAAa5rB,EAAMzhD,OAAS,EAAIyhD,EAAMvhD,MAAMq+D,EAAM8O,WAAW8I,QAAO,SAAC54E,EAAGkC,GAAM,OAAAlC,EAAIkC,KAChG8hF,EAAQhjB,EAAM8O,WAAa,EAAI,EAAI5rB,EAAMvhD,MAAM,EAAGq+D,EAAM8O,WAAW8I,QAAO,SAAC54E,EAAGkC,GAAM,OAAAlC,EAAIkC,KAC9F,KAAI6hF,EAAQxB,GAAkByB,EAAQzB,GAOpC,MAAO,CAACwB,EAAOC,GAJf,EAAAj0B,OAAOE,QACH,gBACA,2DAA2D/L,EAAK,eAAe8c,EAAM8O,WAS7F,IAJA,IAAMmU,EAAY//B,EAAM00B,QAAO,SAAC54E,EAAGkC,GAAM,OAAAlC,EAAIkC,KAEzCghB,EAAQrD,KAAK+pB,MAAM/pB,KAAKqkE,KAAKD,IAE1B/gE,EAAQq/D,GAAkBr/D,EAAQ+gE,GACnCA,EAAY/gE,GAAU,EADwBA,KAMpD,GAAIA,GAASq/D,GAAkB0B,EAAY/gE,GAAU,EACnD,MAAM,IAAI7a,MAAM,2DAA2D67C,GAE7E,MAAO,CAAChhC,EAAO+gE,EAAY/gE,IAE/B,EArCA,GAAa,EAAAihE,iCAuCb,iBACE,WAAmB5B,GAAA,KAAAA,iBAsFrB,OArFE,YAAArhB,iBAAA,SAAiBhd,EAA0B8c,GACzC,IAAMojB,EAAK3pE,KAAK4pE,eAAengC,EAAO8c,GAMtC,OALIA,GAASA,EAAM/P,WACjBmzB,EAAG,IAAM,EACTA,EAAG,IAAM,GAGJA,GAGT,YAAAC,eAAA,SAAengC,EAA0B8c,GACvC,IAAM/P,EAAW+P,GAASA,EAAM/P,SAEhC,GAAqB,IAAjB/M,EAAMzhD,OACR,OAAOwuD,EAAW,CAAC,EAAG,GAAK,CAAC,EAAG,GAEjC,IAAIsxB,EAAiB9nE,KAAK8nE,eAC1B,GAAIvhB,QAA6BrrC,IAApBqrC,EAAM8O,UAAyB,CAE1C,IAAMiU,EAAQ/iB,EAAM8O,WAAa5rB,EAAMzhD,OAAS,EAAIyhD,EAAMvhD,MAAMq+D,EAAM8O,WAAW8I,QAAO,SAAC54E,EAAGkC,GAAM,OAAAlC,EAAIkC,KAChG8hF,EAAQhjB,EAAM8O,WAAa,EAAI,EAAI5rB,EAAMvhD,MAAM,EAAGq+D,EAAM8O,WAAW8I,QAAO,SAAC54E,EAAGkC,GAAM,OAAAlC,EAAIkC,KAC9F,KAAI6hF,EAAQxB,GAAkByB,EAAQzB,GAOpC,MAAO,CAACwB,EAAOC,GAJf,EAAAj0B,OAAOE,QACH,gBACA,2DAA2D/L,EAAK,eAAe8c,EAAM8O,WAK7F,IAAIwU,EAAWpgC,EAAMvhD,MAAM,GAoB3B,GAnBIsuD,IACFsxB,GAAkC,EAYV,KALxB+B,EAAWA,EAASl2B,KAChB,SAACvtD,EAAGT,GAAM,OAAAA,GAAKkkF,EAAS7hF,OAAS,EAAK6hF,EAASlkF,GAAK,GAAM,EAAIkkF,EAASlkF,GAAKkkF,EAASlkF,GAAK,EAAKkkF,EAASlkF,OAI/FqC,SACX6hF,EAAW,CAAC,EAAGA,EAAS,MAKJ,IAApBA,EAAS7hF,OAAc,CACzB,IAAM8hF,EAAgBvtB,EAAastB,GACnCA,EAAWC,EAActtB,SAG3B,IAAMrvC,EAAO48D,EAAcF,GAC3B,OAAIA,EAAS7hF,QAAU,GAAKmlB,GAAQ26D,EAC3B,CAAC,EAAG36D,GACkB,IAApB08D,EAAS7hF,QAAgB6hF,EAAS,IAAM/B,GAAkB+B,EAAS,IAAM/B,EAC3E+B,EACsB,IAApBA,EAAS7hF,QAAgB6hF,EAAS,GAAKA,EAAS,IAAM/B,GAAkB+B,EAAS,IAAM/B,EACzF,CAAC+B,EAAS,GAAKA,EAAS,GAAIA,EAAS,IACf,IAApBA,EAAS7hF,QAAgB6hF,EAAS,IAAM/B,GAAkB+B,EAAS,GAAKA,EAAS,IAAM/B,EACzF,CAAC+B,EAAS,GAAIA,EAAS,GAAKA,EAAS,IAEtB,IAApBA,EAAS7hF,QAAgB6hF,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAM/B,GACpE+B,EAAS,IAAM/B,EACV,CAAC+B,EAAS,GAAKA,EAAS,GAAKA,EAAS,GAAIA,EAAS,IAEpC,IAApBA,EAAS7hF,QAAgB6hF,EAAS,IAAM/B,GACxC+B,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAAM/B,EACtC,CAAC+B,EAAS,GAAIA,EAAS,GAAKA,EAAS,GAAKA,EAAS,IAEtDrzB,EAMKwzB,EAAoB78D,EAAO,GAAGwmC,KAAI,SAAAvtD,GAAK,OAAI,EAAJA,KAEzC4jF,EAAoB78D,IAGjC,EAvFA,GAyFA,SAAgBovC,EAAa9S,EAAiBykB,GAM5C,IALA,IAAM1R,EAAqB,GACrBC,EAAqB,GACrBwtB,EAAuB,MAAR/b,GAAgBl6C,MAAMmxB,QAAQ+oB,IAAyB,IAAhBA,EAAKlmE,OAC3Dw2E,EAAgB,MAARtQ,GAAgB+b,EAAgB,KAAOC,EAAehc,EAAMzkB,GAAOtjC,OAC7Eza,EAAI,EACC/F,EAAI,EAAGA,EAAI8jD,EAAMzhD,SAAUrC,EAAG,CACrC,GAAY,MAAR64E,EAAc,CAChB,GAAIA,EAAK9yE,KAAO/F,GAAkB,IAAb8jD,EAAM9jD,GACzB,MAAM,IAAIiI,MAAM,sBAAsBjI,EAAC,mBAAmB8jD,EAAM9jD,GAAE,eAEpD,MAAX64E,EAAK9yE,IAAc8yE,EAAK9yE,GAAK/F,IAAmB,IAAb8jD,EAAM9jD,KAC5C62D,EAASttD,KAAKu6C,EAAM9jD,IACpB82D,EAASvtD,KAAKvJ,IAEZ64E,EAAK9yE,IAAM/F,GACb+F,IAGa,IAAb+9C,EAAM9jD,KACR62D,EAASttD,KAAKu6C,EAAM9jD,IACpB82D,EAASvtD,KAAKvJ,IAGlB,MAAO,CAAC62D,SAAQ,EAAEC,SAAQ,GAG5B,SAAgBytB,EAAehc,EAAuBzkB,GACpD,IAAM8O,EAAO9O,EAAMzhD,OAkBnB,OAfAkmE,EAAe,MAARA,EAAezkB,EAAMkK,KAAI,SAAC9tD,EAAGF,GAAM,OAAAA,KAAM,GAAgBmtE,OAAO5E,GAGvE,EAAA3xC,OACI2xC,EAAKyS,OAAM,SAAAwJ,GAAM,OAAAA,IAAO5xB,GAAQ4xB,EAAK5xB,MACrC,WAAM,qDAA+CA,EAAI,KAAKA,EAAxD,kBACU2V,KAGpB,EAAA3xC,OACI2xC,EAAKyS,MAAMyJ,IACX,WAAM,gEACUlc,KAGbA,EAAKva,KAAI,SAAApuD,GAAK,OAAAA,EAAI,EAAIgzD,EAAOhzD,EAAIA,KAE1C,SAAgB6kF,EAAM7kF,GACpB,OAAOA,EAAI,GAAM,EAEnB,SAAgBwkF,EAActgC,GAC5B,GAAqB,IAAjBA,EAAMzhD,OAER,OAAO,EAGT,IADA,IAAImlB,EAAOs8B,EAAM,GACR9jD,EAAI,EAAGA,EAAI8jD,EAAMzhD,OAAQrC,IAChCwnB,GAAQs8B,EAAM9jD,GAEhB,OAAOwnB,EAST,SAAgB68D,EAAoB78D,GAClC,IAAM1E,EAAQrD,KAAKuO,KAAKvO,KAAKqkE,KAAKt8D,IAClC,MAAO,CAAC1E,EAAOrD,KAAKuO,KAAKxG,EAAO1E,IAhKrB,EAAAo/D,wBAyFb,iBA2BA,mBAqBA,UAGA,kBAWA,uBAA4Bp+B,GAC1B,GAAqB,IAAjBA,EAAMzhD,OACR,MAAM4F,MAAM,wDAGd,MAAO,CAAC67C,EAAMzhD,OAAS,EAAIyhD,EAAMA,EAAMzhD,OAAS,GAAK,EAAGyhD,EAAMA,EAAMzhD,OAAS,KAE/E,wBAIA,uBAA4ByhD,EAAiB4gC,GAC3C,YAD2C,IAAAA,MAAA,GACpCN,EAActgC,EAAMvhD,MAAM,EAAGuhD,EAAMzhD,OAASqiF,M,2GC7NrD,cAsBA,aAKE,WACWj1B,EAAgCoR,EAA8Cwe,EAC7EsF,GADD,KAAAl1B,YAAgC,KAAAoR,iBAA8C,KAAAwe,WAC7E,KAAAsF,SACNA,EAAOtC,gBACThoE,KAAKuqE,cAAgB,IAAI94B,IACzBzxC,KAAKwqE,aAAe,IAAI/4B,IACxBzxC,KAAKyqE,cAAgB,IAAIh5B,KA+J/B,OA5JE,YAAAiU,wBAAA,SACIxd,EAA2BoV,EAAuB/gD,EAA0BgpD,GAC9E,IAAMmlB,EAAkB1qE,KAAK2qE,cAAcziC,GAErC87B,EAAUhkE,KAAKo1C,UAAU6uB,WAAWyG,EAAiBptB,EAAO8I,UAAY,EAAGb,GACjF,GAAIjI,EAAO9G,UAAsB,IAAV+O,EACrB,MAAM,IAAI33D,MAAM,mBAElB,IAGI2tB,EACAgvD,EAJE9hE,EAAQ60C,EAAO70C,MACfC,EAAS40C,EAAO50C,OAItB,GAAI1I,KAAKsqE,OAAOtC,cAAe,CAC7BzsD,EAAS9S,EAAK,IAAIC,EAAM,IAAIs7D,EAAQ75C,OAAM,IAAI65C,EAAQwE,eAAc,IAAIxE,EAAQ2E,aAChF4B,EAAgBvqE,KAAKuqE,cAAcn4E,IAAImpB,MAErCgvD,EAAgB,GAChBvqE,KAAKuqE,cAAct+E,IAAIsvB,EAAKgvD,IAG9B,IAAMC,EAAexqE,KAAKwqE,aAAap4E,IAAImpB,GAC3C,GAAIivD,GAAgBA,EAAaxiF,OAAS,EAAG,CAC3C,IAAM,EAAUwiF,EAAahvE,MAK7B,OAJA+uE,EAAcr7E,KAAK,GACL,IAAVq2D,GACFvlD,KAAKo1C,UAAUw1B,cAAc,EAASniE,EAAOC,EAAQs7D,EAAShkE,KAAK6qE,cAAc3iC,EAAU3rC,IAEtF,GAIX,EAAA+4C,OAAOE,QAAQ,iBAAkB,gCAAgC8H,EAAO70C,MAAK,IAAI60C,EAAO50C,QACxF,IAAM88C,EAAUxlD,KAAKo1C,UAAU8uB,gBAAgBz7D,EAAOC,EAAQs7D,EAAShkE,KAAK6qE,cAAc3iC,EAAU3rC,IAMpG,OAJIyD,KAAKsqE,OAAOtC,gBACduC,EAAer7E,KAAKs2D,GACpBxlD,KAAKyqE,cAAcx+E,IAAIu5D,EAASjqC,IAE3BiqC,GAET,YAAAQ,YAAA,SAAYpB,EAAiB1c,EAA2Bke,GAAxD,WAIE,OAHKA,IACHA,EAAW,GAENpmD,KAAKglE,SAASK,MAAM,UAAW,8BAA8B,WAClE,IAAM0D,EAAWnkB,EAAGnb,MAAM00B,QAAO,SAAC54E,EAAGkC,GAAM,OAAAlC,EAAIkC,KAAK2+D,EAC9C7pD,EAAO,EAAK64C,UAAU4Q,YACxBpB,EAAGY,QAASZ,EAAGn8C,MAAOm8C,EAAGl8C,OAAQqgE,EAAU,EAAK4B,cAAcziC,GAAWke,GAC7E,OAAO,EAAK0kB,aAAa5iC,EAAU3rC,OAGvC,YAAA8qD,wBAAA,SAAwBzC,GAAxB,WACE,OAAO5kD,KAAKglE,SAASK,MAAM,UAAW,0CAA0C,WAC9E,IAAM0D,EAAWnkB,EAAGnb,MAAM00B,QAAO,SAAC54E,EAAGkC,GAAM,OAAAlC,EAAIkC,KACzC8U,EAAO,EAAK64C,UAAU4Q,YAAYpB,EAAGY,QAASZ,EAAGn8C,MAAOm8C,EAAGl8C,OAAmB,EAAXqgE,EAAc,OAAQ,GAC/F,OAAO,IAAI/7E,aAAauP,EAAKxX,OAAQwX,EAAKs3C,WAAYk1B,OAG1D,YAAA/hB,eAAA,SAAelB,EAA0BilB,GACvC,IAAIxvD,EACJ,GAAIvb,KAAKsqE,OAAOtC,gBACdzsD,EAAMvb,KAAKyqE,cAAcr4E,IAAI0zD,EAAYN,UAChC,CACHulB,GACF/qE,KAAKyqE,cAAc34B,OAAOv2B,GAE5B,IAAMgvD,EAAgBvqE,KAAKuqE,cAAcn4E,IAAImpB,GAC7C,GAAIgvD,EAAe,CACjB,IAAMhhD,EAAQghD,EAAc/gF,QAAQs8D,EAAYN,SAChD,IAAe,IAAXj8B,EAAc,CAChBghD,EAAc/vE,OAAO+uB,EAAO,GAC5B,IAAIihD,EAAexqE,KAAKwqE,aAAap4E,IAAImpB,GACpCivD,IACHA,EAAe,GACfxqE,KAAKwqE,aAAav+E,IAAIsvB,EAAKivD,IAE7BA,EAAat7E,KAAK42D,EAAYN,WAMjCjqC,IAAOwvD,IACV,EAAAz1B,OAAOE,QAAQ,iBAAkB,4BAA4BsQ,EAAYr9C,MAAK,IAAIq9C,EAAYp9C,QAC9F1I,KAAKo1C,UAAU21B,cAAcjlB,EAAYN,WAG7C,YAAAslB,aAAA,SAAa5iC,EAA2B3rC,GACtC,OAAQ2rC,GACN,IAAK,QACH,OAAO3rC,aAAgBhQ,WAAagQ,EAAOhQ,WAAWggD,KAAKhwC,GAC7D,IAAK,QACH,OAAOA,aAAgB9P,WAAa8P,EAAO9P,WAAW8/C,KAAKhwC,GAC7D,IAAK,OACH,OAAOA,aAAgBlQ,UAAYkQ,EAAOlQ,UAAUkgD,KAAKhwC,GAC3D,IAAK,SACH,OAAOA,aAAgB3P,YAAc2P,EAAO3P,YAAY2/C,KAAKhwC,GAC/D,IAAK,SACH,OAAOA,aAAgBzP,YAAcyP,EAAOzP,YAAYy/C,KAAKhwC,GAC/D,IAAK,QACL,IAAK,OACH,OAAOA,aAAgB1U,WAAa0U,EAAO1U,WAAW0kD,KAAKhwC,GAC7D,IAAK,UACH,OAAOA,aAAgBvP,aAAeuP,EAAOvP,aAAau/C,KAAKhwC,GACjE,IAAK,UACH,OAAOA,aAAgBrP,aAAeqP,EAAOrP,aAAaq/C,KAAKhwC,GACjE,QACE,MAAM,IAAI3O,MAAM,mBAAmBs6C,EAAQ,uBAGjD,YAAA2iC,cAAA,SAAc3iC,EAA2B3rC,GACvC,GAAKA,EAGL,OAAQA,aAAgBvP,aAAgBuP,EAAO,IAAIvP,aAAauP,IAoBlE,YAAAouE,cAAA,SAAcK,GACZ,MAAO,SAiBT,YAAAjkB,oBAAA,WACE/mD,KAAKo1C,UAAU2R,uBAEnB,EA1KA,GAAa,EAAAghB,kB,ypDCtBb,cAOA,0BAA+BnxB,GAC7B,IAAMr0C,EAAMq0C,EAAc5uD,OAC1B,OAAO4uD,EAAc1uD,MAAM,EAAGqa,EAAM,GAAGuwD,OAAOlc,EAAcr0C,EAAM,GAAK,IAGzE,uBACI0oE,EAAwBC,EAAmCC,G,YAAnC,IAAAD,MAAA,SAAWE,GAAqB,W,4DAC1D,MAAO,CAAP,EAAO,IAAIrlF,SAAc,SAACkL,EAASqqB,GACjC,IAAI+vD,EAAW,EAETC,EAAQ,WACZ,GAAIL,IACFh6E,QADF,CAKAo6E,IAEA,IAAME,EAAcL,EAAQG,GAEV,MAAdF,GAAsBE,GAAYF,EACpC7vD,IAGFvpB,WAAWu5E,EAAOC,KAGpBD,eAQJ,sDAA2DvyB,GAEzD,OADA,EAAAx8B,YAA8B,IAAhBw8B,GAAsD,IAAvBA,EAAY/wD,QAAc,WAAM,+CACtE,MAAQ+wD,EAAY9rB,OAAO,GAAGu+C,cAAgBzyB,EAAY7wD,MAAM,IAOzE,iEAAsE6wD,GAEpE,OADA,EAAAx8B,YAA8B,IAAhBw8B,GAAsD,IAAvBA,EAAY/wD,QAAc,WAAM,+CACtE,MAAQ+wD,EAAY9rB,OAAO,GAAGu+C,cAAgBzyB,EAAY7wD,MAAM,GAAK,eAI9E,6BAAkC+lE,EAA+BtS,GAI/D,OAF8BI,KAAKjhB,MAAMihB,KAAKC,UAAUiS,IACxCtS,GAKlB,6BAAkC7uB,EAAkB2vB,GAClD,OAAOA,EAAS9I,KAAI,SAAAvtD,GAAK,OAAA0mC,EAAO1mC,MAAIonC,KAAK,OAI3C,6BAAkC+qB,GAChC,GAAIA,GAAQ,EACV,MAAO,MACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QACF,GAAa,IAATA,EACT,MAAO,QAEP,MAAM3qD,MAAM,gBAAgB2qD,EAAI,2B,uICpFpC,cAEA,UAEM1c,EAA6C,GAuCnD,SAAgB4vC,EAAsBz2B,GACpC,IAUIof,EAVEroD,EAsCR,WACE,IAAMA,EAA4BtnB,SAASinF,cAAc,UAGzD,OAFA3/D,EAAOtD,MAAQ,EACfsD,EAAOrD,OAAS,EACTqD,EA1CQ4/D,GAWTz3D,EAV4C,CAChD5G,OAAO,EACPC,OAAO,EACPE,WAAW,EACXD,SAAS,EACTG,uBAAuB,EACvBD,oBAAoB,EACpBG,8BAA8B,GAIhC,KAAKmnC,GAA2B,WAAdA,KAChBof,EAAKroD,EAAON,WAAW,SAAUyI,IAE/B,IACE,OAAO,IAAI,EAAA03D,aAAaxX,EAAI,GAC5B,MAAOv3C,GACP,EAAAy4B,OAAOG,QAAQ,mBAAoB,kEAAkE54B,GAI3G,KAAKm4B,GAA2B,UAAdA,KAChBof,EAAKroD,EAAON,WAAW,QAASyI,IAAOnI,EAAON,WAAW,qBAAsByI,IAE7E,IACE,OAAO,IAAI,EAAA03D,aAAaxX,EAAI,GAC5B,MAAOv3C,GACP,EAAAy4B,OAAOG,QACH,mBACA,yFAAyF54B,GAKnG,MAAM,IAAIjvB,MAAM,0BApElB,8BAAgBynD,EAAmBL,GACjC,IAAIU,EACEV,GAA2B,WAAdA,KAA2B,WAAYnZ,GAE7CmZ,GAA2B,UAAdA,KAA0B,UAAWnZ,KAC7D6Z,EAAU7Z,EAAM8Y,OAFhBe,EAAU7Z,EAAMgwC,OAKlBn2B,EAAUA,GAAW+1B,EAAsBz2B,GAC3CA,EAAYA,GAAiC,IAApBU,EAAQ7pC,QAAgB,QAAU,SAC3D,IAAMuoD,EAAK1e,EAAQ0e,GAInB,OAFAv4B,EAAMmZ,GAAaU,EAEf0e,EAAG0X,wBACEjwC,EAAMmZ,GACNK,EAAmBL,KAG5Bof,EAAGc,QAAQd,EAAG2X,YACd3X,EAAGc,QAAQd,EAAG4X,cACd5X,EAAGc,QAAQd,EAAGQ,OACdR,EAAGc,QAAQd,EAAG6X,QACd7X,EAAGc,QAAQd,EAAG8X,qBACd9X,EAAGc,QAAQd,EAAG+X,iBACd/X,EAAGO,OAAOP,EAAGgY,cACbhY,EAAGO,OAAOP,EAAGiY,WACbjY,EAAGkY,SAASlY,EAAGmY,MAER72B,IAGT,2B,igEC3CA,cAEA,aAEA,UAKA,aAwCE,WAAY0e,EAA2BvoD,GAF/B,KAAA2gE,kBAAmB,EAGzBxsE,KAAKo0D,GAAKA,EACVp0D,KAAK6L,QAAUA,EAEf7L,KAAKysE,gBACLzsE,KAAK0sE,aAAe1sE,KAAK2sE,qBACzB3sE,KAAK4sE,YAAc5sE,KAAK6sE,oBACxB7sE,KAAK8sE,uBA8dT,OA3dE,YAAA5I,gBAAA,SAAgBz7D,EAAeC,EAAgBs7D,EAAsBznE,GACnE,IAAM63D,EAAKp0D,KAAKo0D,GAEV5O,EAAU4O,EAAG2Y,gBAEnB3Y,EAAGgT,YAAYhT,EAAG4Y,WAAYxnB,GAC9B4O,EAAG6Y,cAAc7Y,EAAG4Y,WAAY5Y,EAAG8Y,mBAAoB9Y,EAAG+Y,SAC1D/Y,EAAG6Y,cAAc7Y,EAAG4Y,WAAY5Y,EAAGgZ,mBAAoBhZ,EAAG+Y,SAC1D/Y,EAAG6Y,cAAc7Y,EAAG4Y,WAAY5Y,EAAGiZ,eAAgBjZ,EAAGkZ,eACtDlZ,EAAG6Y,cAAc7Y,EAAG4Y,WAAY5Y,EAAGmZ,eAAgBnZ,EAAGkZ,eACtD,IAAMvoF,EAASwX,EAAOynE,EAAQ52C,OAAO7wB,EAAMkM,EAAQC,GAAU,KAQ7D,OAPA0rD,EAAGoZ,WACCpZ,EAAG4Y,WACH,EACAhJ,EAAQwE,eAAgB//D,EAAOC,EAC/B,EACAs7D,EAAQ75C,OAAQ65C,EAAQ2E,YAAa5jF,GACzCib,KAAK60D,aACErP,GAET,YAAAolB,cAAA,SACIplB,EAAuB/8C,EAAeC,EAAgBs7D,EAAsBznE,GAC9E,IAAM63D,EAAKp0D,KAAKo0D,GAChBA,EAAGgT,YAAYhT,EAAG4Y,WAAYxnB,GAC9B,IAAMzgE,EAASi/E,EAAQ52C,OAAO7wB,EAAMkM,EAAQC,GAC5C0rD,EAAGqZ,cACCrZ,EAAG4Y,WACH,EACA,EACA,EACAvkE,EAAOC,EAAQs7D,EAAQ75C,OAAQ65C,EAAQ2E,YAAa5jF,GACxDib,KAAK60D,cAEP,YAAAiS,kBAAA,SAAkBthB,EAAuB/8C,EAAeC,GACtD,IAAM0rD,EAAKp0D,KAAKo0D,GAEhBA,EAAGgT,YAAYhT,EAAG4Y,WAAYxnB,GAC9B4O,EAAGsZ,gBAAgBtZ,EAAGuZ,YAAa3tE,KAAK4sE,aACxCxY,EAAGwZ,qBACCxZ,EAAGuZ,YAAavZ,EAAGyZ,kBAAmBzZ,EAAG4Y,WAAYxnB,EACrD,GACJxlD,KAAK60D,aACLT,EAAGzrD,SAAS,EAAG,EAAGF,EAAOC,GACzB0rD,EAAG0Z,QAAQ,EAAG,EAAGrlE,EAAOC,IAE1B,YAAAs9C,YAAA,SACIR,EAAuB/8C,EAAeC,EAAgBqgE,EAAkB7gC,EACxEke,GACF,IAAMgO,EAAKp0D,KAAKo0D,GACXhO,IACHA,EAAW,GAERpmD,KAAKwsE,kBACRxsE,KAAK8mE,kBAAkBthB,EAAS/8C,EAAOC,GAEzC,IAAMs7D,EAAUhkE,KAAKikE,WAAW/7B,EAAUke,GACpCrhE,EAASi/E,EAAQ1wC,SAAS7qB,EAAQC,GAUxC,OARA0rD,EAAGgT,YAAYhT,EAAG4Y,WAAYxnB,GAC9B4O,EAAGwZ,qBACCxZ,EAAGuZ,YAAavZ,EAAGyZ,kBAAmBzZ,EAAG4Y,WAAYxnB,EACrD,GAEJ4O,EAAG2Z,WAAW,EAAG,EAAGtlE,EAAOC,EAAQ0rD,EAAGyU,KAAM7E,EAAQ2E,YAAa5jF,GACjEib,KAAK60D,aAEEmP,EAAQvmD,OAAO14B,EAAQgkF,IAEhC,YAAAiF,mBAAA,WAEE,OAAO,GAET,YAAAC,iBAAA,WACE,IAAM7Z,EAAKp0D,KAAKo0D,GAEhB,MAAO,WADGA,EAAG5rD,aAAaxI,KAAKo0D,GAAG8Z,gBACZ9Z,EAAG+Z,WAE3B,YAAAC,kBAAA,WACE,OAAOpuE,KAAKo0D,GAAG5rD,aAAaxI,KAAKo0D,GAAGia,qBAEtC,YAAAC,sBAAA,WACE,OAAOtuE,KAAKo0D,GAAG5rD,aAAaxI,KAAKo0D,GAAGma,sBAEtC,YAAArH,oBAAA,SAAoBH,EAAwBC,GAC1C,IAAM5S,EAAKp0D,KAAKo0D,GAChBA,EAAGoa,oBAAoBzH,EAAgB,EAAG3S,EAAG5hB,OAAO,EAAO,GAAI,GAC/D4hB,EAAGqa,wBAAwB1H,IACC,IAAxBC,IACF5S,EAAGoa,oBAAoBxH,EAAoB,EAAG5S,EAAG5hB,OAAO,EAAO,GAAI,IACnE4hB,EAAGqa,wBAAwBzH,IAE7BhnE,KAAK60D,cAEP,YAAAgS,cAAA,SACIhB,EACAc,GAEF,IAAMvS,EAAKp0D,KAAKo0D,GACVkR,EAAUlR,EAAGyS,gBAMnB,OAHAzS,EAAGsa,aAAapJ,EAASO,GACzBzR,EAAGsa,aAAapJ,EAASqB,GACzBvS,EAAGua,YAAYrJ,GACRA,GAET,YAAAkB,cAAA,SAAc3lB,EAAsB+tB,GAClC,IAAMxa,EAAKp0D,KAAKo0D,GACVya,EAASza,EAAG0a,aAAaF,GAC/B,IAAKC,EACH,MAAM,IAAIjhF,MAAM,0CAA0CghF,GAK5D,GAFAxa,EAAGvT,aAAaguB,EAAQhuB,GACxBuT,EAAGoS,cAAcqI,IACwC,IAArDza,EAAG2a,mBAAmBF,EAAQza,EAAG4a,gBACnC,MAAM,IAAIphF,MAAM,6BAA6BwmE,EAAG6a,iBAAiBJ,GAAO,qBAE5EhuB,GAEE,OAAOguB,GAET,YAAA/I,aAAA,SAAa+I,GACX7uE,KAAKo0D,GAAG0R,aAAa+I,IAEvB,YAAApH,qBAAA,SAAqBjiB,EAAuBnxB,EAAkBmzC,GAC5D,IAAMpT,EAAKp0D,KAAKo0D,GAChBA,EAAG8a,cAAc9a,EAAG+Z,SAAW95C,GAC/Br0B,KAAK60D,aACLT,EAAGgT,YAAYhT,EAAG4Y,WAAYxnB,GAC9BxlD,KAAK60D,aACLT,EAAGa,UAAUuS,EAAenzC,GAC5Br0B,KAAK60D,cAEP,YAAAV,KAAA,WACEn0D,KAAKo0D,GAAG+a,WAAWnvE,KAAKo0D,GAAGgb,eAAgB,EAAG,GAC9CpvE,KAAK60D,cAEP,YAAAA,WAAA,WACE,GAAI,EAAA1uC,IAAIugD,MAAO,CACb,IAAMtS,EAAKp0D,KAAKo0D,GACV3rE,EAAQ2rE,EAAGib,WACbC,EAAQ,GACZ,OAAQ7mF,GACN,KAAM2rE,EAAW,SACf,OACF,KAAMA,EAAe,aACnBkb,EAAQ,eACR,MACF,KAAMlb,EAAgB,cACpBkb,EAAQ,gBACR,MACF,KAAMlb,EAAoB,kBACxBkb,EAAQ,oBACR,MACF,KAAMlb,EAAgC,8BACpCkb,EAAQ,gCACR,MACF,KAAMlb,EAAgB,cACpBkb,EAAQ,gBACR,MACF,KAAMlb,EAAqB,mBACzBkb,EAAQ,qBACR,MACF,QACEA,EAAQ,wBAAwB7mF,EAAMgrB,SAAS,IAEnD,MAAM,IAAI7lB,MAAM0hF,KAGpB,YAAAvE,cAAA,SAAcvlB,GACZxlD,KAAKo0D,GAAG2W,cAAcvlB,IAExB,YAAAugB,cAAA,SAAcT,GACZtlE,KAAKo0D,GAAG2R,cAAcT,IAExB,YAAArB,WAAA,SAAW/7B,EAA4Bke,EAAkBb,GACvD,QADuD,IAAAA,MAAA,GAClC,IAAjBvlD,KAAK6L,QACP,OAAO,IAAI0jE,EAAavG,sBAAsBhpE,KAAKo0D,GAA8BhO,GAGnF,OAAQle,GACN,IAAK,QACH,OAAc,IAAVqd,GAAsCvlD,KAAKwvE,yBACtC,IAAID,EAAatG,qBAAqBjpE,KAAKo0D,GAAIhO,GAE/C,IAAImpB,EAAatG,qBACpBjpE,KAAKo0D,GAAIhO,EAAUpmD,KAAKyvE,0BAA2BC,gBAE3D,IAAK,MACH,MAAM,IAAI9hF,MAAM,mBAClB,IAAK,OACH,OAAO,IAAI2hF,EAAalG,iBAAiBrpE,KAAKo0D,GAAIhO,GACpD,QACE,MAAM,IAAIx4D,MAAM,qBAAqBs6C,KAG3C,YAAA6e,oBAAA,WAEE,IADA,IAAMqN,EAAKp0D,KAAKo0D,GACPub,EAAO,EAAGA,EAAO3vE,KAAK4vE,uBAAwBD,EACrDvb,EAAG8a,cAAc9a,EAAG+Z,SAAWwB,GAC/Bvb,EAAGgT,YAAYhT,EAAG4Y,WAAY,OAGlC,YAAAt4B,QAAA,WACE,IAAI10C,KAAK6vE,SAAT,CAGA,IAAMzb,EAAKp0D,KAAKo0D,GAChBA,EAAGsZ,gBAAgBtZ,EAAGuZ,YAAa,MACnCvZ,EAAG0b,kBAAkB9vE,KAAK4sE,aAC1BxY,EAAG2b,WAAW3b,EAAG4b,aAAc,MAC/B5b,EAAG6b,aAAajwE,KAAK0sE,cACrBtY,EAAG2b,WAAW3b,EAAG8b,qBAAsB,MACvC9b,EAAG/8B,SACHr3B,KAAK6vE,UAAW,IAGV,YAAAM,sBAAR,WAEE,OAAO,IAAInjF,aAAa,EACrB,EAAK,EAAM,EAAK,EAAK,GACrB,GAAM,EAAK,EAAK,EAAK,EACtB,EAAM,EAAM,EAAK,EAAK,EACtB,GAAO,EAAK,EAAK,EAAK,KAGlB,YAAA2/E,mBAAR,WACE,IAAMvY,EAAKp0D,KAAKo0D,GACVrvE,EAASqvE,EAAGgc,eAClB,IAAKrrF,EACH,MAAM,IAAI6I,MAAM,gCAElB,IAAMyiF,EAAWrwE,KAAKmwE,wBAItB,OAHA/b,EAAG2b,WAAW3b,EAAG4b,aAAcjrF,GAC/BqvE,EAAGkc,WAAWlc,EAAG4b,aAAcK,EAAUjc,EAAGmc,aAC5CvwE,KAAK60D,aACE9vE,GAED,YAAA8nF,kBAAR,WACE,IAAM2D,EAAKxwE,KAAKo0D,GAAGyY,oBACnB,IAAK2D,EACH,MAAM,IAAI5iF,MAAM,mCAElB,OAAO4iF,GAGD,YAAA1D,qBAAR,WACE,IAAM1Y,EAAKp0D,KAAKo0D,GAMhB,GAJAp0D,KAAKywE,sCAAwCzwE,KAAK0wE,2CAClD1wE,KAAKwvE,yBAA2BxvE,KAAK2wE,qBACrC3wE,KAAKinD,2BAA6BjnD,KAAK4wE,uBAElB,IAAjB5wE,KAAK6L,UAAkB7L,KAAKyvE,4BAA8BzvE,KAAKwvE,yBACjE,MAAM,IAAI5hF,MAAM,0DAGlBoS,KAAK21D,kBAAoB31D,KAAKwvE,0BAA4BxvE,KAAK6wE,oBAG/D7wE,KAAK8nE,eAAiB1T,EAAG5rD,aAAa4rD,EAAG0c,kBACzC9wE,KAAK4vE,qBAAuBxb,EAAG5rD,aAAa4rD,EAAG2c,yBAM3C/wE,KAAK6L,SAOH,YAAA4gE,cAAR,WACuB,IAAjBzsE,KAAK6L,SACP7L,KAAKgxE,0BAA4BhxE,KAAKo0D,GAAGprD,aAAa,0BACtDhJ,KAAKixE,kCAAoCjxE,KAAKo0D,GAAGprD,aAAa,qCAE9DhJ,KAAKkxE,sBAAwBlxE,KAAKo0D,GAAGprD,aAAa,qBAClDhJ,KAAKyvE,0BAA4BzvE,KAAKo0D,GAAGprD,aAAa,4BAIlD,YAAA0nE,yCAAR,WAGE,IAAMtc,EAAKp0D,KAAKo0D,GACV5O,EAAU4O,EAAG2Y,gBACnB3Y,EAAGgT,YAAYhT,EAAG4Y,WAAYxnB,GAE9B,IAAMgjB,EAAkC,IAAjBxoE,KAAK6L,QAAiBuoD,EAAoCwU,QAAUxU,EAAGyU,KAC9FzU,EAAGoZ,WAAWpZ,EAAG4Y,WAAY,EAAGxE,EAAgB,EAAG,EAAG,EAAGpU,EAAGyU,KAAMzU,EAAG5hB,MAAO,MAE5E,IAAM2+B,EAAc/c,EAAGyY,oBACvBzY,EAAGsZ,gBAAgBtZ,EAAGuZ,YAAawD,GAEnC/c,EAAGwZ,qBAAqBxZ,EAAGuZ,YAAavZ,EAAGyZ,kBAAmBzZ,EAAG4Y,WAAYxnB,EAAS,GAEtF,IAAM4rB,EAAahd,EAAGid,uBAAuBjd,EAAGuZ,eAAiBvZ,EAAGkd,qBAKpE,OAJAld,EAAGgT,YAAYhT,EAAG4Y,WAAY,MAC9B5Y,EAAGsZ,gBAAgBtZ,EAAGuZ,YAAa,MACnCvZ,EAAG2W,cAAcvlB,GACjB4O,EAAG0b,kBAAkBqB,GACdC,GAGD,YAAAT,mBAAR,WACE,GAAqB,IAAjB3wE,KAAK6L,SACP,IAAK7L,KAAKgxE,0BACR,OAAO,OAGT,IAAKhxE,KAAKkxE,sBACR,OAAO,EAGX,OAAOlxE,KAAKywE,uCAGN,YAAAG,qBAAR,WACE,GAAqB,IAAjB5wE,KAAK6L,SACP,IAAK7L,KAAKgxE,0BACR,OAAO,MAEJ,CACL,IAAKhxE,KAAKkxE,sBACR,OAAO,EAET,IAAKlxE,KAAKo0D,GAAGprD,aAAa,4BACxB,OAAO,EAGX,OAAOhJ,KAAKywE,uCAMN,YAAAI,kBAAR,WAIE,IAEIrrB,EACA2rB,EACAtL,EACA0L,EACAjM,EANElR,EAAKp0D,KAAKo0D,GAQhB,IACE5O,EAAU4O,EAAG2Y,gBACboE,EAAc/c,EAAGyY,oBACjBzY,EAAGgT,YAAYhT,EAAG4Y,WAAYxnB,GAG9B,IAAMgjB,EAAkC,IAAjBxoE,KAAK6L,QAAiBuoD,EAAoCwU,QAAUxU,EAAGyU,KAS9F,OARAzU,EAAGoZ,WAAWpZ,EAAG4Y,WAAY,EAAGxE,EAAgB,EAAG,EAAG,EAAGpU,EAAGyU,KAAMzU,EAAG5hB,MAAO,MAE5E4hB,EAAGsZ,gBAAgBtZ,EAAGuZ,YAAawD,GACnC/c,EAAGwZ,qBAAqBxZ,EAAGuZ,YAAavZ,EAAGyZ,kBAAmBzZ,EAAG4Y,WAAYxnB,EAAS,GAEtF4O,EAAGO,OAAOP,EAAGQ,UAEbiR,EAAezR,EAAG0a,aAAa1a,EAAGqS,kBAIlCrS,EAAGvT,aAAaglB,EAAc,iBAC9BzR,EAAGoS,cAAcX,MAEjB0L,EAAiBnd,EAAG0a,aAAa1a,EAAGwS,oBAIpCxS,EAAGvT,aAAa0wB,EAAgB,8DAChCnd,EAAGoS,cAAc+K,MAEjBjM,EAAUlR,EAAGyS,mBAIbzS,EAAGsa,aAAapJ,EAASO,GACzBzR,EAAGsa,aAAapJ,EAASiM,GACzBnd,EAAGua,YAAYrJ,GACflR,EAAGmR,WAAWD,GAEdlR,EAAG+a,WAAW/a,EAAGod,OAAQ,EAAG,GACrBpd,EAAGib,aAAejb,EAAGqd,Y,QAG5Brd,EAAGc,QAAQd,EAAGQ,OAEV0Q,GACFlR,EAAG2R,cAAcT,GAEfO,GACFzR,EAAG0R,aAAaD,GAEd0L,GACFnd,EAAG0R,aAAayL,GAEdJ,IACF/c,EAAGsZ,gBAAgBtZ,EAAGuZ,YAAa,MACnCvZ,EAAG0b,kBAAkBqB,IAEnB3rB,IACF4O,EAAGgT,YAAYhT,EAAG4Y,WAAY,MAC9B5Y,EAAG2W,cAAcvlB,MAKvB,YAAAksB,WAAA,WACE,GAAqB,IAAjB1xE,KAAK6L,SAAiB7L,KAAKixE,kCAAmC,CAChE,IAAMU,EAAM3xE,KAAKo0D,GACXwd,EAAM5xE,KAAKixE,kCAEXY,EAAQF,EAAIG,cAElB,OADAH,EAAII,WAAWH,EAAII,iBAAkBH,GAC9BA,EAGP,MAAM,IAAIjkF,MAAM,8CAIpB,YAAAqkF,SAAA,WACE,GAAqB,IAAjBjyE,KAAK6L,UAAiB7L,KAAKixE,kCAO7B,MAAM,IAAIrjF,MAAM,4CANhB,IAAM+jF,EAAM3xE,KAAKo0D,GACXwd,EAAM5xE,KAAKixE,kCACjBU,EAAIO,SAASN,EAAII,mBAQrB,YAAAG,uBAAA,SAAuBN,GACrB,IAAIO,EAAmBC,EACvB,GAAqB,IAAjBryE,KAAK6L,UAAiB7L,KAAKixE,kCAQ7B,MAAM,IAAIrjF,MAAM,4CAPhB,IAAM+jF,EAAM3xE,KAAKo0D,GACXwd,EAAM5xE,KAAKixE,kCASnB,OAPEmB,EAAYT,EAAIW,kBAAkBT,EAAOF,EAAIY,wBAC7CF,EAAWV,EAAInpE,aAAaopE,EAAIY,kBAM3BJ,IAAcC,GAGvB,YAAAI,eAAA,SAAeZ,GACb,IAAIa,EACJ,GAAqB,IAAjB1yE,KAAK6L,QAMP,MAAM,IAAIje,MAAM,4CALhB,IAAM+jF,EAAM3xE,KAAKo0D,GAQnB,OAPEse,EAAcf,EAAIW,kBAAkBT,EAAOF,EAAIgB,cAC/ChB,EAAIiB,YAAYf,GAMXa,EAAc,KAGjB,YAAAG,uBAAN,SAA6BhB,G,qGAC3B,SAAM,EAAAiB,aAAY,WAAM,SAAKX,uBAAuBN,O,OACpD,OADA,SACO,CAAP,EAAO7xE,KAAKyyE,eAAeZ,YAE/B,EA7gBA,GAAa,EAAAjG,gB,msECPb,cAIA,EACE,SAAmBxoD,EAAqBt8B,GAArB,KAAAs8B,KAAqB,KAAAt8B,QAG1C,aACE,WAAoBmgD,EAAcy3B,EAAyBsG,GAAvC,KAAA/9B,QAAuC,KAAA+9B,WACzDhlE,KAAKy0C,WAAWiqB,GAqJpB,OAlJE,YAAAjqB,WAAA,SAAWiqB,GAAX,WACE1+D,KAAKglE,SAASK,MAAM,UAAW,4BAA4B,WACzD,IAAM9mB,EAAa,EAAKtX,MAAM8rC,WAC9B,GAAIx0B,EAAWv2D,SAAW02E,EAAI12E,OAC5B,MAAM,IAAI4F,MAAM,2CAGlB,EAAKolF,KAAOtU,EAAI/qB,KAAI,SAACvwB,EAAIz9B,GAAM,WAAIstF,EAAS7vD,EAAIm7B,EAAW54D,OAC3D,EAAK+pD,QAGL,EAAKwjC,SAAW,GAChB,EAAKF,KAAKtmE,SAAQ,SAAC0W,EAAIz9B,G,QACjBwtF,GAAW,E,IACf,IAAoB,QAAA/vD,EAAGt8B,KAAK68D,QAAM,8BAAE,CAA/B,IAAMrd,EAAK,QACd,IACK,EAAK8sC,QAAQ9sC,KACsC,IAAjD,EAAKW,MAAMosC,kBAAkB7pF,QAAQ88C,GAC1C,CACA6sC,GAAW,EACX,Q,iGAGAA,GACF,EAAKD,SAAShkF,KAAKvJ,UAM3B,YAAA+pD,MAAA,WACE1vC,KAAKozE,QAAUpzE,KAAKinC,MAAMmhC,YAAYz0B,KAAI,SAAAhuD,GAAK,OAAAA,EAAE0+D,WAG7C,YAAAivB,QAAN,SAAcC,EAAgCC,G,8EAC5C,MAAO,CAAP,EAAOxzE,KAAKglE,SAASK,MAAM,UAAW,yBAAyB,gD,+EAS7D,GAPArlE,KAAK0vC,QAGC+c,EAAmB8mB,EAAetL,yBAGlCwL,EAAczzE,KAAKinC,MAAMosC,kBAC3BG,EAAYxrF,SAAWyrF,EAAYzrF,OACrC,MAAM,IAAI4F,MAAM,kFACZ4lF,EAAYxrF,OAAM,cAAcyrF,EAAYzrF,QAGlDwrF,EAAY9mE,SAAQ,SAAC45B,EAAO3gD,GAC1B,IAAM4jC,EAAQkqD,EAAY9tF,GAC1B,EAAKytF,QAAQ7pD,GAAS+c,KAIlBotC,EAAqB1zE,KAAKkzE,SAAShrF,MAAM,GAGzCyrF,EAAc3zE,KAAKinC,MAAMmhC,YACzB7pB,EAAav+C,KAAKinC,MAAM8rC,WAE1Ba,EAAO,E,iFAOT,GALMC,EAAcH,EAASE,KACvBE,EAAS,EAAKd,KAAKa,IAIa,KADhCE,EAAYD,EAAOhtF,KAAK68D,OAAOhQ,KAAI,SAAAhuD,GAAK,SAAKytF,QAAQztF,OAC7C6D,aAAQ0xB,GACpB,MAAM,IAAIttB,MAAM,kCAAkCkmF,EAAOhtF,MAqBxC,OAjBbktF,EAAeD,EACrB,EAAAz+B,OAAOE,QACH,WACA,aAAas+B,EAAOhtF,KAAKmmB,KAAI,KACzB+mE,EAAargC,KAAI,SAAC9uD,EAAGc,GAAM,UAAImuF,EAAOhtF,KAAK68D,OAAOh+D,GAAE,MAAMd,EAAE+8B,KAAI,IAAI/8B,EAAE6iD,KAAKla,KAAK,KAAI,OAAKA,KAAK,MAAK,KAErGymD,EAAa,gD,iCAEjB,KADM7wD,EAAK0wD,EAAO1wD,IACV8wD,YAAYF,GAClB,MAAM,IAAIpmF,MAAM,gCAAgCkmF,EAAOhtF,KAAKmmB,MAK9D,MAAO,CAAP,EAFemW,EAAGrI,IAAI0xC,EAAkBunB,WAKvB,GAAM,EAAKhP,SAASK,MAAM,OAAQyO,EAAOhtF,KAAKmmB,KAAMgnE,I,OAGvE,IAHME,EAAa,UAGJnsF,SAAW8rF,EAAOhtF,KAAK+kE,QAAQ7jE,OAC5C,MAAM,IAAI4F,MAAM,uD,OAIlBumF,EAAWznE,SAAQ,SAACqU,EAAQp7B,GAC1B,IAAM+F,EAAIooF,EAAOhtF,KAAK+kE,QAAQlmE,GAC9B,GAAI,EAAKytF,QAAQ1nF,GACf,MAAM,IAAIkC,MAAM,WAAWlC,EAAC,2BAA2BooF,EAAOhtF,KAAKmmB,MAErE,EAAKmmE,QAAQ1nF,GAAKq1B,KAIdqzD,EAAkB,IAAIh2B,IAC5B+1B,EAAWznE,SAAQ,SAACqU,EAAQp7B,G,YACpB+F,EAAIooF,EAAOhtF,KAAK+kE,QAAQlmE,G,IAC9B,IAAyC,kBAAAguF,EAAYjoF,GAAG2oF,KAAE,8BAAE,CAAvD,IAAMC,EAA0B,QAC7BC,EAAwBh2B,EAAW+1B,GACrCnB,GAAW,E,IACf,IAAgB,kBAAAoB,EAAsB5wB,SAAM,8BAAE,CAAzC,IAAMp5D,EAAC,QACV,IAAK,EAAK6oF,QAAQ7oF,GAAI,CACpB4oF,GAAW,EACX,Q,iGAGAA,GACFiB,EAAgBtzE,IAAIwzE,I,qGAI1BZ,EAASxkF,KAAI,MAAbwkF,EAAQ,OAASU,K,wCA9DZR,EAAOF,EAAS1rF,O,QAAM,M,oCA6E7B,OAZM+4B,EAAmB,GACzB/gB,KAAKinC,MAAMutC,mBAAmB9nE,SAAQ,SAAC+nE,GACrC,IAAMC,EAAY,EAAKtB,QAAQqB,GAC/B,QAAkBv5D,IAAdw5D,EACF,MAAM,IAAI9mF,MAAM,oBAAoB6mF,EAAW,yBAGjDC,EAAUn4E,KACVwkB,EAAO7xB,KAAKwlF,MAEd,EAAAp/B,OAAOE,QAAQ,WAAY,iCAC3BiX,EAAiB/X,UACV,CAAP,EAAO3zB,qBAOb,EAvJA,GAAa,EAAA4zD,iB,uaCVb,cAEA,UAEOvjC,EADP,QACgBC,YAAYC,aAAaC,IACzC,UACA,UAkEa,EAAAqjC,MAAQ,CAInBroC,KAAM,SAACsoC,EAA2CttC,GAC9C,WAAIutC,EAAUD,EAAYttC,KAGhC,iBACE,WAAYC,GACVxnC,KAAK+0E,WAAQ75D,EACblb,KAAKg1E,IAAM,GACXh1E,KAAKqkD,YAASnpC,EACdlb,KAAK4hB,UAAO1G,EAERssB,IACFxnC,KAAK4hB,KAAO,EAAAqzD,UAAUC,yBAAyB1tC,EAAU5lB,KAAM0nB,aAcrE,OATE,sBAAI,mBAAI,C,IAAR,WACE,OAAOtpC,KAAK+0E,O,gCAGd,sBAAI,iBAAE,C,IAAN,WACE,OAAO/0E,KAAKg1E,K,gCAIhB,EAtBA,GAwBA,EACE,SAAYG,EAAyCloE,GAC/CkoE,aAAsB,EAAAtyC,KAAKwD,WAC7BrmC,KAAKiN,KAAOkoE,EAAWloE,KACvBjN,KAAKwmC,OAAS2uC,EAAW3uC,OACzBxmC,KAAK4L,WAAa,IAAI,EAAA+lC,UAAUwjC,EAAW5uC,YAClC4uC,aAAsB/jC,EAAOgkC,OACtCp1E,KAAKiN,KAAOA,UAAQkoE,EAAWloE,OAC/BjN,KAAKwmC,OAAS2uC,EAAW3uC,SACzBxmC,KAAK4L,WAAa,IAAI,EAAA+lC,UAAU,EAAAsjC,UAAUI,8BAA8BF,KAG1En1E,KAAK2jD,OAAS,GACd3jD,KAAK6rD,QAAU,GACf7rD,KAAKs1E,aAAc,GAWvB,aAWE,WAAYruC,EAAsCsuC,GAChD,IAAKtuC,EACH,MAAM,IAAIzM,UAAU,kBAItBx6B,KAAKw1E,WAAWvuC,GAGhBjnC,KAAKy1E,eAAeF,GAGpBv1E,KAAK01E,iBA+lBT,OA5lBE,YAAArC,gBAAA,WACE,OAAOrzE,KAAK21E,kBAGd,YAAAC,cAAA,WACE,OAAO51E,KAAK61E,gBAGd,YAAArB,iBAAA,WACE,OAAOx0E,KAAK81E,mBAGd,YAAAC,eAAA,WACE,OAAO/1E,KAAKg2E,iBAGd,YAAA5N,UAAA,WACE,OAAOpoE,KAAKi2E,UAGd,YAAAlD,SAAA,WACE,OAAO/yE,KAAKk2E,QAGN,YAAAV,WAAR,SAAmBvuC,GAEjB,GAAIA,aAAiB,EAAApE,KAAK4B,WACxBzkC,KAAKm2E,yBAAyBlvC,OACzB,MAAIA,aAAiBmK,EAAOwjC,OAGjC,MAAM,IAAIp6C,UAAU,gCAFpBx6B,KAAKo2E,wBAAwBnvC,KAKzB,YAAAkvC,yBAAR,SAAiClvC,G,4BACzBovC,EAAc,IAAI5kC,IACxBzxC,KAAKi2E,SAAW,GAEhBj2E,KAAK21E,iBAAmB,GACxB31E,KAAK61E,eAAiB,GAEtB71E,KAAK81E,kBAAoB,GACzB91E,KAAKg2E,gBAAkB,GAEvBh2E,KAAKk2E,OAAS,GAEd,IAAMI,EAAe,IAAI7kC,IAGzB,IAAKxK,EAAMX,MACT,MAAM,IAAI14C,MAAM,uCAElB,IAAM2oF,EAAkB,G,IACxB,IAAgB,QAAAtvC,EAAMX,OAAK,8BAAE,CAAxB,IAAM3gD,EAAC,QACV,GAAI0wF,EAAY33B,IAAI/4D,EAAEsnB,MACpB,MAAM,IAAIrf,MAAM,0BAA0BjI,EAAEsnB,MAE9C,IAAMupE,EAAex2E,KAAKi2E,SAAS/mF,KAAK,IAAIunF,EAAM9wF,IAAM,EACxD0wF,EAAYpqF,IAAItG,EAAEsnB,KAAOupE,GACzBD,EAAgBrnF,KAAKvJ,EAAEsnB,O,iGAIzB,IAAKg6B,EAAMM,YACT,MAAM,IAAI35C,MAAM,6C,IAElB,IAAgB,QAAAq5C,EAAMM,aAAW,8BAAE,CAAxB5hD,EAAC,QAAP,IACC4jC,EAAQ8sD,EAAYjkF,IAAIzM,EAAEsnB,MAC9B,QAAciO,IAAVqO,EAAqB,CACvB,IAAMtH,EAAQ,IAAIw0D,EAClBx0D,EAAML,KAAO,CACX6nB,MAAO,CAAC/B,KAAM,EAAAutC,UAAUyB,oBAAoB/wF,EAAE+hD,OAC9C4B,WAAY,EAAA2rC,UAAU0B,wBAAwBhxF,EAAEuiD,WAElD3e,EAAQvpB,KAAKi2E,SAAS/mF,KAAK+yB,GAAS,EACpCo0D,EAAYpqF,IAAItG,EAAEsnB,KAAOsc,GAE3BvpB,KAAKi2E,SAAS1sD,GAAOwrD,OAAS,EAC9B/0E,KAAKi2E,SAAS1sD,GAAO86B,OAAS,EAAA9a,OAAOkK,UAAU9tD,I,iGAIjD,IAASA,EAAI,EAAGA,EAAIqa,KAAKi2E,SAASjuF,OAAQrC,IACnCqa,KAAKi2E,SAAStwF,GAAG0+D,SACpBrkD,KAAK21E,iBAAiBzmF,KAAKvJ,GAC3Bqa,KAAK61E,eAAe3mF,KAAKqnF,EAAgB5wF,KAK7C,IAAKshD,EAAMlmB,OACT,MAAM,IAAInzB,MAAM,wC,IAElB,IAAgB,QAAAq5C,EAAMlmB,QAAM,8BAAE,CAC5B,GADSp7B,EAAC,QACN0wF,EAAY33B,IAAI/4D,EAAEsnB,MACpB,MAAM,IAAIrf,MAAM,2BAA2BjI,EAAEsnB,MAEzCupE,EAAex2E,KAAKi2E,SAAS/mF,KAAK,IAAIunF,EAAM9wF,IAAM,EACxD0wF,EAAYpqF,IAAItG,EAAEsnB,KAAOupE,GACzBx2E,KAAK81E,kBAAkB5mF,KAAKsnF,GAC5Bx2E,KAAKg2E,gBAAgB9mF,KAAKvJ,EAAEsnB,O,iGAI9B,IAAKg6B,EAAMngD,KACT,MAAM,IAAI8G,MAAM,sC,IAElB,IAAwB,QAAAq5C,EAAMngD,MAAI,8BAAE,CAClC,KADS8vF,EAAS,SACH3pE,KAEb,IAAK,IAAI4pE,EAAO,GAAIA,IAAQ,CAC1B,IAAM,EAAO,WAAWD,EAAUpwC,OAAM,IAAIqwC,EAC5C,IAAKP,EAAa53B,IAAI,GAAO,CAC3Bk4B,EAAU3pE,KAAO,EACjB,OAKN,GAAIqpE,EAAa53B,IAAIk4B,EAAU3pE,MAC7B,MAAM,IAAIrf,MAAM,yBAAyBgpF,EAAU3pE,MAE/CupE,EAAex2E,KAAKk2E,OAAOhnF,KAAK,IAAIkmF,EAAKwB,IAAc,EAC7DN,EAAarqF,IAAI2qF,EAAU3pE,KAAMupE,I,iGAInC,IAAS7wF,EAAI,EAAGA,EAAIqa,KAAKk2E,OAAOluF,OAAQrC,IAAK,CAC3C,IAAMmB,EAAOkZ,KAAKk2E,OAAOvwF,GAEzB,KADMixF,EAAY3vC,EAAMngD,KAAKnB,IACdo7B,OACb,MAAM,IAAInzB,MAAM,4BAA4BgpF,EAAU3pE,M,IAExD,IAAqB,kBAAA2pE,EAAU71D,SAAM,8BAAE,CAAlC,IAAMA,EAAM,QAQf,QANyB,KADrB+1D,EAAYT,EAAYjkF,IAAI2uB,MAE9B+1D,EAAY92E,KAAKi2E,SAAS/mF,KAAK,IAAIunF,GAAW,EAC9CJ,EAAYpqF,IAAI80B,EAAQ+1D,IAE1BhwF,EAAK+kE,QAAQ38D,KAAK4nF,QAEqB57D,IAAnClb,KAAKi2E,SAASa,GAAW/B,MAC3B,MAAM,IAAInnF,MAAM,4CAA4CkpF,GAM9D,GAJA92E,KAAKi2E,SAASa,GAAW/B,MAAQpvF,EAIR,aAArBixF,EAAUpwC,OAAuB,CACnC,IAAKowC,EAAUrwC,WAA4C,IAA/BqwC,EAAUrwC,UAAUv+C,SAAiB4uF,EAAUrwC,UAAU,GAAG1hD,EACtF,MAAM,IAAI+I,MAAM,uFAElB,IAAKgpF,EAAU71D,QAAsC,IAA5B61D,EAAU71D,OAAO/4B,OACxC,MAAM,IAAI4F,MAAM,4EAElB9G,EAAK+kE,QAAQrwD,MACb1U,EAAKwuF,aAAc,EAEnBt1E,KAAKi2E,SAASa,GAAW/B,OAAS,EAClC/0E,KAAKi2E,SAASa,GAAWzyB,OAAS,EAAA9a,OAAOkK,UAAUmjC,EAAUrwC,UAAU,GAAG1hD,K,kGAMhF,IAASc,EAAI,EAAGA,EAAIqa,KAAKk2E,OAAOluF,OAAQrC,IAAK,CAC3C,IACMixF,EAEN,GAHM9vF,EAAOkZ,KAAKk2E,OAAOvwF,KACnBixF,EAAY3vC,EAAMngD,KAAKnB,IAEd2gD,MACb,MAAM,IAAI14C,MAAM,2BAA2BgpF,EAAU3pE,M,IAEvD,IAAoB,kBAAA2pE,EAAUtwC,QAAK,8BAAE,CAAhC,IACGwwC,EADGxwC,EAAK,QAEd,QAAyB,KADnBwwC,EAAYT,EAAYjkF,IAAIk0C,IAEhC,MAAM,IAAI14C,MAAM,uBAAuB04C,EAAK,eAAeswC,EAAU3pE,MAEvEnmB,EAAK68D,OAAOz0D,KAAK4nF,GAEjB92E,KAAKi2E,SAASa,GAAW9B,IAAI9lF,KAAKvJ,I,kGAItC,OAAO,GAGD,YAAAywF,wBAAR,SAAgCnvC,G,UACxBovC,EAAc,IAAI5kC,IACxBzxC,KAAKi2E,SAAW,GAEhBj2E,KAAK21E,iBAAmB,GACxB31E,KAAK61E,eAAiB,GAEtB71E,KAAK81E,kBAAoB,GACzB91E,KAAKg2E,gBAAkB,GAEvBh2E,KAAKk2E,OAAS,GAMd,IAJA,IAAMI,EAAe,IAAI7kC,IAGnB8kC,EAAkB,GACf5wF,EAAI,EAAGA,EAAIshD,EAAM8vC,eAAgBpxF,IAAK,CAC7C,IAAMqxF,EAAY/vC,EAAM0c,OAAOh+D,GAC/B,GAAI0wF,EAAY33B,IAAIs4B,GAClB,MAAM,IAAIppF,MAAM,0BAA0BopF,GAG5C,IAAK,IAAItrF,EAAI,EAAGA,EAAIu7C,EAAMgwC,iBAAkBvrF,IAC1C,IAAqB,QAAjB,EAAAu7C,EAAMiwC,SAASxrF,UAAE,eAAEuhB,UAAW+pE,EAAW,CAC3C,IAAM/0D,EAAQ,IAAIw0D,EAElB,IAD2C,QAAzB,EAAiB,QAAjB,EAAAxvC,EAAMiwC,SAASxrF,UAAE,eAAEk2B,cAAM,eAAEu1D,eAC3B/lC,EAAOgmC,cAAcC,YACrC,MAAM,IAAIzpF,MAAM,0CAMlB,IAJA,IAAM45C,EAAYP,EAAMiwC,SAASxrF,GAAIk2B,OAAQK,MAAM,IAAImvB,EAAOkmC,oBACxD11D,EAAO,EAAAqzD,UAAU0B,wBAAwBnvC,EAAUgC,YACnDC,EAAQjC,EAAUiC,QAClB/B,EAAO,GACJn9C,EAAI,EAAGA,EAAIk/C,EAAM8tC,YAAchtF,IACtCm9C,EAAKx4C,KAAK,EAAAkkD,SAASC,aAAa5J,EAAMZ,IAAIt+C,GAAI03B,QAAS+mB,aAEzD/mB,EAAML,KAAO,CAAC6nB,MAAO,CAAC/B,KAAI,GAAG4B,WAAY1nB,GACzC,IAAM40D,EAAex2E,KAAKi2E,SAAS/mF,KAAK+yB,GAAS,EACjDo0D,EAAYpqF,IAAI+qF,EAAWR,GAC3BD,EAAgBrnF,KAAK8nF,IAK3B,IAASrxF,EAAI,EAAGA,EAAIshD,EAAMuwC,qBAAsB7xF,IAAK,CACnD,IAAM4hD,EAAcN,EAAMkhC,aAAaxiF,GACnC4jC,EAAQ8sD,EAAYjkF,IAAIm1C,EAAYt6B,aAC1BiO,IAAVqO,IACItH,EAAQ,IAAIw0D,EACZ/uC,EAAO,EAAAutC,UAAUwC,wBAAwBlwC,GACzC3lB,EAAO,EAAAqzD,UAAU0B,wBAAwBpvC,EAAYW,YAC3DjmB,EAAML,KAAO,CAAC6nB,MAAO,CAAC/B,KAAI,GAAG4B,WAAY1nB,GACzC2H,EAAQvpB,KAAKi2E,SAAS/mF,KAAK+yB,GAAS,EACpCo0D,EAAYpqF,IAAIs7C,EAAYt6B,OAASsc,IAEvCvpB,KAAKi2E,SAAS1sD,GAAOwrD,OAAS,EAC9B/0E,KAAKi2E,SAAS1sD,GAAO86B,OAAS,EAAA9a,OAAOmK,cAAcnM,GAIrD,IAAS5hD,EAAI,EAAGA,EAAIqa,KAAKi2E,SAASjuF,OAAQrC,IACnCqa,KAAKi2E,SAAStwF,GAAG0+D,SACpBrkD,KAAK21E,iBAAiBzmF,KAAKvJ,GAC3Bqa,KAAK61E,eAAe3mF,KAAKqnF,EAAgB5wF,KAK7C,IAASA,EAAI,EAAGA,EAAIshD,EAAMywC,gBAAiB/xF,IAAK,CAC9C,IAAMgyF,EAAa1wC,EAAM4kB,QAAQlmE,GACjC,GAAI0wF,EAAY33B,IAAIi5B,GAClB,MAAM,IAAI/pF,MAAM,2BAA2B+pF,GAEvCnB,EAAex2E,KAAKi2E,SAAS/mF,KAAK,IAAIunF,GAAW,EACvDJ,EAAYpqF,IAAI0rF,EAAYnB,GAC5Bx2E,KAAK81E,kBAAkB5mF,KAAKsnF,GAC5Bx2E,KAAKg2E,gBAAgB9mF,KAAKyoF,GAI5B,IAAK1wC,EAAMiX,MACT,MAAM,IAAItwD,MAAM,sCAElB,IAASjI,EAAI,EAAGA,EAAIshD,EAAM2wC,cAAejyF,IAAK,CAC5C,IACI,GADEixF,EAAY3vC,EAAMiX,MAAMv4D,IACRsnB,OACtB,IAAK,EAEH,IAAK,IAAI4pE,EAAO,EACd,EAAO,WAAWD,EAAWpwC,SAAQ,IAAIqwC,EACpCP,EAAa53B,IAAI,GAFJm4B,KAStB,GAAIP,EAAa53B,IAAI,GACnB,MAAM,IAAI9wD,MAAM,yBAAyB,GAErC4oF,EAAex2E,KAAKk2E,OAAOhnF,KAAK,IAAIkmF,EAAKwB,EAAY,IAAS,EACpEN,EAAarqF,IAAI,EAAMuqF,GAIzB,IAAS7wF,EAAI,EAAGA,EAAIqa,KAAKk2E,OAAOluF,OAAQrC,IAAK,CAC3C,IAAMmB,EAAOkZ,KAAKk2E,OAAOvwF,GAEzB,GAAiB,OADXixF,EAAY3vC,EAAMiX,MAAMv4D,IAE5B,MAAM,IAAIiI,MAAM,2BAA2BjI,GAE7C,GAAmC,KAA/BixF,aAAS,EAATA,EAAWc,iBACb,MAAM,IAAI9pF,MAAM,4BAA4BgpF,EAAU3pE,MAExD,IAASvhB,EAAI,EAAGA,GAAIkrF,aAAS,EAATA,EAAWc,iBAAiBhsF,IAAK,CACnD,IAAMq1B,EAAS61D,aAAS,EAATA,EAAW/qB,QAAQngE,GAQlC,QANyB,KADrBorF,EAAYT,EAAYjkF,IAAI2uB,MAE9B+1D,EAAY92E,KAAKi2E,SAAS/mF,KAAK,IAAIunF,GAAW,EAC9CJ,EAAYpqF,IAAI80B,EAAQ+1D,IAE1BhwF,EAAK+kE,QAAQ38D,KAAK4nF,QAEqB57D,IAAnClb,KAAKi2E,SAASa,GAAW/B,MAC3B,MAAM,IAAInnF,MAAM,4CAA4CkpF,GAM9D,GAJA92E,KAAKi2E,SAASa,GAAW/B,MAAQpvF,EAIN,aAAvBixF,EAAUpwC,SAAyB,CACrC,GAAqC,IAAjCowC,EAAUiB,qBAA6BjB,EAAUhrE,WAAW,GAAI/mB,IAClE,MAAM,IAAI+I,MAAM,uFAElB,GAAkC,IAA9BgpF,EAAUc,gBACZ,MAAM,IAAI9pF,MAAM,4EAElB9G,EAAK+kE,QAAQrwD,MACb1U,EAAKwuF,aAAc,EAEnBt1E,KAAKi2E,SAASa,GAAW/B,OAAS,EAClC/0E,KAAKi2E,SAASa,GAAWzyB,OAAS,EAAA9a,OAAOmK,cAAckjC,EAAUhrE,WAAW,GAAI/mB,OAMtF,IAASc,EAAI,EAAGA,EAAIqa,KAAKk2E,OAAOluF,OAAQrC,IAAK,CAC3C,IACMixF,EAEN,GAHM9vF,EAAOkZ,KAAKk2E,OAAOvwF,GAGQ,KAF3BixF,EAAY3vC,EAAMiX,MAAMv4D,IAEhBoxF,eACZ,MAAM,IAAInpF,MAAM,2BAA2BgpF,EAAU3pE,MAEvD,IAASvhB,EAAI,EAAGA,EAAIkrF,EAAUG,eAAiBrrF,IAAK,CAClD,IACMorF,EADAxwC,EAAQswC,EAAUjzB,OAAOj4D,GAE/B,QAAyB,KADnBorF,EAAYT,EAAYjkF,IAAIk0C,IAEhC,MAAM,IAAI14C,MAAM,uBAAuB04C,EAAK,eAAeswC,EAAW3pE,QAExEnmB,EAAK68D,OAAOz0D,KAAK4nF,GAEjB92E,KAAKi2E,SAASa,GAAW9B,IAAI9lF,KAAKvJ,MAKhC,YAAA+vF,eAAR,sBAEQoC,EAAwB,IAAI15B,IAClCp+C,KAAK21E,iBAAiBjpE,SAAQ,SAAA/mB,GACf,EAAKswF,SAAStwF,GACtBqvF,IAAItoE,SAAQ,SAAAhhB,GACfosF,EAASh3E,IAAIpV,SAQjB,IAHA,IAAMqsF,EAAa/jE,MAAMu4B,KAAKurC,GACxBE,EAAa,IAAIhkE,MAAchU,KAAKk2E,OAAOluF,QAAQiwF,KAAK,S,aAG5D,IAAMC,EAAYH,EAAWv8E,MAEC,SAA1Bw8E,EAAWE,GACbF,EAAWE,GAAa,SAGxBH,EAAW7oF,KAAKgpF,GAChBF,EAAWE,GAAa,OAExB,EAAKhC,OAAOgC,GAAWrsB,QAAQn/C,SAAQ,SAACyrE,GACtC,IAAM57E,EAAO,EAAK05E,SAASkC,GAC3B,QAA2B,IAAhB57E,EAAK8nD,OACd,MAAM,IAAIz2D,MAAM,0CAElB,GAAI2O,EAAKw4E,QAAUmD,EACjB,MAAM,IAAItqF,MAAM,iFAElB2O,EAAKy4E,IAAItoE,SAAQ,SAAC0rE,GAEhB,GAAwC,SAApCJ,EAAWI,GACb,MAAM,IAAIxqF,MAAM,yBAG2B,UAApCoqF,EAAWI,IAClBL,EAAW7oF,KAAKkpF,W,OAzBnBL,EAAW/vF,OAAS,G,KAiCrB,YAAAytF,eAAR,SAAuBF,GAErBv1E,KAAKq4E,yBACLr4E,KAAKs4E,wBAGD/C,GACFA,EAAiBE,eAAez1E,MAIlCA,KAAKu4E,iBASP,YAAAA,cAAA,WAGE,IAHF,I,EAAA,OACM31E,EAAS,E,WAEJjd,GACP,IAAK,EAAKuwF,OAAOvwF,GAAG2vF,Y,OAElB1yE,IAEA,EAAKszE,OAAOvwF,GAAGkmE,QAAQn/C,SAAQ,SAAA+0D,GAC7B,EAAKwU,SAASxU,GAAKsT,OAAS,KAE9B,EAAKmB,OAAO17E,OAAO7U,EAAG,GACtBA,I,EATKA,EAAC,WAYJid,EAAS,IAEX,EAAKszE,OAAOvwF,GAAGg+D,OAAOj3C,SAAQ,SAAAuV,GAC5B,IAAMw/C,EAAM,EAAKwU,SAASh0D,GAAO+yD,IAAIxrF,QAAQ7D,EAAIid,IACpC,IAAT6+D,IACF,EAAKwU,SAASh0D,GAAO+yD,IAAIvT,GAAO97E,MAGpC,EAAKuwF,OAAOvwF,GAAGkmE,QAAQn/C,SAAQ,SAAAuV,GACzB,EAAKg0D,SAASh0D,GAAO8yD,OAAS,EAAKkB,SAASh0D,GAAO8yD,QAAWpvF,EAAIid,IACpE,EAAKqzE,SAASh0D,GAAO8yD,MAASpvF,O,EAtB7BA,G,OAAAA,EAAI,EAAGA,EAAIqa,KAAKk2E,OAAOluF,OAAQrC,I,EAA/BA,KAAI,EA2Bbid,EAAS,E,iBAEAjd,GAEP,IAA+B,IAA3B,EAAKswF,SAAStwF,GAAG4mD,OAA+D,IAAhD,EAAKupC,kBAAkBtsF,QAAQ7D,EAAIid,G,OACrEA,IACA,EAAKqzE,SAASz7E,OAAO7U,EAAG,GACxBA,I,EALKA,EAAC,WAQR,GAAIid,EAAS,EAAG,CACd,IAAI,GAAO,OAGmBsY,IAA1B,EAAK+6D,SAAStwF,GAAG4mD,OAAiD,IAA3B,EAAK0pC,SAAStwF,GAAG4mD,MAE7C,KADb,EAAM,EAAK2pC,OAAO,EAAKD,SAAStwF,GAAG4mD,MAAMsf,QAAQriE,QAAQ7D,EAAIid,MAE3D,EAAKszE,OAAO,EAAKD,SAAStwF,GAAG4mD,MAAMsf,QAAQ,GAAOlmE,IAKvC,KADb,EAAM,EAAKgwF,iBAAiBnsF,QAAQ7D,EAAIid,MAEtC,EAAK+yE,iBAAiB,GAAOhwF,GAKjC,EAAKswF,SAAStwF,GAAG0uF,GAAG3nE,SAAQ,SAAA5lB,IAEb,KADb,EAAM,EAAKovF,OAAOpvF,GAAM68D,OAAOn6D,QAAQ7D,EAAIid,MAEzC,EAAKszE,OAAOpvF,GAAM68D,OAAO,GAAOh+D,MAGD,IAA/B,EAAKswF,SAAStwF,GAAG0uF,GAAGrsF,SAGT,KADb,EAAM,EAAK8tF,kBAAkBtsF,QAAQ7D,EAAIid,MAEvC,EAAKkzE,kBAAkB,GAAOnwF,G,EApC7BA,G,OAAT,IAASA,EAAI,EAAGA,EAAIqa,KAAKi2E,SAASjuF,OAAQrC,I,EAAjCA,KAAI,GA+CP,YAAA6yF,WAAR,SAAmBN,G,QACXpxF,EAAOkZ,KAAKk2E,OAAOgC,GACzB,GAAIpxF,EAAK68D,OAAO37D,OAAS,EACvB,MAAM,IAAI4F,MAAM,yDAElB,GAAI9G,EAAK+kE,QAAQ7jE,OAAS,EACxB,IAAK,IAAIrC,EAAI,EAAGA,EAAImB,EAAK+kE,QAAQ7jE,OAAQrC,IACvC,GAAIqa,KAAKi2E,SAASnvF,EAAK+kE,QAAQlmE,IAAI0uF,GAAGrsF,OAAS,EAC7C,MAAM,IAAI4F,MAAM,uFAMtB9G,EAAKwuF,aAAc,EACnB,IAAMmD,EAAkB3xF,EAAK68D,OAAO,GAC9B+0B,EAAmB5xF,EAAK+kE,QAAQ,GAChC8sB,EAAuB34E,KAAKi2E,SAASyC,GAAkBrE,GAGvDuE,EAAW54E,KAAKi2E,SAASwC,GAAiBpE,GAAG7qF,QAAQ0uF,GAE3D,IAAkB,IAAdU,EACF,MAAM,IAAIhrF,MAAM,yEAElBoS,KAAKi2E,SAASwC,GAAiBpE,GAAG75E,OAAOo+E,EAAU,GAGnD54E,KAAKi2E,SAASyC,GAAkB1D,IAAM,GAGtC,IAAMzrD,EAAQvpB,KAAK81E,kBAAkBtsF,QAAQkvF,GAM7C,IALe,IAAXnvD,IACFvpB,KAAK81E,kBAAkBvsD,GAASkvD,GAI9BE,GAAwBA,EAAqB3wF,OAAS,E,IACxD,IAAwB,QAAA2wF,GAAoB,8BAAE,CAAzC,IAAM,EAAS,QACZE,EAAe74E,KAAKk2E,OAAO,GAAWvyB,OAAOn6D,QAAQkvF,GAE3D,IAAsB,IAAlBG,EACF,MAAM,IAAIjrF,MAAM,4EAElBoS,KAAKk2E,OAAO,GAAWvyB,OAAOk1B,GAAgBJ,EAC9Cz4E,KAAKi2E,SAASwC,GAAiBpE,GAAGnlF,KAAK,I,mGAK7C,YAAAopF,sBAAA,W,QACMJ,EAAY,E,IAChB,IAAmB,QAAAl4E,KAAKk2E,QAAM,8BAAE,CAA3B,IAAMpvF,EAAI,QAEb,GAAoB,YAAhBA,EAAK0/C,OAAsB,CAE7B,GAA2B,IAAvB1/C,EAAK68D,OAAO37D,OACd,MAAM,IAAI4F,MAAM,iDAElB,GAA4B,IAAxB9G,EAAK+kE,QAAQ7jE,QAAwC,IAAxBlB,EAAK+kE,QAAQ7jE,OAC5C,MAAM,IAAI4F,MAAM,wDAGlB,GAA4B,IAAxB9G,EAAK+kE,QAAQ7jE,QAA8D,IAA9CgY,KAAKi2E,SAASnvF,EAAK+kE,QAAQ,IAAImpB,IAAIhtF,OAClE,MAAM,IAAI4F,MAAM,yEAElBoS,KAAKw4E,WAAWN,GAElBA,K,mGAIJ,YAAAG,uBAAA,W,QACMH,EAAY,E,IAChB,IAAmB,QAAAl4E,KAAKk2E,QAAM,8BAER,aAFP,QAEJ1vC,QACPxmC,KAAKw4E,WAAWN,GAElBA,I,mGAIJ,YAAAY,aAAA,SAAazzF,GACX,OAAQA,EAAEmhD,QAER,IAAK,OACL,IAAK,UACH,OAAO,EACT,QACE,OAAO,IAIb,YAAAuyC,wBAAA,W,YACE,IAAmB,QAAA/4E,KAAKk2E,QAAM,8BAAE,CAA3B,IAAMpvF,EAAI,QACb,GAAoB,SAAhBA,EAAK0/C,OAAmB,CAC1B,IAAMsI,EAAO9uC,KAAKi2E,SAASnvF,EAAK+kE,QAAQ,IAAImpB,IACxB,IAAhBlmC,EAAK9mD,QAAgBgY,KAAK84E,aAAa94E,KAAKk2E,OAAOpnC,EAAK,OAC1DhoD,EAAK8kB,WAAW3f,IAAI,wBAAyB,SAAW+T,KAAKk2E,OAAOpnC,EAAK,IAAU,QACnF9uC,KAAKw4E,WAAW1pC,EAAK,O,mGAK/B,EAtnBA,I,q/CC3CA,+BAIA,OAHE,YAAA5lD,IAAA,SAAI8vF,EAA4BC,EAAkBC,KAGpD,EAJA,GAKA,2BAsBA,OArBE,YAAAhwF,IAAA,SAAIiwF,EAA2BC,EAAiBC,GAE9C7wF,QAAQU,IAAO8W,KAAKs5E,MAAMH,GAAS,KAAIE,EAAW,QAAaA,EAAW,QAAa,IAAKD,IAGtF,YAAAE,MAAR,SAAcH,GACZ,OAAQA,GACN,IAAK,UACH,MAAO,gBACT,IAAK,OACH,MAAO,aACT,IAAK,UACH,MAAO,gBACT,IAAK,QACH,MAAO,gBACT,IAAK,QACH,MAAO,cACT,QACE,MAAM,IAAIvrF,MAAM,yBAAyBurF,KAGjD,EAtBA,GAwBMI,EAAiB,CACrB/jC,QAAS,IACT70B,KAAM,IACN80B,QAAS,IACThtD,MAAO,IACP+wF,MAAO,KAGHC,IAAmB,MAChB,KAAG,IAAIC,EACd,EAAU,QAAG,IAAIC,E,GAEbC,EAAwB,CAC5BC,SAAU,UACVC,gBAAiB,UACjBC,aAAa,EACbC,mBAAmB,GAEjBC,IAAiB,MAC2C,IAAKL,EAAgD,GAMrH,SAAS1wF,EACLgxF,EAA8BC,EAAeC,EAAsBC,GACrE,QAAan/D,IAATi/D,EAEF,OAkB6Bd,EAlBEa,EAmB1B,CACL1kC,QAAStsD,EAAIssD,QAAQ/qD,KAAK,KAAM4uF,GAChC14D,KAAMz3B,EAAIy3B,KAAKl2B,KAAK,KAAM4uF,GAC1B5jC,QAASvsD,EAAIusD,QAAQhrD,KAAK,KAAM4uF,GAChC5wF,MAAOS,EAAIT,MAAMgC,KAAK,KAAM4uF,GAC5BG,MAAOtwF,EAAIswF,MAAM/uF,KAAK,KAAM4uF,IAvBvB,QAAan+D,IAATk/D,EAETE,EAAYJ,EAAyBC,QAChC,GAAoB,iBAATC,QAA8Bl/D,IAATm/D,EAErCC,EAAYJ,EAAyBC,QAChC,GAAoB,iBAATC,QAA8Bl/D,IAATm/D,EAErCC,EAAYJ,EAAyBE,EAAM,EAAGD,OACzC,IAAoB,iBAATC,GAAqC,iBAATC,EAI5C,MAAM,IAAI7/C,UAAU,kBAFpB8/C,EAAYJ,EAAyBE,EAAMC,EAAMF,GAMrD,IAAiCd,EAajC,SAASiB,EAAYnB,EAA2BC,EAAiBvpF,EAAewpF,GAC9E,IAAM/O,EAAS2P,EAAkBZ,GAAY,KAAOY,EAAkB,IAClEV,EAAeJ,GAAYI,EAAejP,EAAOwP,mBAIjDxP,EAAOyP,cACTX,GAAa,IAAIp6E,MAAOu7E,cAAa,IAAInB,GAGvC9O,EAAO0P,kBAIXP,EAAoBnP,EAAOuP,UAAU3wF,IAAIiwF,EAAUC,EAASC,KAI9D,SAAUnwF,GA2BR,SAAgBwmD,EAAM46B,GACpB2P,EAAoB,GACpBhuF,EAAI,GAAIq+E,GAAU,IAEpB,SAAgBr+E,EAAIotF,EAAkB/O,GACpC,GAAiB,MAAb+O,EACF3pC,EAAM46B,OACD,CACL,IAAMkQ,EAAiBP,EAAkBZ,IAAaO,EACtDK,EAAkBZ,GAAY,CAC5BQ,SAAUvP,EAAOuP,UAAYW,EAAeX,SAC5CC,gBAAiBxP,EAAOwP,iBAAmBU,EAAeV,gBAC1DC,iBAAqC7+D,IAAvBovD,EAAOyP,YAA6BS,EAAeT,YAAczP,EAAOyP,YACtFC,uBAAiD9+D,IAA7BovD,EAAO0P,kBAAmCQ,EAAeR,kBACf1P,EAAO0P,oBAtC3D,EAAAxkC,QAAhB,SAAwB0kC,EAAcC,GACpCjxF,EAAI,UAAWgxF,EAAMC,IAIP,EAAAx5D,KAAhB,SAAqBu5D,EAAcC,GACjCjxF,EAAI,OAAQgxF,EAAMC,IAIJ,EAAA1kC,QAAhB,SAAwBykC,EAAcC,GACpCjxF,EAAI,UAAWgxF,EAAMC,IAIP,EAAA1xF,MAAhB,SAAsByxF,EAAcC,GAClCjxF,EAAI,QAASgxF,EAAMC,IAIL,EAAAX,MAAhB,SAAsBU,EAAcC,GAClCjxF,EAAI,QAASgxF,EAAMC,IAGL,EAAAzqC,MAAK,EAIL,EAAAzjD,IAAG,EAiBH,EAAAspD,WAAhB,SAA2BpvB,GACzB,IAAMmkD,EAAwB,GAC1BnkD,EAAIs0D,WACNnQ,EAAOwP,gBAAkB3zD,EAAIs0D,UAE/BxuF,EAAI,GAAIq+E,IArDZ,CAAUphF,MAAG,KA0DA,EAAAosD,OAAiBpsD,EAkB9B,iBACE,WACWmwF,EAAyCpsE,EAAqBytE,EAC7DC,EAAsDC,EAA2BxuE,GADlF,KAAAitE,WAAyC,KAAApsE,OAAqB,KAAAytE,YAC7D,KAAAC,cAAsD,KAAAC,QAA2B,KAAAxuE,MAc/F,OAZE,YAAAihB,IAAA,WACE,OAAOrtB,KAAK26E,YAAY36E,OAGpB,YAAA66E,WAAN,W,mEACE,QAAiB3/D,IAAblb,KAAKoM,UAAoC8O,IAAflb,KAAK46E,MACjC,MAAM,IAAIhtF,MAAM,wBAGhB,OADAoS,KAAKoM,IAAI6lE,WACF,CAAP,EAAOjyE,KAAKoM,IAAIymE,uBAAuB7yE,KAAK46E,eAGlD,EAjBA,GAmBA,EACE,SACWvB,EAAyCpsE,EAAqBytE,EAA0BI,GAAxF,KAAAzB,WAAyC,KAAApsE,OAAqB,KAAAytE,YAA0B,KAAAI,WAGrG,aAQE,WAAoBC,EAA0BC,EAAyBC,GA+H/D,KAAAC,UAAW,EASX,KAAAC,cAAgB,EAvItBn7E,KAAKk7E,UAAW,EAChBl7E,KAAKo7E,sBAAuClgE,IAApB6/D,EAAgC,IAAQA,EAChE/6E,KAAKq7E,qBAAqCngE,IAAnB8/D,EAA+B,GAAKA,EAC3Dh7E,KAAKs7E,kCAA+DpgE,IAAhC+/D,EAA4C,IAAOA,EAqI3F,OAhJS,EAAAroD,OAAP,SAAc03C,GACZ,YAAepvD,IAAXovD,EACK,IAAItqE,KAEN,IAAIA,KAAKsqE,EAAOyQ,gBAAiBzQ,EAAO0Q,eAAgB1Q,EAAO2Q,8BAWxE,YAAAl1D,MAAA,WACE/lB,KAAKk7E,UAAW,EAChBl7E,KAAKu7E,cAAgB,GACrBv7E,KAAKw7E,WAAa,EAAAz9E,MAClBiC,KAAKm7E,cAAgB,GAIvB,YAAAM,KAAA,WAEE,IADAz7E,KAAKk7E,UAAW,EACTl7E,KAAKm7E,cAAgBn7E,KAAKu7E,cAAcvzF,OAAQgY,KAAKm7E,gBAC1Dn7E,KAAK07E,YAAY17E,KAAKu7E,cAAcv7E,KAAKm7E,iBAQ7C,YAAA9V,MAAA,SAASgU,EAAkCpsE,EAAc9d,EAA4Bid,GAArF,WAEQi5D,EAAQrlE,KAAKk7E,SAAWl7E,KAAK2oC,MAAM0wC,EAAUpsE,EAAMb,QAAO8O,EAC5DygE,GAAY,EAEV56C,EAAM5xC,IAGZ,GAAI4xC,GAA2C,mBAA5BA,EAAmBlwC,KAEpC,OADA8qF,GAAY,EACL,IAAI51F,SAAW,SAACkL,EAASqqB,GAC7BylB,EACIlwC,MACG,SAAMoxB,GAAK,qC,yDACLojD,EACF,GAAMA,EAAMh4C,OADV,M,OACF,S,wBAEFp8B,EAAQgxB,G,cAEV,SAAMf,GAAM,qC,yDACNmkD,EACF,GAAMA,EAAMh4C,OADV,M,OACF,S,wBAEF/R,EAAO4F,G,iBAIrB,IAAKy6D,GAAatW,EAAO,CACvB,IAAM,EAAWA,EAAMh4C,MACvB,GAAI,GAAqC,mBAAlB,EAASx8B,KAC9B,OAAO,IAAI9K,SAAW,SAACkL,EAASqqB,GAC9B,EAAWzqB,MACP,WACEI,EAAQ8vC,MAEV,SAAC7f,GACC5F,EAAO4F,SAKnB,OAAO6f,GAIT,YAAA4H,MAAA,SAAM0wC,EAAkCpsE,EAAcb,GAAtD,WACE,IAAKpM,KAAKk7E,SACR,MAAM,IAAIttF,MAAM,+BAElB,QAAYstB,IAAR9O,EAAmB,CACrB,IAAMsuE,EAAY,EAAA38E,MAElB,OADAiC,KAAK47E,MAAMlB,GACJ,IAAImB,EAAMxC,EAAUpsE,EAAMytE,GAAW,SAAAl2F,GAAK,SAAKs3F,QAAQt3F,MAE9D,IAAMo2F,EAAoBxuE,EAAIslE,aAC9B,OAAO,IAAImK,EAAMxC,EAAUpsE,EAAM,GAAG,SAAMzoB,GAAC,gEAAI,SAAAwb,KAAKqtB,IAAI7oC,YAAIo2F,EAAOxuE,IAKzD,YAAAihB,IAAd,SAAkBg4C,G,gGACQ,SAAMA,EAAMwV,c,cAA9BC,EAAkB,SACpB96E,KAAKu7E,cAAcvzF,OAASgY,KAAKo7E,mBACnCp7E,KAAKu7E,cAAcrsF,KAAK,IAAI6sF,EAAY1W,EAAMgU,SAAUhU,EAAMp4D,KAAMo4D,EAAMqV,UAAWI,IACrF96E,KAAK47E,MAAMd,I,YAIP,YAAAgB,QAAR,SAAgBzW,GACd,IAAMyV,EAAkB,EAAA/8E,MACpBiC,KAAKu7E,cAAcvzF,OAASgY,KAAKo7E,mBACnCp7E,KAAKu7E,cAAcrsF,KAAK,IAAI6sF,EAAY1W,EAAMgU,SAAUhU,EAAMp4D,KAAMo4D,EAAMqV,UAAWI,IACrF96E,KAAK47E,MAAMd,KAIP,YAAAY,YAAR,SAAoBrW,GAClB,EAAA/vB,OAAOE,QACH,YAAY6vB,EAAMgU,UACdhU,EAAMyV,QAAUzV,EAAMqV,WAAWsB,QAAQ,GAAE,gBAAgB3W,EAAMp4D,KAAI,QAAQo4D,EAAMyV,QAAQkB,QAAQ,KAGrG,YAAAJ,MAAR,SAAcK,GACZ,GAAIj8E,KAAKu7E,cAAcvzF,OAASgY,KAAKm7E,eAAiBn7E,KAAKq7E,iBACvDY,EAAcj8E,KAAKw7E,YAAcx7E,KAAKs7E,6BAA8B,CAGtE,IAAK,IAAMY,EAAkBl8E,KAAKm7E,cAAen7E,KAAKm7E,cAAgBe,EAAkBl8E,KAAKq7E,iBACxFr7E,KAAKm7E,cAAgBn7E,KAAKu7E,cAAcvzF,OACxCgY,KAAKm7E,gBACRn7E,KAAK07E,YAAY17E,KAAKu7E,cAAcv7E,KAAKm7E,gBAG3Cn7E,KAAKw7E,WAAa,EAAAz9E,QAItB,sBAAI,sBAAO,C,IAAX,WACE,OAAOiC,KAAKk7E,U,gCAYhB,EAjJA,GAAa,EAAAiB,WAsJA,EAAAp+E,IAA8B,oBAAhB3T,aAA+BA,YAAY2T,IAAO,WAAM,OAAA3T,YAAY2T,OAAQiB,KAAKjB,K,kGC3b5G,cACA,UAEA,UAGOqzC,EADP,QACgBC,YAAYC,aAAaC,IACzC,UAEA,aAEE,cAwDF,OAtDE,YAAAxmD,KAAA,SAAK6zB,EAAiB22D,EAAsC6G,GAC1D,IAAKA,EAEH,IAEE,YADAp8E,KAAKq8E,mBAAmBz9D,EAAK22D,GAE7B,MAAO/wF,GACP,QAAoB02B,IAAhBkhE,EACF,MAAM53F,EAKZwb,KAAKs8E,kBAAkB19D,EAAK22D,IAGtB,YAAA8G,mBAAR,SAA2Bz9D,EAAiB22D,GAC1C,IAAMgH,EAAa,EAAA15C,KAAK6D,WAAWjpB,OAAOmB,GAE1C,GADkB,EAAAw0B,SAASC,aAAakpC,EAAW11C,WACnC,EACd,MAAM,IAAIj5C,MAAM,8CAGlBoS,KAAKw8E,QACDD,EAAW51C,YAAYgN,KAAI,SAAAhuD,GAAK,OAAE8gD,OAAQ9gD,EAAE8gD,OAAkB56B,QAAS,EAAAunC,SAASC,aAAa1tD,EAAEkmB,aAEnG7L,KAAKy8E,OAAS,EAAA7H,MAAMroC,KAAKgwC,EAAWt1C,MAAQsuC,IAGtC,YAAA+G,kBAAR,SAA0B19D,EAAiB22D,GACzC,IAAM/E,EAAK,IAAI,EAAA3+C,YAAYwB,WAAWzU,GAChC89D,EAAWtrC,EAAOurC,iBAAiBC,0BAA0BpM,GAAIqM,QAEvE,GADkB,EAAAzpC,SAASC,aAAaqpC,EAAS71C,aACjC,EACd,MAAM,IAAIj5C,MAAM,8CAElBoS,KAAKw8E,QAAU,GACf,IAAK,IAAI72F,EAAI,EAAGA,EAAI+2F,EAASI,oBAAqBn3F,IAAK,CACrD,IAAMo3F,EAAUL,EAAS/1C,YAAYhhD,GACrCqa,KAAKw8E,QAAQttF,KAAK,CAACu3C,OAAQs2C,aAAO,EAAPA,EAASt2C,SAAoB56B,QAAS,EAAAunC,SAASC,aAAa0pC,EAAQlxE,aAGjG7L,KAAKy8E,OAAS,EAAA7H,MAAMroC,KAAKmwC,EAASz1C,QAAUsuC,IAI9C,sBAAI,oBAAK,C,IAAT,WACE,OAAOv1E,KAAKy8E,Q,gCAId,sBAAI,qBAAM,C,IAAV,WACE,OAAOz8E,KAAKw8E,S,gCAEhB,EA1DA,GAAa,EAAAQ,S,gICEA,EAAAj1B,aACT,CAAC,UAAW,UAAW,QAAS,QAAS,OAAQ,SAAU,SAAU,SAC5D,EAAAk1B,UAAwC,CAAC,QAAS,QAAS,OAAQ,SAAU,SAAU,SACvF,EAAAh1B,YAA0C,CAAC,UAAW,Y,6GCNnE,+BA6CA,OA1CE,YAAAxT,WAAA,SAAW7oC,GACT5L,KAAK4sD,QAAUhhD,EAAWmmC,SAAS,UAAW,MAC9C/xC,KAAKk9E,SAAWtxE,EAAWmmC,SAAS,WAAY,IAChD/xC,KAAKm9E,QAAUvxE,EAAWomC,OAAO,UAAW,IAG9C,YAAAkiC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,IAAM33D,EAAI23D,EAAO,GACXgJ,EAAQhJ,EAAO,GACf77D,EAAI67D,EAAO,GACXy5B,EAAOz5B,EAAO,GACd05B,EAAO15B,EAAO,GAIpB,QAAI33D,EAAE07C,KAAK1/C,OAAS,GAA2B,IAAtB2kE,EAAMjlB,KAAK1/C,QAAkC,IAAlBF,EAAE4/C,KAAK1/C,QAAqC,IAArBo1F,EAAK11C,KAAK1/C,QAC5D,IAArBq1F,EAAK31C,KAAK1/C,QAGV2kE,EAAMjlB,KAAK,KAAO17C,EAAE07C,KAAK,IAAM5/C,EAAE4/C,KAAK,KAAO17C,EAAE07C,KAAK,IAAM01C,EAAK11C,KAAK,KAAO17C,EAAE07C,KAAK,IAClF21C,EAAK31C,KAAK,KAAO17C,EAAE07C,KAAK,IAGZ,YAAX17C,EAAE41B,MAAiC,YAAX51B,EAAE41B,MAAuC,YAAf+qC,EAAM/qC,MAAqC,YAAf+qC,EAAM/qC,MACzE,YAAX95B,EAAE85B,MAAiC,YAAX95B,EAAE85B,MAAsC,YAAdw7D,EAAKx7D,MAAoC,YAAdw7D,EAAKx7D,MACpE,YAAdy7D,EAAKz7D,MAAoC,YAAdy7D,EAAKz7D,OASzC,EA7CA,GAAsB,EAAAorC,sB,mGCHtB,iBACE,WACcC,EAAsDzmB,EACtD2mB,GADA,KAAAF,iBAAsD,KAAAzmB,SACtD,KAAA2mB,aAuBhB,OAnBE,YAAA1Y,WAAA,SAAWjD,KAEX,YAAA0iC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,OAAqD,IAAjD3jD,KAAKitD,eAAezjE,QAAQm6D,EAAO,GAAG/hC,OAGtC+hC,EAAO,GAAG/hC,OAAS+hC,EAAO,GAAG/hC,MAKrC,EA1BA,GAAsB,EAAAisC,Y,+FCAtB,+BA0BA,OAvBE,YAAApZ,WAAA,SAAW7oC,GACT5L,KAAKqF,IAAMuG,EAAWmmC,SAAS,OAAQ,sBACvC/xC,KAAKsF,IAAMsG,EAAWmmC,SAAS,MAAO,uBAGxC,YAAAmiC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MASlD,EA1BA,GAAsB,EAAAosC,Q,saCAtB,+BAwCA,OArCE,YAAAvZ,WAAA,SAAW7oC,GACT5L,KAAKkuD,KAAOtiD,EAAWomC,OAAO,SAGhC,YAAAkiC,YAAA,SAAYvwB,GACV,SAAKA,GAAUA,EAAO37D,OAAS,IAIxBgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,G,QAClB25B,EAAY35B,EAAO,GAAG/hC,KACtB27D,EAAsB55B,EAAO,GAAGjc,KAAK1/C,OAG3C,GAAkB,WAAds1F,EACF,OAAO,E,IAGT,IAAoB,QAAA35B,GAAM,8BAAE,CAAvB,IAAMrd,EAAK,QAEd,GAAIA,EAAM1kB,OAAS07D,EACjB,OAAO,EAIT,GAAIh3C,EAAMoB,KAAK1/C,SAAWu1F,EACxB,OAAO,G,iGAIX,OAAO,GAIX,EAxCA,GAAsB,EAAApuB,U,+FCAtB,+BAoFA,OAjFE,YAAA1a,WAAA,SAAW7oC,GAET5L,KAAK+wD,QAAUnlD,EAAWqmC,UAAU,WAAY,UAChDjyC,KAAK6wD,UAAYjlD,EAAWwmC,QAAQ,YAAa,CAAC,EAAG,IACrDpyC,KAAKgxD,MAAQplD,EAAWomC,OAAO,QAAS,GACxChyC,KAAK0wD,YAAc9kD,EAAWwmC,QAAQ,eAAgB,IACtDpyC,KAAK8wD,KAAOllD,EAAWwmC,QAAQ,OAAQ,CAAC,EAAG,EAAG,EAAG,IACjDpyC,KAAKw4C,QAAU5sC,EAAWwmC,QAAQ,UAAW,CAAC,EAAG,IACjDpyC,KAAKoxD,WAAaxlD,EAAWqmC,UAAU,wBAAyB,KAGlE,YAAAiiC,YAAA,SAAYvwB,GAGV,IAAKA,GAA6B,IAAlBA,EAAO37D,QAAkC,IAAlB27D,EAAO37D,OAC5C,OAAO,EAKT,GAA8B,IAA1B27D,EAAO,GAAGjc,KAAK1/C,QAA0C,IAA1B27D,EAAO,GAAGjc,KAAK1/C,OAChD,OAAO,EAMT,GAFoB27D,EAAO,GAAGjc,KAAK,KACXic,EAAO,GAAGjc,KAAK,GAAK1nC,KAAKgxD,MAE/C,OAAO,EAIT,GAAsB,IAAlBrN,EAAO37D,SAA2C,IAA1B27D,EAAO,GAAGjc,KAAK1/C,QAAgB27D,EAAO,GAAGjc,KAAK,KAAOic,EAAO,GAAGjc,KAAK,IAC9F,OAAO,EAGT,IAAMgrB,EAAc/O,EAAO,GAAGjc,KAAK1/C,OAAS,EAE5C,OAAIgY,KAAK6wD,UAAU7oE,SAAW0qE,GAK1B1yD,KAAKw4C,QAAQxwD,SAAW0qE,GAKxB1yD,KAAK8wD,KAAK9oE,SAAyB,EAAd0qE,IAMO,IAA5B1yD,KAAK0wD,YAAY1oE,QAAgBgY,KAAK0wD,YAAY1oE,SAAW27D,EAAO,GAAGjc,KAAK1/C,OAAS,IAIlFgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GAExB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,OAIxB,IAAlB+hC,EAAO37D,QAAmC,YAAnB27D,EAAO,GAAG/hC,OAczC,EApFA,GAAsB,EAAAmwC,Q,uGCAtB,iBACE,cA2CF,OAvCE,YAAAtd,WAAA,SAAW7oC,GAGT,GADA5L,KAAKs2D,UAAY1qD,EAAWomC,OAAO,aAC/BhyC,KAAKs2D,UAAY,EACnB,MAAM,IAAI1oE,MAAM,qCAAqCoS,KAAKs2D,UAAS,qBAIrE,GAFAt2D,KAAKu2D,aAAev2D,KAAKs2D,UAAYt2D,KAAKs2D,UAC1Ct2D,KAAKujB,KAAO3X,EAAWqmC,UAAU,OAAQ,OACrCilB,EAAasmB,eAAeh0F,QAAQwW,KAAKujB,MAAQ,EACnD,MAAM,IAAI31B,MAAM,sBAAsBoS,KAAKujB,KAAI,sBAInD,YAAA2wD,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,IAAM25B,EAAY35B,EAAO,GAAG/hC,KACtB27D,EAAsB55B,EAAO,GAAGjc,KAAK1/C,OAI3C,MAAkB,WAAds1F,GAAkD,IAAxBC,GAWR,EAAAC,eAAiB,CAAC,MAAO,OACnD,EA5CA,GAAsB,EAAAtmB,gB,kGCAtB,+BA0BA,OAvBE,YAAAziB,WAAA,SAAW7oC,GACT5L,KAAKy9E,MAAQ7xE,EAAWmmC,SAAS,QAAS,IAC1C/xC,KAAKm3D,UAAW,GAGlB,YAAA+c,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MASlD,EA1BA,GAAsB,EAAA21C,W,6FCAtB,+BAwBA,OArBE,YAAA9iB,WAAA,SAAW7oC,GACT5L,KAAKsN,MAAQ1B,EAAWmmC,SAAS,QAAS,IAG5C,YAAAmiC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAQlD,EAxBA,GAAsB,EAAA61C,O,kGCAtB,+BAkCA,OA/BE,YAAAhjB,WAAA,SAAW7oC,GACT5L,KAAKkuD,KAAOtiD,EAAWomC,OAAO,OAAQ,IAGxC,YAAAkiC,YAAA,SAAYvwB,GACV,IAAKA,GAA4B,IAAlBA,EAAO37D,OACpB,OAAO,EAGT,IAAM7C,EAAIw+D,EAAO,GAAGjc,KAAK1/C,OACzB,OAAU,IAAN7C,KAIA6a,KAAKkuD,MAAQ/oE,GAAK6a,KAAKkuD,KAAO/oE,IAI3B6a,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GAExB,MAAuB,WAAnBA,EAAO,GAAG/hC,MAQlB,EAlCA,GAAsB,EAAAg2C,W,mGCHtB,aAGA,2BAiCA,OA9BE,YAAAnjB,WAAA,SAAW7oC,GACT5L,KAAKkuD,KAAOtiD,EAAWomC,OAAO,OAAQ,IAGxC,YAAAkiC,YAAA,SAAYvwB,GACV,IAAKA,GAA4B,IAAlBA,EAAO37D,OACpB,OAAO,EAET,IAAMgoE,EAAarM,EAAO,GAAGjc,KAAK1/C,OAClC,QAAIgoE,EAAa,MAGbhwD,KAAKkuD,MAAQ8B,GAAchwD,KAAKkuD,KAAO8B,EAAa,IAIjDhwD,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,OAA8C,IAA1C,EAAAoE,aAAav+D,QAAQm6D,EAAO,GAAG/hC,QAGZ,UAAnB+hC,EAAO,GAAG/hC,MAAuC,UAAnB+hC,EAAO,GAAG/hC,OAOhD,EAjCA,GAAsB,EAAAq2C,U,+FCAtB,iBACE,WAAYylB,GACV19E,KAAK09E,YAAcA,EAmDvB,OA9CE,YAAAjpC,WAAA,SAAW7oC,GACT5L,KAAKs4D,OAA4C,IAAnC1sD,EAAWomC,OAAO,SAAU,GAC1ChyC,KAAKu4D,OAA4C,IAAnC3sD,EAAWomC,OAAO,SAAU,GAC1ChyC,KAAKsN,MAAQ1B,EAAWmmC,SAAS,QAAS,GAC1C/xC,KAAK04D,KAAO9sD,EAAWmmC,SAAS,OAAQ,IAG1C,YAAAmiC,YAAA,SAAYvwB,GACV,QAAKA,KAGD3jD,KAAK09E,eAAgB/5B,EAAO37D,OAAS,GAAK27D,EAAO37D,OAAS,QAGzDgY,KAAK09E,aAAiC,IAAlB/5B,EAAO37D,UAKV,IAAlB27D,EAAO37D,QAA0C,IAA1B27D,EAAO,GAAGjc,KAAK1/C,QAA0C,IAA1B27D,EAAO,GAAGjc,KAAK1/C,SAIlEgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,QAAwB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MACvB,YAAnB+hC,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MACxB,IAAlB+hC,EAAO37D,QAAmC,YAAnB27D,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAIjE+hC,EAAO,GAAG/hC,OAAS+hC,EAAO,GAAG/hC,MAA4B,IAAlB+hC,EAAO37D,QAAgB27D,EAAO,GAAG/hC,OAAS+hC,EAAO,GAAG/hC,OAapG,EArDA,GAAsB,EAAA+2C,Q,sGCAtB,+BA8BA,OA3BE,YAAAlkB,WAAA,SAAW7oC,GACT5L,KAAK2sD,MAAQ/gD,EAAWmmC,SAAS,SACjC/xC,KAAKo5D,KAAOxtD,EAAWumC,UAAU,SAGnC,YAAA+hC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIQ,IAA1B27D,EAAO,GAAGjc,KAAK1/C,QAIZgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MASlD,EA9BA,GAAsB,EAAA03C,e,gHCAtB,+BAoCA,OAjCE,YAAA7kB,WAAA,SAAW7oC,GACT5L,KAAK4sD,QAAUhhD,EAAWmmC,SAAS,UAAW,OAGhD,YAAAmiC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,IAAM33D,EAAI23D,EAAO,GACXgJ,EAAQhJ,EAAO,GACf77D,EAAI67D,EAAO,GAIjB,QAAI33D,EAAE07C,KAAK1/C,OAAS,GAA2B,IAAtB2kE,EAAMjlB,KAAK1/C,QAAkC,IAAlBF,EAAE4/C,KAAK1/C,QAGvD2kE,EAAMjlB,KAAK,KAAO17C,EAAE07C,KAAK,IAAM5/C,EAAE4/C,KAAK,KAAO17C,EAAE07C,KAAK,IAGxC,YAAX17C,EAAE41B,MAAiC,YAAX51B,EAAE41B,MAAuC,YAAf+qC,EAAM/qC,MAAqC,YAAf+qC,EAAM/qC,MACzE,YAAX95B,EAAE85B,MAAiC,YAAX95B,EAAE85B,OAOnC,EApCA,GAAsB,EAAA24C,yB,oGCAtB,+BAwBA,OArBE,YAAA9lB,WAAA,SAAW7oC,GACT5L,KAAKsN,MAAQ1B,EAAWmmC,SAAS,QAAS,MAG5C,YAAAmiC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAQlD,EAxBA,GAAsB,EAAA44C,a,iGCAtB,+BAmCA,OAhCE,YAAA/lB,WAAA,SAAW7oC,GACT5L,KAAKoxD,WAAaxlD,EAAWqmC,UAAU,wBAAyB,KAGlE,YAAAiiC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIlB27D,EAAO,GAAGjc,KAAKic,EAAO,GAAGjc,KAAK1/C,OAAS,KAAO27D,EAAO,GAAGjc,KAAKic,EAAO,GAAGjc,KAAK1/C,OAAS,IAIlFgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,QAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAIvB,YAAnB+hC,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAI1C+hC,EAAO,GAAG/hC,OAAS+hC,EAAO,GAAG/hC,OAOrC,EAnCA,GAAsB,EAAAi5C,U,8FCAtB,+BA4BA,OAzBE,YAAApmB,WAAA,SAAW7oC,GACT5L,KAAKujB,KAAO3X,EAAWqmC,UAAU,OAAQ,YACzCjyC,KAAKiiB,MAAQrW,EAAWmmC,SAAS,QAAS,GAC1C/xC,KAAK8wD,KAAOllD,EAAWwmC,QAAQ,SAGjC,YAAA8hC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAUlD,EA5BA,GAAsB,EAAA+5C,O,knBCAtB,+BAuBA,OAtBE,YAAAuY,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAalD,EAvBA,GAyBA,2B,+CAgBA,OAhB0C,OAGxC,YAAA6yB,WAAA,SAAW7oC,GAST,GARA5L,KAAK+wD,QAAUnlD,EAAWqmC,UAAU,WAAY,UAChDjyC,KAAK0wD,YAAc9kD,EAAWwmC,QAAQ,gBACtCpyC,KAAKw4C,QAAU5sC,EAAWwmC,QAAQ,UAAW,IAC7CpyC,KAAK8wD,KAAOllD,EAAWwmC,QAAQ,OAAQ,IACvCpyC,KAAKg8D,gBAAiE,IAA9CpwD,EAAWomC,OAAO,oBAAqB,GAC/DhyC,KAAK29E,SAAW/xE,EAAWomC,OAAO,YAAa,GAGzB,IAAlBhyC,KAAK29E,SACP,MAAM,IAAI/vF,MAAM,2EAGtB,EAhBA,CAA0CgwF,GAApB,EAAA1hB,cAkBtB,+B,+CAMA,OANgD,OAG9C,YAAAznB,WAAA,SAAW7oC,GACT5L,KAAKg8D,gBAAiE,IAA9CpwD,EAAWomC,OAAO,oBAAqB,IAEnE,EANA,CAAgD4rC,GAA1B,EAAA3hB,oBAQtB,+B,+CAqBA,OArBsC,OAGpC,YAAAxnB,WAAA,SAAW7oC,GAST,GARA5L,KAAK+wD,QAAUnlD,EAAWqmC,UAAU,WAAY,UAChDjyC,KAAK0wD,YAAc9kD,EAAWwmC,QAAQ,gBACtCpyC,KAAKw4C,QAAU5sC,EAAWwmC,QAAQ,UAAW,IAC7CpyC,KAAK8wD,KAAOllD,EAAWwmC,QAAQ,OAAQ,IACvCpyC,KAAK29E,SAAW/xE,EAAWomC,OAAO,YAAa,GAC/ChyC,KAAK69E,aAAejyE,EAAWomC,OAAO,gBAAiB,GAG7B,IAAtBhyC,KAAK69E,aACP,MAAM,IAAIjwF,MAAM,+DAElB,GAAsB,IAAlBoS,KAAK29E,SACP,MAAM,IAAI/vF,MAAM,uEAKtB,EArBA,CAAsCgwF,GAAhB,EAAAlhB,UAuBtB,+B,+CAIA,OAJ4C,OAG1C,YAAAjoB,WAAA,SAAWjD,KACb,EAJA,CAA4CosC,GAAtB,EAAAnhB,iB,sGC7EtB,aAGA,2BA0BA,OAvBE,YAAAhoB,WAAA,SAAW7oC,GACT5L,KAAKw+D,KAAO5yD,EAAWwmC,QAAQ,OAAQ,IACvCpyC,KAAK4+D,SAAgD,IAArChzD,EAAWomC,OAAO,WAAY,IAGhD,YAAAkiC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,OAA8C,IAA1C,EAAAoE,aAAav+D,QAAQm6D,EAAO,GAAG/hC,OASvC,EA1BA,GAAsB,EAAAi9C,c,mGCHtB,aAGA,2BAwBA,OArBE,YAAApqB,WAAA,SAAWjD,KAEX,YAAA0iC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,QAA0C,IAA1B27D,EAAO,GAAGjc,KAAK1/C,SAI9CgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,OAA8C,IAA1C,EAAAoE,aAAav+D,QAAQm6D,EAAO,GAAG/hC,OAIZ,UAAnB+hC,EAAO,GAAG/hC,MAMlB,EAxBA,GAAsB,EAAAi+C,W,6GCHtB,aAGA,2BA0BA,OAvBE,YAAAprB,WAAA,SAAW7oC,GACT5L,KAAKohE,OAASx1D,EAAWwmC,QAAQ,UACjCpyC,KAAKqhE,KAAOz1D,EAAWwmC,QAAQ,QAC/BpyC,KAAKw+D,KAAO5yD,EAAWwmC,QAAQ,OAAQ,KAGzC,YAAA8hC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAGfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,OAA8C,IAA1C,EAAAoE,aAAav+D,QAAQm6D,EAAO,GAAG/hC,OASvC,EA1BA,GAAsB,EAAA0/C,QA4BtB,+BA4BA,OAzBE,YAAA7sB,WAAA,SAAWjD,KAEX,YAAA0iC,YAAA,SAAYvwB,GACV,SAAKA,GAAUA,EAAO37D,OAAS,GAAK27D,EAAO37D,OAAS,IAG7CgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,QAAuB,UAAnBA,EAAO,GAAG/hC,MAA8C,IAA1B+hC,EAAO,GAAGjc,KAAK1/C,QAG1B,UAAnB27D,EAAO,GAAG/hC,MAA8C,IAA1B+hC,EAAO,GAAGjc,KAAK1/C,QAG7C27D,EAAO37D,QAAU,IAAyB,UAAnB27D,EAAO,GAAG/hC,MAA8C,IAA1B+hC,EAAO,GAAGjc,KAAK1/C,SAGpE27D,EAAO37D,QAAU,IAAyB,UAAnB27D,EAAO,GAAG/hC,MAA8C,IAA1B+hC,EAAO,GAAGjc,KAAK1/C,UAM5E,EA5BA,GAAsB,EAAAw5E,Y,kGC5BtB,+BAwBA,OArBE,YAAA/sB,WAAA,SAAW7oC,GACT5L,KAAKkuD,KAAOtiD,EAAWomC,OAAO,OAAQ,IAGxC,YAAAkiC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAQlD,EAxBA,GAAsB,EAAA4gD,W,gGCAtB,iBACE,WAAsBM,GAAA,KAAAA,aA6BxB,OAzBE,YAAAruB,WAAA,SAAW7oC,GACT5L,KAAKkuD,KAAOtiD,EAAWomC,OAAO,OAAQ,GACtChyC,KAAK0/C,MAAQ9zC,EAAWwmC,QAAQ,QAAS,KAG3C,YAAA8hC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,SAAnBA,EAAO,GAAG/hC,MAAsC,UAAnB+hC,EAAO,GAAG/hC,MAAuC,UAAnB+hC,EAAO,GAAG/hC,MAClD,WAAnB+hC,EAAO,GAAG/hC,MAAwC,UAAnB+hC,EAAO,GAAG/hC,MAAuC,WAAnB+hC,EAAO,GAAG/hC,MACpD,YAAnB+hC,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAAyC,SAAnB+hC,EAAO,GAAG/hC,MASlF,EA9BA,GAAsB,EAAAmhD,S,kGCAtB,+BAyBA,OAtBE,YAAAtuB,WAAA,SAAW7oC,GACT5L,KAAKw+D,KAAO5yD,EAAWwmC,QAAQ,SAGjC,YAAA8hC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GAExB,MAAuB,WAAnBA,EAAO,GAAG/hC,MAQlB,EAzBA,GAAsB,EAAAohD,W,8FCAtB,+BAsCA,OAnCE,YAAAvuB,WAAA,SAAWjD,KAEX,YAAA0iC,YAAA,SAAYvwB,GACV,IAAKA,GAA4B,IAAlBA,EAAO37D,OACpB,OAAO,EAIT,IADA,IAAMA,EAAS27D,EAAO,GAAGjc,KAAK1/C,OACrBrC,EAAI,EAAGA,EAAIg+D,EAAO37D,OAAQrC,IAAK,CACtC,GAAIqC,IAAW27D,EAAOh+D,GAAG+hD,KAAK1/C,OAC5B,OAAO,EAGT,IAAK,IAAI0D,EAAI,EAAGA,EAAI1D,EAAQ0D,IAC1B,GAAIi4D,EAAO,GAAGjc,KAAKh8C,KAAOi4D,EAAOh+D,GAAG+hD,KAAKh8C,GACvC,OAAO,EAKb,OAAOsU,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,GAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,KAC5C,OAAO,EAET,IAAK,IAAIj8B,EAAI,EAAGA,EAAIg+D,EAAO37D,OAAQrC,IACjC,GAAIg+D,EAAO,GAAG/hC,OAAS+hC,EAAOh+D,GAAGi8B,KAC/B,OAAO,EAIX,OAAO,GAEX,EAtCA,GAAsB,EAAAshD,O,iGCHtB,aAGA,2BA4BA,OAzBE,YAAAzuB,WAAA,SAAWjD,KAEX,YAAA0iC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAGQ,IAA1B27D,EAAO,GAAGjc,KAAK1/C,QAGf27D,EAAO,GAAGjc,KAAK,KAAOic,EAAO,GAAGjc,KAAK1/C,QAIlCgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,OAA8C,IAA1C,EAAAoE,aAAav+D,QAAQm6D,EAAO,GAAG/hC,QAGZ,UAAnB+hC,EAAO,GAAG/hC,MAAuC,UAAnB+hC,EAAO,GAAG/hC,OAKhD,EA5BA,GAAsB,EAAAwhD,Q,oGCAtB,+BAwBA,OArBE,YAAA3uB,WAAA,SAAW7oC,GACT5L,KAAKujE,KAAO33D,EAAWwmC,QAAQ,OAAQ,KAGzC,YAAA8hC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,YAAnBA,EAAO,GAAG/hC,MAAyC,YAAnB+hC,EAAO,GAAG/hC,MAQlD,EAxBA,GAAsB,EAAAmiD,a,kGCAtB,iBACE,WAAsB9W,EAAsDE,GAAtD,KAAAF,iBAAsD,KAAAE,aAqB9E,OAjBE,YAAA1Y,WAAA,SAAWjD,KAEX,YAAA0iC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,OAAqD,IAAjD3jD,KAAKitD,eAAezjE,QAAQm6D,EAAO,GAAG/hC,OAM9C,EAtBA,GAAsB,EAAAuiD,W,oGCAtB,+BAyBA,OAtBE,YAAA1vB,WAAA,SAAW7oC,GACT5L,KAAKw+D,KAAO5yD,EAAWwmC,QAAQ,SAGjC,YAAA8hC,YAAA,SAAYvwB,GACV,SAAKA,GAA4B,IAAlBA,EAAO37D,SAIfgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GAExB,MAAuB,WAAnBA,EAAO,GAAG/hC,MAQlB,EAzBA,GAAsB,EAAA+iD,a,8fCCtB,iBACE,WAAsBmZ,GAAA,KAAAA,QA0IxB,OAtIE,YAAArpC,WAAA,SAAW7oC,EAAuBmyE,EAAmBtB,GAKnD,GAJAz8E,KAAKg+E,SAAYh+E,KAAK89E,OAAS,GAG/B99E,KAAKujB,KAAO3X,EAAWqmC,UAAU,OAAQ,WACvB,YAAdjyC,KAAKujB,MAAoC,WAAdvjB,KAAKujB,OAAsBvjB,KAAK89E,MAAQ,IAAoB,UAAd99E,KAAKujB,MAChF,MAAM,IAAI31B,MAAM,sBAAsBoS,KAAKujB,MAY7C,GATIvjB,KAAK89E,MAAQ,IACf99E,KAAKogE,OAASx0D,EAAWumC,UAAU,UACnC8rC,EAAkBj+E,KAAKogE,OAAQpgE,KAAKujB,KAAMvjB,KAAKg+E,WAGjDh+E,KAAKugE,mBAAqB30D,EAAWmmC,SAAS,sBAAuB,GAErE/xC,KAAK0gE,wBACD1gE,KAAK89E,MAAQ,GAAKlyE,EAAWqmC,UAAU,iCAAkC,cAAgB,cAI5C,IAH7C,CACE,aAAc,qBAAsB,uBAAwB,gBAAiB,qBAC7E,cACAzoD,QAAQwW,KAAK0gE,yBACjB,MAAM,IAAI9yE,MAAM,8BAA8BoS,KAAK0gE,wBAAuB,sBAM5E,GAJA1gE,KAAKkhE,iBAAmBlhE,KAAKk+E,aAAiD,uBAAjCl+E,KAAK0gE,wBAElD1gE,KAAKm+E,YACc,YAAdn+E,KAAKujB,MAAsBvjB,KAAK89E,OAAS,GAAMlyE,EAAWqmC,UAAU,eAAgB,sBAAwB,IACb,IAAhG,CAAC,qBAAsB,oBAAqB,QAAS,OAAQ,IAAIzoD,QAAQwW,KAAKm+E,aAChF,MAAM,IAAIvwF,MAAM,iBAAiBoS,KAAKm+E,YAAW,sBAKnD,GAFAn+E,KAAKwgE,kBAAoB50D,EAAWmmC,SAAS,iBAAkB,KAC/D/xC,KAAKygE,eAA6D,IAA5C70D,EAAWomC,OAAO,kBAAmB,GACvDhyC,KAAKygE,gBAAgC,UAAdzgE,KAAKujB,KAC9B,MAAM,IAAI31B,MAAM,4DAGlBoS,KAAKo+E,yBAA4Bp+E,KAAK89E,MAAQ,IAE3B,YAAd99E,KAAKujB,MAAuD,eAAjCvjB,KAAK0gE,yBAAiE,UAArB1gE,KAAKm+E,YAElFn+E,KAAK89E,MAAQ,IACf99E,KAAKq+E,YAAc,EACnBr+E,KAAKs+E,eAAiB,EACtBt+E,KAAKu+E,cAAgB,GACG,IAAfv+E,KAAK89E,QACd99E,KAAKs+E,eAAiB,IAI1B,YAAApK,YAAA,SAAYvwB,GACV,SAAKA,GAAW3jD,KAAK89E,MAAQ,GAAuB,IAAlBn6B,EAAO37D,QACpCgY,KAAK89E,OAAS,GAAK99E,KAAK89E,MAAQ,IAAwB,IAAlBn6B,EAAO37D,QAC7CgY,KAAK89E,OAAS,IAAwB,IAAlBn6B,EAAO37D,QAAkC,IAAlB27D,EAAO37D,WAInDgY,KAAKogE,QAAUzc,EAAO,GAAGjc,KAAK1/C,SAAWgY,KAAKogE,OAAOp4E,SAIlDgY,KAAK05D,gBAAgB/V,IAGpB,YAAA+V,gBAAV,SAA0B/V,GACxB,MAAuB,WAAnBA,EAAO,GAAG/hC,MAON,YAAAu+C,cAAV,SAAwBxc,GACtB,IACMkW,EADIlW,EAAO,GACDjc,KAGZ24B,EAAMrgE,KAAKqgE,IACf,IAAKA,EACH,GAAIrgE,KAAKk+E,aAAc,CACrB,GAAIl+E,KAAKq+E,aAAe,EACtB,MAAM,IAAIzwF,MAAM,4BAElByyE,EAAMme,EAAa76B,EAAO3jD,KAAKq+E,mBAE/Bhe,EAAM,IAAIrsD,MAAqB,EAAf6lD,EAAM7xE,QAAYiwF,KAAK,GAI3C,IACIwG,EADAre,EAASpgE,KAAKogE,OAElB,GAAKA,GAiBH,GAAIzc,EAAO3jD,KAAKu+E,eACd,MAAM,IAAI3wF,MAAM,8DAlBP,CACX,IAAM8wF,EAAe/6B,EAAO3jD,KAAKs+E,gBACjC,GAAII,GAAsC,IAAtBA,EAAavxE,KAAY,CAC3C,GAAIw2C,EAAO3jD,KAAKu+E,eACd,MAAM,IAAI3wF,MAAM,0DAElBwyE,EAASue,EAAgBD,EAAc1+E,KAAKujB,KAAMvjB,KAAKg+E,cAClD,CACL,IAAMY,EAAcj7B,EAAO3jD,KAAKu+E,eAChC,IAAKK,GAAoC,IAArBA,EAAYzxE,KAC9B,MAAM,IAAIvf,MAAM,qDAIlBwyE,EAASye,EADTJ,EAAczqE,MAAMu4B,KAAKqyC,EAAYtf,aACezF,EAAO75D,KAAKujB,KAAMvjB,KAAKg+E,WAU/E,MAAO,CAAC3d,EAAKD,EAFCqe,GAAeK,EAAmB1e,EAAQvG,KAoB5D,EA3IA,GA6IA,SAASokB,EAAkB7d,EAAkB78C,EAAcy6D,G,YACzD,GAAKA,E,IAOH,IAAoB,QAAA5d,GAAM,8BACxB,GADc,SACD,EACX,MAAM,IAAIxyE,MAAM,yC,0GARpB,IAAoB,QAAAwyE,GAAM,8BACxB,GADc,QACF,EACV,MAAM,IAAIxyE,MAAM,qD,iGAUtB,KAAa,WAAT21B,GAA8B,UAATA,GACD,IAAlB68C,EAAOp4E,QAAmC,IAAlBo4E,EAAOp4E,QAA8B,IAAdo4E,EAAO,IAA0B,IAAdA,EAAO,IAC3E,MAAM,IAAIxyE,MAAM,+JAC2CowF,EAAW,SAAW,YAAU,cAKjG,SAAgBQ,EAAane,GAC3B,OAAOA,EAAIlzD,KAAO,EAAI6G,MAAMu4B,KAAK8zB,EAAI14B,WAAa,GAGpD,SAAgBg3C,EAAgBhyB,EAAeppC,EAAcy6D,GAC3D,IAAM5d,EAASpsD,MAAMu4B,KAAKogB,EAAMhlB,WAEhC,OADAs2C,EAAkB7d,EAAQ78C,EAAMy6D,GACzB5d,EAGT,SAAgBye,EACZE,EAA0BllB,EAA0Bt2C,EAAcy6D,GAIpE,IAHA,IAAMh2F,EAAS6xE,EAAM7xE,OACfo4E,EAAS,IAAIpsD,MAAchsB,GAExBrC,EAAI,EAAG0nC,EAAMrlC,EAAQrC,EAAI0nC,EAAK1nC,IACrC,GAAiB,IAAbk0E,EAAMl0E,GAAU,CAClB,GAAiB,IAAbo5F,EAAMp5F,GACR,MAAM,IAAIiI,MAAM,0DAElBwyE,EAAOz6E,GAAK,OAEZy6E,EAAOz6E,GAAKo5F,EAAMp5F,GAAKk0E,EAAMl0E,GAIjC,OADAs4F,EAAkB7d,EAAQ78C,EAAMy6D,GACzB5d,EAGT,SAAgB0e,EAAmB1e,EAA2BvD,GAC5D,OAAOA,EAAUlpB,KAAI,SAAC9K,EAAKljD,GAAM,OAAAyf,KAAK+pB,MAAM0Z,EAAMu3B,EAAOz6E,OAjMrC,EAAAw7E,WAmKtB,iBAIA,oBAMA,kCAmBA,wB,qWCvJA,SAAS6d,EAAcnzE,EAAiBozE,GACtC,GAAIA,EAASC,SAAS,KAAM,CAE1B,IAAMC,EAAazuE,OAAOqsB,SAASkiD,EAASvrE,UAAU,EAAGurE,EAASj3F,OAAS,GAAI,IAC/E,OAAQgnC,MAAMmwD,IAAeA,GAActzE,EACtC,GAAmC,IAA/BozE,EAASv/B,MAAM,KAAK13D,OAAc,CAE3C,IAAMo3F,EAAOH,EAASv/B,MAAM,KAEtB2/B,GADAF,EAAazuE,OAAOqsB,SAASqiD,EAAK,GAAI,IAC3B1uE,OAAOqsB,SAASqiD,EAAK,GAAI,KAC1C,OAAQpwD,MAAMmwD,KAAgBnwD,MAAMqwD,IAAaF,GAActzE,GAAWA,GAAWwzE,EAGrF,OAAO3uE,OAAOqsB,SAASkiD,EAAU,MAAQpzE,E,0EApC7C,2BAAgC/kB,EAAkBwhF,EAA0BgX,G,gBAC1E,IAAmB,QAAAA,GAAK,8BAAE,CAArB,IAAM/0D,EAAI,QACPic,EAASjc,EAAK,GACdkc,EAASlc,EAAK,GACdg1D,EAAkBh1D,EAAK,GACvBi1D,EAAgBj1D,EAAK,GAE3B,GAAIzjC,EAAK0/C,SAAWA,E,IAClB,IAAoB,kBAAA8hC,IAAM,8BAAE,CAAvB,IAAMwV,EAAK,QAEd,IAAIA,EAAMr3C,SAAWA,GAA4B,YAAjBq3C,EAAMr3C,QAAmC,KAAXA,IACxDu4C,EAAclB,EAAMjyE,QAAS0zE,GAC/B,OAAOC,EAAc14F,I,oMAO/B,MAAM,IAAI0zC,UAAU,4BAA4B1zC,EAAK0/C,OAAM,kBACvD8hC,EAAO30B,KAAI,SAAA1nD,GAAO,OAAGA,EAAIw6C,QAAU,WAAS,KAAKx6C,EAAI4f,WAAW2hB,KAAK,S,wGC5C3E,IAKiB6jB,EAAYC,EAAaC,EAC5BvL,EANd,UAKiBqL,EAAA,EAAAA,cAAA,EAAAA,YAAW,IAACC,EAAA,EAAAA,eAAA,EAAAA,aAAY,IAACC,EAAA,EAAAA,MAAA,EAAAA,IAAG,KAC/BvL,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KACvB,2BACA,qBACA,iBACA,uBACA,uBACA,qBACA,uBACA,mBACA,yBACA,yBACA,wBACA,sCACA,wCAOJ,SAAiBqL,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYkuC,KAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAAE,uBAAa,qBAAW,qBADhB,GAAAluC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYmuC,KAAA,EAAAA,iBAAA,EAAAA,eAAc,KACxB,2BACA,qBACA,qBACA,mBACA,uBACA,qBACA,qBACA,qBACA,uBACA,mBACA,0BACA,wBACA,wBACA,wBACA,8BACA,gCACA,4BAlBsC,GAAAnuC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAyB5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAYouC,KAAA,EAAAA,WAAA,EAAAA,SAAQ,KAAE,2BAAe,qBADG,GAAApuC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,IAAY6lC,KAAA,EAAAA,gBAAA,EAAAA,cAAa,KAAE,iBAAU,iCAAiB,qCAAmB,2BADjC,GAAA7lC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAO5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAqGX,OA/FE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAA6/E,eAAP,SAAsBzsD,EAA4BkD,GAChD,OAAQA,GAAO,IAAIwpD,GAASF,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ3E,EAAA2sD,2BAAP,SAAkC3sD,EAA4BkD,GAE5D,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIwpD,GAASF,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQlF,YAAAyV,IAAA,SAAItf,EAAe+M,GACjB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIzI,WACpC82C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAAmkD,UAAA,WACE,IAAI30E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAAo9E,WAAP,SAAkBC,GAChBA,EAAQtpD,YAAY,IAOf,EAAAupD,OAAP,SAAcD,EAA8B59B,GAC1C49B,EAAQ/pD,eAAe,EAAGmsB,EAAW,IAQhC,EAAA89B,gBAAP,SAAuBF,EAA8B1jF,GACnD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA8nD,eAAP,SAAsBH,EAA8BI,GAClDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAC,SAAP,SAAgBL,GAEd,OADaA,EAAQppD,aAIhB,EAAA0pD,YAAP,SAAmBN,EAA8B59B,GAG/C,OAFAy9B,EAAME,WAAWC,GACjBH,EAAMI,OAAOD,EAAS59B,GACfy9B,EAAMQ,SAASL,IAE1B,EAxGA,GAAa,EAAAH,MAAK,EADsB,GAAAvuC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA8G5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA6FX,OAvFE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAwgF,mBAAP,SAA0BptD,EAA4BkD,GACpD,OAAQA,GAAO,IAAIwS,GAAa82C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ/E,EAAAqtD,+BAAP,SAAsCrtD,EAA4BkD,GAEhE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIwS,GAAa82C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAOtF,YAAAnR,MAAA,SAAMqU,GACJ,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAImvC,gBACpCd,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MASlB,YAAA8V,WAAA,SAAWy3C,GACT,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAMvE,EAAAC,eAAP,SAAsBX,GACpBA,EAAQtpD,YAAY,IAOf,EAAAkqD,SAAP,SAAgBZ,EAA8Ba,GAC5Cb,EAAQ/pD,eAAe,EAAG4qD,EAAa,IAOlC,EAAAC,cAAP,SAAqBd,EAA8Be,GACjDf,EAAQ/pD,eAAe,EAAG8qD,EAAkB,IAOvC,EAAAC,aAAP,SAAoBhB,GAElB,OADaA,EAAQppD,aAIhB,EAAAqqD,gBAAP,SACIjB,EAA8Ba,EAC9BE,GAIF,OAHAl4C,EAAU83C,eAAeX,GACzBn3C,EAAU+3C,SAASZ,EAASa,GAC5Bh4C,EAAUi4C,cAAcd,EAASe,GAC1Bl4C,EAAUm4C,aAAahB,IAElC,EAhGA,GAAa,EAAAn3C,UAAS,EADkB,GAAAyI,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA4GX,OAtGE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAmhF,wBAAP,SAA+B/tD,EAA4BkD,GACzD,OAAQA,GAAO,IAAIoqD,GAAkBd,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQpF,EAAAguD,oCAAP,SAA2ChuD,EAA4BkD,GAErE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIoqD,GAAkBd,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAM3F,YAAAiuD,QAAA,WACE,IAAIz+E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAkB5C,KAAKozB,GAAIwF,SAAS54B,KAAK25B,OAAS/2B,GACzCyuC,EAAYC,aAAaC,IAAIkuC,mBAAmB6B,SAMlE,YAAAt4C,SAAA,WACE,IAAIpmC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI4F,UAAUh5B,KAAK25B,OAAS/2B,GAAU5C,KAAKozB,GAAIqF,WAAW,EAAG,IASpF,YAAAwQ,SAAA,SAAS03C,GACP,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAMvE,EAAAY,oBAAP,SAA2BtB,GACzBA,EAAQtpD,YAAY,IAOf,EAAA6qD,WAAP,SAAkBvB,EAA8BoB,GAC9CpB,EAAQxqD,aAAa,EAAG4rD,EAAShwC,EAAYC,aAAaC,IAAIkuC,mBAAmB6B,UAO5E,EAAAG,YAAP,SAAmBxB,EAA8Bj3C,GAC/Ci3C,EAAQlqD,cAAc,EAAGiT,EAAUi3C,EAAQxnD,WAAW,EAAG,KAOpD,EAAAipD,YAAP,SAAmBzB,EAA8B0B,GAC/C1B,EAAQ/pD,eAAe,EAAGyrD,EAAgB,IAOrC,EAAAC,kBAAP,SAAyB3B,GAEvB,OADaA,EAAQppD,aAIhB,EAAAgrD,qBAAP,SACI5B,EAA8BoB,EAC9Br4C,EAA4B24C,GAK9B,OAJAjB,EAAea,oBAAoBtB,GACnCS,EAAec,WAAWvB,EAASoB,GACnCX,EAAee,YAAYxB,EAASj3C,GACpC03C,EAAegB,YAAYzB,EAAS0B,GAC7BjB,EAAekB,kBAAkB3B,IAE5C,EA/GA,GAAa,EAAAS,eAAc,EADa,GAAAnvC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAqH5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA4FX,OAtFE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAA8hF,4BAAP,SAAmC1uD,EAA4BkD,GAC7D,OAAQA,GAAO,IAAIghD,GAAsBsI,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQxF,EAAA2uD,wCAAP,SAA+C3uD,EAA4BkD,GAGzE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIghD,GAAsBsI,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAM/F,YAAAoW,SAAA,WACE,IAAI5mC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAkB5C,KAAKozB,GAAI6E,UAAUj4B,KAAK25B,OAAS/2B,GAC1CyuC,EAAYC,aAAaC,IAAImuC,eAAesC,WAO9D,YAAAv4C,MAAA,SAAMnT,GACJ,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIuuC,OACpCF,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAMX,EAAA6uD,wBAAP,SAA+BhC,GAC7BA,EAAQtpD,YAAY,IAOf,EAAAurD,YAAP,SAAmBjC,EAA8Bz2C,GAC/Cy2C,EAAQnqD,cAAc,EAAG0T,EAAU6H,EAAYC,aAAaC,IAAImuC,eAAesC,YAO1E,EAAAG,SAAP,SAAgBlC,EAA8BmC,GAC5CnC,EAAQ/pD,eAAe,EAAGksD,EAAa,IAOlC,EAAAC,sBAAP,SAA6BpC,GAE3B,OADaA,EAAQppD,aAIhB,EAAAyrD,yBAAP,SACIrC,EAA8Bz2C,EAC9B44C,GAIF,OAHA9K,EAAmB2K,wBAAwBhC,GAC3C3I,EAAmB4K,YAAYjC,EAASz2C,GACxC8tC,EAAmB6K,SAASlC,EAASmC,GAC9B9K,EAAmB+K,sBAAsBpC,IAEpD,EA/FA,GAAa,EAAA3I,mBAAkB,EADS,GAAA/lC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAqG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA2FX,OArFE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAuiF,iBAAP,SAAwBnvD,EAA4BkD,GAClD,OAAQA,GAAO,IAAIksD,GAAW5C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ7E,EAAAqvD,6BAAP,SAAoCrvD,EAA4BkD,GAE9D,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIksD,GAAW5C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAMpF,YAAAsvD,QAAA,WACE,IAAI9/E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAkB5C,KAAKozB,GAAI6E,UAAUj4B,KAAK25B,OAAS/2B,GAC1CyuC,EAAYC,aAAaC,IAAImuC,eAAesC,WAO9D,YAAA7K,UAAA,SAAU7gD,GACR,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIoxC,UACpC/C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAMX,EAAAwvD,aAAP,SAAoB3C,GAClBA,EAAQtpD,YAAY,IAOf,EAAAksD,WAAP,SAAkB5C,EAA8ByC,GAC9CzC,EAAQnqD,cAAc,EAAG4sD,EAASrxC,EAAYC,aAAaC,IAAImuC,eAAesC,YAOzE,EAAAc,aAAP,SAAoB7C,EAA8B8C,GAChD9C,EAAQ/pD,eAAe,EAAG6sD,EAAiB,IAOtC,EAAAC,WAAP,SAAkB/C,GAEhB,OADaA,EAAQppD,aAIhB,EAAAosD,cAAP,SACIhD,EAA8ByC,EAC9BK,GAIF,OAHAP,EAAQI,aAAa3C,GACrBuC,EAAQK,WAAW5C,EAASyC,GAC5BF,EAAQM,aAAa7C,EAAS8C,GACvBP,EAAQQ,WAAW/C,IAE9B,EA9FA,GAAa,EAAAuC,QAAO,EADoB,GAAAjxC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAoG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAuEX,OAjEE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAkjF,sBAAP,SAA6B9vD,EAA4BkD,GACvD,OAAQA,GAAO,IAAI6sD,GAAgBvD,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQlF,EAAAgwD,kCAAP,SAAyChwD,EAA4BkD,GAEnE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAI6sD,GAAgBvD,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAOzF,YAAAoW,SAAA,SAASlT,GACP,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIoxC,UACpC/C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAMX,EAAAiwD,kBAAP,SAAyBpD,GACvBA,EAAQtpD,YAAY,IAOf,EAAAurD,YAAP,SAAmBjC,EAA8BqD,GAC/CrD,EAAQ/pD,eAAe,EAAGotD,EAAgB,IAOrC,EAAAC,gBAAP,SAAuBtD,GAErB,OADaA,EAAQppD,aAIhB,EAAA2sD,mBAAP,SAA0BvD,EAA8BqD,GAGtD,OAFAH,EAAaE,kBAAkBpD,GAC/BkD,EAAajB,YAAYjC,EAASqD,GAC3BH,EAAaI,gBAAgBtD,IAExC,EA1EA,GAAa,EAAAkD,aAAY,EADe,GAAA5xC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAgF5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAiDX,OA3CE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAMT,YAAAk4E,UAAA,WACE,OAAOl4E,KAAKozB,GAAI2F,WAAW/4B,KAAK25B,SAMlC,YAAA8pD,YAAA,WACE,OAAOzjF,KAAKozB,GAAI6E,UAAUj4B,KAAK25B,OAAS,IAM1C,YAAA+pD,YAAA,WACE,OAAO1jF,KAAKozB,GAAI6E,UAAUj4B,KAAK25B,OAAS,IAUnC,EAAAgqD,cAAP,SACI1D,EAA8B2D,EAAoBC,EAClDC,GAKF,OAJA7D,EAAQ3rD,KAAK,EAAG,IAChB2rD,EAAQlrD,WAAW+uD,GACnB7D,EAAQlrD,WAAW8uD,GACnB5D,EAAQlrD,WAAW6uD,GACZ3D,EAAQr9E,UAEnB,EApDA,GAAa,EAAAmhF,QAAO,EADoB,GAAAxyC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0D5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAgJX,OA1IE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAgkF,kBAAP,SAAyB5wD,EAA4BkD,GACnD,OAAQA,GAAO,IAAI2tD,GAAYrE,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ9E,EAAA8wD,8BAAP,SAAqC9wD,EAA4BkD,GAE/D,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAI2tD,GAAYrE,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAMrF,YAAA8kD,UAAA,WACE,IAAIt1E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI2F,WAAW/4B,KAAK25B,OAAS/2B,GAAU,GAQ9D,YAAAuhF,WAAA,SAAW56D,EAAe+M,GACxB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIwyC,SACpCnE,OAAO5/E,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,GAAR2mB,EAAYvpB,KAAKozB,IACvE,MAMlB,YAAAgxD,iBAAA,WACE,IAAIxhF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAQhE,YAAAyhF,YAAA,SAAY96D,EAAe+M,GACzB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIwyC,SACpCnE,OAAO5/E,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,GAAR2mB,EAAYvpB,KAAKozB,IACvE,MAMlB,YAAAkxD,kBAAA,WACE,IAAI1hF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAA2hF,cAAP,SAAqBtE,GACnBA,EAAQtpD,YAAY,IAOf,EAAA6tD,aAAP,SAAoBvE,EAA8B/H,GAChD+H,EAAQnqD,cAAc,EAAGoiD,EAAW,IAO/B,EAAAuM,cAAP,SAAqBxE,EAA8ByE,GACjDzE,EAAQ/pD,eAAe,EAAGwuD,EAAkB,IAOvC,EAAAC,sBAAP,SAA6B1E,EAA8BI,GACzDJ,EAAQ/nD,YAAY,GAAImoD,EAAU,IAO7B,EAAAuE,eAAP,SAAsB3E,EAA8B4E,GAClD5E,EAAQ/pD,eAAe,EAAG2uD,EAAmB,IAOxC,EAAAC,uBAAP,SAA8B7E,EAA8BI,GAC1DJ,EAAQ/nD,YAAY,GAAImoD,EAAU,IAO7B,EAAA0E,YAAP,SAAmB9E,GAEjB,OADaA,EAAQppD,aAIhB,EAAAmuD,eAAP,SACI/E,EAA8B/H,EAAmBwM,EACjDG,GAKF,OAJAZ,EAASM,cAActE,GACvBgE,EAASO,aAAavE,EAAS/H,GAC/B+L,EAASQ,cAAcxE,EAASyE,GAChCT,EAASW,eAAe3E,EAAS4E,GAC1BZ,EAASc,YAAY9E,IAEhC,EAnJA,GAAa,EAAAgE,SAAQ,EADmB,GAAA1yC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAyJ5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAodX,OA9cE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAilF,cAAP,SAAqB7xD,EAA4BkD,GAC/C,OAAQA,GAAO,IAAI8+C,GAAQwK,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ1E,EAAA8xD,0BAAP,SAAiC9xD,EAA4BkD,GAE3D,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAI8+C,GAAQwK,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IASjF,YAAAnmB,KAAA,SAAK0zE,GACH,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAS9E,YAAA58C,UAAA,SAAU48C,GACR,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAS9E,YAAAl6C,OAAA,SAAOk6C,GACL,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAM9E,YAAAwE,aAAA,WACE,IAAIviF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI6E,UAAUj4B,KAAK25B,OAAS/2B,GAAU,GAM7D,YAAA2mB,MAAA,WACE,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI2F,WAAW/4B,KAAK25B,OAAS/2B,GAAU,GAS9D,YAAA4jC,OAAA,SAAOm6C,GACL,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAM9E,YAAA/+D,KAAA,WACE,IAAIhf,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAkB5C,KAAKozB,GAAI6E,UAAUj4B,KAAK25B,OAAS/2B,GAC1CyuC,EAAYC,aAAaC,IAAIouC,SAASyF,WASxD,YAAAC,sBAAA,SAAsB1E,GACpB,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAU9E,YAAAh9B,OAAA,SAAOp6B,EAAeo3D,GACpB,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,EAAWo3D,GAAoB,MAM7G,YAAA5J,aAAA,WACE,IAAIn0E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAUhE,YAAAipD,QAAA,SAAQtiC,EAAeo3D,GACrB,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,EAAWo3D,GAAoB,MAM7G,YAAAjJ,cAAA,WACE,IAAI90E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAQhE,YAAAgJ,WAAA,SAAW2d,EAAe+M,GAExB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAII,WACpCiuC,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAAykD,iBAAA,WACE,IAAIj1E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAOhE,YAAA0iF,eAAA,SAAe/7D,GACb,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI6E,UAAUj4B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAa,GAM5F,YAAAg8D,qBAAA,WACE,IAAI3iF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMhE,YAAA4iF,oBAAA,WACE,IAAI5iF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EACH,IAAInW,WACAuT,KAAKozB,GAAIhH,QAAQrnC,OAAQib,KAAKozB,GAAIhH,QAAQynB,WAAa7zC,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GACvF5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,IACxC,MAUN,YAAA6iF,eAAA,SAAel8D,EAAeo3D,GAC5B,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,EAAWo3D,GAAoB,MAM7G,YAAA+E,qBAAA,WACE,IAAI9iF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAA+iF,UAAP,SAAiB1F,GACfA,EAAQtpD,YAAY,KAOf,EAAAivD,QAAP,SAAe3F,EAA8B4F,GAC3C5F,EAAQ/pD,eAAe,EAAG2vD,EAAY,IAOjC,EAAAC,aAAP,SAAoB7F,EAA8B8F,GAChD9F,EAAQ/pD,eAAe,EAAG6vD,EAAiB,IAOtC,EAAAC,UAAP,SAAiB/F,EAA8BgG,GAC7ChG,EAAQ/pD,eAAe,EAAG+vD,EAAc,IAOnC,EAAAC,gBAAP,SAAuBjG,EAA8BkF,GACnDlF,EAAQnqD,cAAc,EAAGqvD,EAAc,IAOlC,EAAAgB,SAAP,SAAgBlG,EAA8B12D,GAC5C02D,EAAQnqD,cAAc,EAAGvM,EAAO,IAO3B,EAAA68D,UAAP,SAAiBnG,EAA8BoG,GAC7CpG,EAAQ/pD,eAAe,EAAGmwD,EAAc,IAOnC,EAAAC,QAAP,SAAerG,EAA8Br+D,GAC3Cq+D,EAAQnqD,cAAc,EAAGlU,EAAMyvB,EAAYC,aAAaC,IAAIouC,SAASyF,YAOhE,EAAAmB,yBAAP,SAAgCtG,EAA8BuG,GAC5DvG,EAAQ/pD,eAAe,EAAGswD,EAA6B,IAOlD,EAAAC,UAAP,SAAiBxG,EAA8ByG,GAC7CzG,EAAQ/pD,eAAe,EAAGwwD,EAAc,IAQnC,EAAAC,mBAAP,SAA0B1G,EAA8B1jF,GACtD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAsuD,kBAAP,SAAyB3G,EAA8BI,GACrDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAwG,WAAP,SAAkB5G,EAA8B6G,GAC9C7G,EAAQ/pD,eAAe,EAAG4wD,EAAe,IAQpC,EAAAC,oBAAP,SAA2B9G,EAA8B1jF,GACvD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA0uD,mBAAP,SAA0B/G,EAA8BI,GACtDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAA4G,cAAP,SAAqBhH,EAA8BiH,GACjDjH,EAAQ/pD,eAAe,GAAIgxD,EAAkB,IAQxC,EAAAC,uBAAP,SAA8BlH,EAA8B1jF,GAC1D0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA8uD,sBAAP,SAA6BnH,EAA8BI,GACzDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAgH,kBAAP,SAAyBpH,EAA8BqH,GACrDrH,EAAQ/pD,eAAe,GAAIoxD,EAAsB,IAQ5C,EAAAC,2BAAP,SAAkCtH,EAA8B1jF,GAC9D0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ5qD,SAAS94B,EAAK5W,IAExB,OAAOs6F,EAAQ3nD,aAOV,EAAAkvD,0BAAP,SAAiCvH,EAA8BI,GAC7DJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAoH,kBAAP,SAAyBxH,EAA8ByH,GACrDzH,EAAQ/pD,eAAe,GAAIwxD,EAAsB,IAQ5C,EAAAC,2BAAP,SAAkC1H,EAA8B1jF,GAC9D0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAsvD,0BAAP,SAAiC3H,EAA8BI,GAC7DJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAwH,QAAP,SAAe5H,GAEb,OADaA,EAAQppD,aAIhB,EAAAixD,WAAP,SACI7H,EAA8B4F,EAAgCE,EAC9DE,EAAkCd,EAAsB57D,EAAe88D,EACvEzkE,EAA6C4kE,EAC7CE,EAAkCI,EAAmCI,EACrEI,EAA0CI,GAe5C,OAdAtS,EAAKuQ,UAAU1F,GACf7K,EAAKwQ,QAAQ3F,EAAS4F,GACtBzQ,EAAK0Q,aAAa7F,EAAS8F,GAC3B3Q,EAAK4Q,UAAU/F,EAASgG,GACxB7Q,EAAK8Q,gBAAgBjG,EAASkF,GAC9B/P,EAAK+Q,SAASlG,EAAS12D,GACvB6rD,EAAKgR,UAAUnG,EAASoG,GACxBjR,EAAKkR,QAAQrG,EAASr+D,GACtBwzD,EAAKmR,yBAAyBtG,EAASuG,GACvCpR,EAAKqR,UAAUxG,EAASyG,GACxBtR,EAAKyR,WAAW5G,EAAS6G,GACzB1R,EAAK6R,cAAchH,EAASiH,GAC5B9R,EAAKiS,kBAAkBpH,EAASqH,GAChClS,EAAKqS,kBAAkBxH,EAASyH,GACzBtS,EAAKyS,QAAQ5H,IAExB,EAvdA,GAAa,EAAA7K,KAAI,EADuB,GAAA7jC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6d5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAiHX,OA3GE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAA+nF,mBAAP,SAA0B30D,EAA4BkD,GACpD,OAAQA,GAAO,IAAI0xD,GAAapI,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ/E,EAAA60D,+BAAP,SAAsC70D,EAA4BkD,GAEhE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAI0xD,GAAapI,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAStF,YAAAnmB,KAAA,SAAK0zE,GACH,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAS9E,YAAA58C,UAAA,SAAU48C,GACR,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAO9E,YAAA/+D,KAAA,SAAK0U,GACH,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIoxC,UACpC/C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAMX,EAAA80D,eAAP,SAAsBjI,GACpBA,EAAQtpD,YAAY,IAOf,EAAAivD,QAAP,SAAe3F,EAA8B4F,GAC3C5F,EAAQ/pD,eAAe,EAAG2vD,EAAY,IAOjC,EAAAC,aAAP,SAAoB7F,EAA8B8F,GAChD9F,EAAQ/pD,eAAe,EAAG6vD,EAAiB,IAOtC,EAAAO,QAAP,SAAerG,EAA8BkI,GAC3ClI,EAAQ/pD,eAAe,EAAGiyD,EAAY,IAOjC,EAAAC,aAAP,SAAoBnI,GAElB,OADaA,EAAQppD,aAIhB,EAAAwxD,gBAAP,SACIpI,EAA8B4F,EAAgCE,EAC9DoC,GAKF,OAJAH,EAAUE,eAAejI,GACzB+H,EAAUpC,QAAQ3F,EAAS4F,GAC3BmC,EAAUlC,aAAa7F,EAAS8F,GAChCiC,EAAU1B,QAAQrG,EAASkI,GACpBH,EAAUI,aAAanI,IAElC,EApHA,GAAa,EAAA+H,UAAS,EADkB,GAAAz2C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0H5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA6GX,OAvGE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAsoF,kBAAP,SAAyBl1D,EAA4BkD,GACnD,OAAQA,GAAO,IAAIqsD,GAAY/C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ9E,EAAAm1D,8BAAP,SAAqCn1D,EAA4BkD,GAE/D,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIqsD,GAAY/C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IASrF,YAAA8V,WAAA,SAAWy3C,GACT,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAM9E,YAAAxJ,UAAA,WACE,IAAIv0E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAkB5C,KAAKozB,GAAIyF,UAAU74B,KAAK25B,OAAS/2B,GAC1CyuC,EAAYC,aAAaC,IAAI6lC,cAAcoR,MAO7D,YAAAvmE,MAAA,SAAmCqU,GACjC,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAIyG,QAAQvD,EAAKt2B,KAAK25B,OAAS/2B,GAAU,MAMzD,EAAA6lF,cAAP,SAAqBxI,GACnBA,EAAQtpD,YAAY,IAOf,EAAAoqD,cAAP,SAAqBd,EAA8Be,GACjDf,EAAQ/pD,eAAe,EAAG8qD,EAAkB,IAOvC,EAAA8B,aAAP,SAAoB7C,EAA8B9I,GAChD8I,EAAQxqD,aAAa,EAAG0hD,EAAW9lC,EAAYC,aAAaC,IAAI6lC,cAAcoR,OAOzE,EAAA3H,SAAP,SAAgBZ,EAA8Ba,GAC5Cb,EAAQ/pD,eAAe,EAAG4qD,EAAa,IAOlC,EAAA4H,YAAP,SAAmBzI,GAEjB,OADaA,EAAQppD,aAIhB,EAAA8xD,eAAP,SACI1I,EAA8Be,EAC9B7J,EAAuD2J,GAKzD,OAJA6B,EAAS8F,cAAcxI,GACvB0C,EAAS5B,cAAcd,EAASe,GAChC2B,EAASG,aAAa7C,EAAS9I,GAC/BwL,EAAS9B,SAASZ,EAASa,GACpB6B,EAAS+F,YAAYzI,IAEhC,EAhHA,GAAa,EAAA0C,SAAQ,EADmB,GAAApxC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsH5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAyFX,OAnFE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAA4oF,uBAAP,SAA8Bx1D,EAA4BkD,GACxD,OAAQA,GAAO,IAAIuyD,GAAiBjJ,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQnF,EAAA01D,mCAAP,SAA0C11D,EAA4BkD,GAEpE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIuyD,GAAiBjJ,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAS1F,YAAAqT,OAAA,SAAOk6C,GACL,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAM9E,YAAA90E,QAAA,WACE,IAAIjJ,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI4F,UAAUh5B,KAAK25B,OAAS/2B,GAAU5C,KAAKozB,GAAIqF,WAAW,EAAG,IAM7E,EAAAswD,mBAAP,SAA0B9I,GACxBA,EAAQtpD,YAAY,IAOf,EAAAqvD,UAAP,SAAiB/F,EAA8BgG,GAC7ChG,EAAQ/pD,eAAe,EAAG+vD,EAAc,IAOnC,EAAA+C,WAAP,SAAkB/I,EAA8Bp0E,GAC9Co0E,EAAQlqD,cAAc,EAAGlqB,EAASo0E,EAAQxnD,WAAW,EAAG,KAOnD,EAAAwwD,iBAAP,SAAwBhJ,GAEtB,OADaA,EAAQppD,aAIhB,EAAAqyD,oBAAP,SACIjJ,EAA8BgG,EAAkCp6E,GAIlE,OAHAg9E,EAAcE,mBAAmB9I,GACjC4I,EAAc7C,UAAU/F,EAASgG,GACjC4C,EAAcG,WAAW/I,EAASp0E,GAC3Bg9E,EAAcI,iBAAiBhJ,IAE1C,EA5FA,GAAa,EAAA4I,cAAa,EADc,GAAAt3C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAkG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA6QX,OAvQE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAmpF,gBAAP,SAAuB/1D,EAA4BkD,GACjD,OAAQA,GAAO,IAAIiT,GAAUq2C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ5E,EAAAg2D,4BAAP,SAAmCh2D,EAA4BkD,GAE7D,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIiT,GAAUq2C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IASnF,YAAAnmB,KAAA,SAAK0zE,GACH,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAS9E,YAAA58C,UAAA,SAAU48C,GACR,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAO9E,YAAAj5C,KAAA,SAAKne,GACH,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI4F,UAAUh5B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAC7DvpB,KAAKozB,GAAIqF,WAAW,EAAG,IAMzC,YAAA4wD,WAAA,WACE,IAAIzmF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMhE,YAAAslC,SAAA,WACE,IAAItlC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAkB5C,KAAKozB,GAAI6E,UAAUj4B,KAAK25B,OAAS/2B,GAC1CyuC,EAAYC,aAAaC,IAAImuC,eAAesC,WAO9D,YAAA55C,QAAA,SAAQ7e,GACN,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAIyF,UAAU74B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAU2mB,GAAS,GAMxF,YAAA+/D,cAAA,WACE,IAAI1mF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMhE,YAAA2mF,aAAA,WACE,IAAI3mF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EACH,IAAI/a,WACAmY,KAAKozB,GAAIhH,QAAQrnC,OAAQib,KAAKozB,GAAIhH,QAAQynB,WAAa7zC,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GACvF5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,IACxC,MAUN,YAAAilC,WAAA,SAAWte,EAAeo3D,GACxB,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,EAAWo3D,GAAoB,MAM7G,YAAA6I,iBAAA,WACE,IAAI5mF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAA6mF,YAAP,SAAmBxJ,GACjBA,EAAQtpD,YAAY,IAOf,EAAAivD,QAAP,SAAe3F,EAA8B4F,GAC3C5F,EAAQ/pD,eAAe,EAAG2vD,EAAY,IAOjC,EAAAC,aAAP,SAAoB7F,EAA8B8F,GAChD9F,EAAQ/pD,eAAe,EAAG6vD,EAAiB,IAOtC,EAAA2D,QAAP,SAAezJ,EAA8B0J,GAC3C1J,EAAQ/pD,eAAe,EAAGyzD,EAAY,IAQjC,EAAAC,iBAAP,SAAwB3J,EAA8B1jF,GACpD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ3qD,SAAS/4B,EAAK5W,IAExB,OAAOs6F,EAAQ3nD,aAOV,EAAAuxD,gBAAP,SAAuB5J,EAA8BI,GACnDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAyJ,YAAP,SAAmB7J,EAA8B/3C,GAC/C+3C,EAAQnqD,cAAc,EAAGoS,EAAUmJ,EAAYC,aAAaC,IAAImuC,eAAesC,YAO1E,EAAA+H,WAAP,SAAkB9J,EAA8B+J,GAC9C/J,EAAQ/pD,eAAe,EAAG8zD,EAAe,IAQpC,EAAAC,oBAAP,SAA2BhK,EAA8B1jF,GACvD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9qD,QAAQ54B,EAAK5W,IAEvB,OAAOs6F,EAAQ3nD,aAOV,EAAA4xD,mBAAP,SAA0BjK,EAA8BI,GACtDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAA8J,cAAP,SAAqBlK,EAA8BmK,GACjDnK,EAAQ/pD,eAAe,EAAGk0D,EAAkB,IAQvC,EAAAC,uBAAP,SAA8BpK,EAA8B1jF,GAC1D0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAgyD,sBAAP,SAA6BrK,EAA8BI,GACzDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAkK,UAAP,SAAiBtK,GAEf,OADaA,EAAQppD,aAIhB,EAAA2zD,aAAP,SACIvK,EAA8B4F,EAAgCE,EAC9D4D,EAAgCzhD,EAChC8hD,EAAmCI,GAQrC,OAPA7gD,EAAOkgD,YAAYxJ,GACnB12C,EAAOq8C,QAAQ3F,EAAS4F,GACxBt8C,EAAOu8C,aAAa7F,EAAS8F,GAC7Bx8C,EAAOmgD,QAAQzJ,EAAS0J,GACxBpgD,EAAOugD,YAAY7J,EAAS/3C,GAC5BqB,EAAOwgD,WAAW9J,EAAS+J,GAC3BzgD,EAAO4gD,cAAclK,EAASmK,GACvB7gD,EAAOghD,UAAUtK,IAE5B,EAhRA,GAAa,EAAA12C,OAAM,EADqB,GAAAgI,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsR5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA6IX,OAvIE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAyqF,sBAAP,SAA6Br3D,EAA4BkD,GACvD,OAAQA,GAAO,IAAIo0D,GAAgB9K,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQlF,EAAAu3D,kCAAP,SAAyCv3D,EAA4BkD,GAEnE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIo0D,GAAgB9K,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAOzF,YAAAwP,OAAA,SAAOtM,GACL,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIhI,QACpCq2C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAOlB,YAAAw3D,QAAA,SAAQt0D,GACN,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIhI,QACpCq2C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAOlB,YAAAsU,KAAA,SAAKne,GACH,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI4F,UAAUh5B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAC7DvpB,KAAKozB,GAAIqF,WAAW,EAAG,IAMzC,YAAA4wD,WAAA,WACE,IAAIzmF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAAioF,kBAAP,SAAyB5K,GACvBA,EAAQtpD,YAAY,IAOf,EAAAm0D,UAAP,SAAiB7K,EAA8B8K,GAC7C9K,EAAQ/pD,eAAe,EAAG60D,EAAc,IAOnC,EAAAC,WAAP,SAAkB/K,EAA8BgL,GAC9ChL,EAAQ/pD,eAAe,EAAG+0D,EAAe,IAOpC,EAAAvB,QAAP,SAAezJ,EAA8B0J,GAC3C1J,EAAQ/pD,eAAe,EAAGyzD,EAAY,IAQjC,EAAAC,iBAAP,SAAwB3J,EAA8B1jF,GACpD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ3qD,SAAS/4B,EAAK5W,IAExB,OAAOs6F,EAAQ3nD,aAOV,EAAAuxD,gBAAP,SAAuB5J,EAA8BI,GACnDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAA6K,gBAAP,SAAuBjL,GAErB,OADaA,EAAQppD,aAIhB,EAAAs0D,mBAAP,SACIlL,EAA8B8K,EAAkCE,EAChEtB,GAKF,OAJAe,EAAaG,kBAAkB5K,GAC/ByK,EAAaI,UAAU7K,EAAS8K,GAChCL,EAAaM,WAAW/K,EAASgL,GACjCP,EAAahB,QAAQzJ,EAAS0J,GACvBe,EAAaQ,gBAAgBjL,IAExC,EAhJA,GAAa,EAAAyK,aAAY,EADe,GAAAn5C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsJ5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAidX,OA3cE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAorF,mBAAP,SAA0Bh4D,EAA4BkD,GACpD,OAAQA,GAAO,IAAIqb,GAAaiuC,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ/E,EAAAi4D,+BAAP,SAAsCj4D,EAA4BkD,GAEhE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIqb,GAAaiuC,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAStF,YAAAnmB,KAAA,SAAK0zE,GACH,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAS9E,YAAA58C,UAAA,SAAU48C,GACR,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAM9E,YAAA/+D,KAAA,WACE,IAAIhf,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAkB5C,KAAKozB,GAAI6E,UAAUj4B,KAAK25B,OAAS/2B,GAC1CyuC,EAAYC,aAAaC,IAAIvL,cAAcg8C,WAM7D,YAAA/7F,EAAA,WACE,IAAI2c,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8F,YAAYl5B,KAAK25B,OAAS/2B,GAAU,GAM/D,YAAAjd,EAAA,WACE,IAAIid,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI4F,UAAUh5B,KAAK25B,OAAS/2B,GAAU5C,KAAKozB,GAAIqF,WAAW,EAAG,IASpF,YAAA5yC,EAAA,SAAE86F,GACA,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAO9E,YAAA97F,EAAA,SAAEyxC,GACA,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIhI,QACpCq2C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAOlB,YAAA5sC,EAAA,SAAE8vC,GACA,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIqjC,OACpCgL,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAOlB,YAAAsQ,OAAA,SAAOna,GACL,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8F,YAAYl5B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAa,GAM9F,YAAA+hE,aAAA,WACE,IAAI1oF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMhE,YAAAoxC,YAAA,WACE,IAAIpxC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EACH,IAAI5V,aACAgT,KAAKozB,GAAIhH,QAAQrnC,OAAQib,KAAKozB,GAAIhH,QAAQynB,WAAa7zC,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GACvF5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,IACxC,MAON,YAAA+gC,KAAA,SAAKpa,GACH,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI4F,UAAUh5B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAC7DvpB,KAAKozB,GAAIqF,WAAW,EAAG,IAMzC,YAAAwb,WAAA,WACE,IAAIrxC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAUhE,YAAA0L,QAAA,SAAQib,EAAeo3D,GACrB,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,EAAWo3D,GAAoB,MAM7G,YAAAzsC,cAAA,WACE,IAAItxC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAQhE,YAAAghC,QAAA,SAAQra,EAAe+M,GACrB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIhI,QACpCq2C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAA+gB,cAAA,WACE,IAAIvxC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAQhE,YAAAihC,OAAA,SAAOta,EAAe+M,GACpB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIqjC,OACpCgL,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAAm4D,aAAA,WACE,IAAI3oF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAA4oF,eAAP,SAAsBvL,GACpBA,EAAQtpD,YAAY,KAOf,EAAAivD,QAAP,SAAe3F,EAA8B4F,GAC3C5F,EAAQ/pD,eAAe,EAAG2vD,EAAY,IAOjC,EAAAC,aAAP,SAAoB7F,EAA8B8F,GAChD9F,EAAQ/pD,eAAe,EAAG6vD,EAAiB,IAOtC,EAAAO,QAAP,SAAerG,EAA8Br+D,GAC3Cq+D,EAAQnqD,cAAc,EAAGlU,EAAMyvB,EAAYC,aAAaC,IAAIvL,cAAcg8C,YAOrE,EAAAyJ,KAAP,SAAYxL,EAA8Bh6F,GACxCg6F,EAAQjqD,gBAAgB,EAAG/vC,EAAG,IAOzB,EAAAylG,KAAP,SAAYzL,EAA8Bt6F,GACxCs6F,EAAQlqD,cAAc,EAAGpwC,EAAGs6F,EAAQxnD,WAAW,EAAG,KAO7C,EAAAkzD,KAAP,SAAY1L,EAA8B2L,GACxC3L,EAAQ/pD,eAAe,EAAG01D,EAAS,IAO9B,EAAAC,KAAP,SAAY5L,EAA8B6L,GACxC7L,EAAQ/pD,eAAe,EAAG41D,EAAS,IAO9B,EAAAC,KAAP,SAAY9L,EAA8B+L,GACxC/L,EAAQ/pD,eAAe,EAAG81D,EAAS,IAO9B,EAAAC,UAAP,SAAiBhM,EAA8BiM,GAC7CjM,EAAQ/pD,eAAe,EAAGg2D,EAAc,IAQnC,EAAAC,mBAAP,SAA0BlM,EAA8B1jF,GACtD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ1qD,WAAWh5B,EAAK5W,IAE1B,OAAOs6F,EAAQ3nD,aAOV,EAAA8zD,kBAAP,SAAyBnM,EAA8BI,GACrDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAgM,QAAP,SAAepM,EAA8BqM,GAC3CrM,EAAQ/pD,eAAe,EAAGo2D,EAAY,IAQjC,EAAAC,iBAAP,SAAwBtM,EAA8B1jF,GACpD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ3qD,SAAS/4B,EAAK5W,IAExB,OAAOs6F,EAAQ3nD,aAOV,EAAAk0D,gBAAP,SAAuBvM,EAA8BI,GACnDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAoM,WAAP,SAAkBxM,EAA8ByM,GAC9CzM,EAAQ/pD,eAAe,GAAIw2D,EAAe,IAQrC,EAAAC,oBAAP,SAA2B1M,EAA8B1jF,GACvD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAs0D,mBAAP,SAA0B3M,EAA8BI,GACtDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAwM,WAAP,SAAkB5M,EAA8B6M,GAC9C7M,EAAQ/pD,eAAe,GAAI42D,EAAe,IAQrC,EAAAC,oBAAP,SAA2B9M,EAA8B1jF,GACvD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA00D,mBAAP,SAA0B/M,EAA8BI,GACtDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAA4M,UAAP,SAAiBhN,EAA8BiN,GAC7CjN,EAAQ/pD,eAAe,GAAIg3D,EAAc,IAQpC,EAAAC,mBAAP,SAA0BlN,EAA8B1jF,GACtD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA80D,kBAAP,SAAyBnN,EAA8BI,GACrDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAgN,aAAP,SAAoBpN,GAElB,OADaA,EAAQppD,aAIhB,EAAAy2D,gBAAP,SACIrN,EAA8B4F,EAAgCE,EAC9DnkE,EAAkD37B,EAAWN,EAAqBimG,EAClFE,EAA6BE,EAA6BE,EAC1DI,EAAgCI,EAAmCI,EACnEI,GAeF,OAdAv7C,EAAU65C,eAAevL,GACzBtuC,EAAUi0C,QAAQ3F,EAAS4F,GAC3Bl0C,EAAUm0C,aAAa7F,EAAS8F,GAChCp0C,EAAU20C,QAAQrG,EAASr+D,GAC3B+vB,EAAU85C,KAAKxL,EAASh6F,GACxB0rD,EAAU+5C,KAAKzL,EAASt6F,GACxBgsD,EAAUg6C,KAAK1L,EAAS2L,GACxBj6C,EAAUk6C,KAAK5L,EAAS6L,GACxBn6C,EAAUo6C,KAAK9L,EAAS+L,GACxBr6C,EAAUs6C,UAAUhM,EAASiM,GAC7Bv6C,EAAU06C,QAAQpM,EAASqM,GAC3B36C,EAAU86C,WAAWxM,EAASyM,GAC9B/6C,EAAUk7C,WAAW5M,EAAS6M,GAC9Bn7C,EAAUs7C,UAAUhN,EAASiN,GACtBv7C,EAAU07C,aAAapN,IAElC,EApdA,GAAa,EAAAtuC,UAAS,EADkB,GAAAJ,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0d5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAwaX,OAlaE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAutF,eAAP,SAAsBn6D,EAA4BkD,GAChD,OAAQA,GAAO,IAAIs+C,GAASgL,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ3E,EAAAo6D,2BAAP,SAAkCp6D,EAA4BkD,GAE5D,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIs+C,GAASgL,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQlF,YAAA+0C,aAAA,SAAa5+C,EAAe+M,GAC1B,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIhI,QACpCq2C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAAokD,mBAAA,WACE,IAAI50E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAQhE,YAAAs0E,SAAA,SAAS3tD,EAAe+M,GACtB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIy2C,WACpCpI,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAA6jD,eAAA,WACE,IAAIr0E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAQhE,YAAAs7C,MAAA,SAAM30B,EAAe+M,GACnB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAI6jC,MACpCwK,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAAwkD,YAAA,WACE,IAAIh1E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMhE,YAAA6qF,aAAA,WACE,IAAI7qF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI2F,WAAW/4B,KAAK25B,OAAS/2B,GAAU,GAQ9D,YAAA8qF,UAAA,SAAUnkE,EAAe+M,GACvB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAI0yC,UACpCrE,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAAu6D,gBAAA,WACE,IAAI/qF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAUhE,YAAA+gD,OAAA,SAAOp6B,EAAeo3D,GACpB,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,EAAWo3D,GAAoB,MAM7G,YAAA5J,aAAA,WACE,IAAIn0E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAUhE,YAAAipD,QAAA,SAAQtiC,EAAeo3D,GACrB,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,EAAWo3D,GAAoB,MAM7G,YAAAjJ,cAAA,WACE,IAAI90E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAQhE,YAAAgrF,mBAAA,SAAmBrkE,EAAe+M,GAEhC,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIm5C,cACpC9K,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAAy6D,yBAAA,WACE,IAAIjrF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAAkrF,WAAP,SAAkB7N,GAChBA,EAAQtpD,YAAY,IAOf,EAAAo3D,gBAAP,SAAuB9N,EAA8B+N,GACnD/N,EAAQ/pD,eAAe,EAAG83D,EAAoB,IAQzC,EAAAC,yBAAP,SAAgChO,EAA8B1jF,GAC5D0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA41D,wBAAP,SAA+BjO,EAA8BI,GAC3DJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAA8N,YAAP,SAAmBlO,EAA8BmO,GAC/CnO,EAAQ/pD,eAAe,EAAGk4D,EAAgB,IAQrC,EAAAC,qBAAP,SAA4BpO,EAA8B1jF,GACxD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAg2D,oBAAP,SAA2BrO,EAA8BI,GACvDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAkO,SAAP,SAAgBtO,EAA8BuO,GAC5CvO,EAAQ/pD,eAAe,EAAGs4D,EAAa,IAQlC,EAAAC,kBAAP,SAAyBxO,EAA8B1jF,GACrD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAo2D,iBAAP,SAAwBzO,EAA8BI,GACpDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAsO,gBAAP,SAAuB1O,EAA8BwN,GACnDxN,EAAQnqD,cAAc,EAAG23D,EAAc,IAOlC,EAAAmB,aAAP,SAAoB3O,EAA8B4O,GAChD5O,EAAQ/pD,eAAe,EAAG24D,EAAiB,IAQtC,EAAAC,sBAAP,SAA6B7O,EAA8B1jF,GACzD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAy2D,qBAAP,SAA4B9O,EAA8BI,GACxDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAoG,UAAP,SAAiBxG,EAA8ByG,GAC7CzG,EAAQ/pD,eAAe,EAAGwwD,EAAc,IAQnC,EAAAC,mBAAP,SAA0B1G,EAA8B1jF,GACtD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAsuD,kBAAP,SAAyB3G,EAA8BI,GACrDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAwG,WAAP,SAAkB5G,EAA8B6G,GAC9C7G,EAAQ/pD,eAAe,EAAG4wD,EAAe,IAQpC,EAAAC,oBAAP,SAA2B9G,EAA8B1jF,GACvD0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA0uD,mBAAP,SAA0B/G,EAA8BI,GACtDJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAA2O,sBAAP,SAA6B/O,EAA8BgP,GACzDhP,EAAQ/pD,eAAe,EAAG+4D,EAA0B,IAQ/C,EAAAC,+BAAP,SAAsCjP,EAA8B1jF,GAElE0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA62D,8BAAP,SAAqClP,EAA8BI,GACjEJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAA+O,SAAP,SAAgBnP,GAEd,OADaA,EAAQppD,aAIhB,EAAAw4D,YAAP,SACIpP,EAA8B+N,EAAwCI,EACtEI,EAAiCf,EAAsBoB,EACvDnI,EAAkCI,EAClCmI,GAUF,OATAra,EAAMkZ,WAAW7N,GACjBrL,EAAMmZ,gBAAgB9N,EAAS+N,GAC/BpZ,EAAMuZ,YAAYlO,EAASmO,GAC3BxZ,EAAM2Z,SAAStO,EAASuO,GACxB5Z,EAAM+Z,gBAAgB1O,EAASwN,GAC/B7Y,EAAMga,aAAa3O,EAAS4O,GAC5Bja,EAAM6R,UAAUxG,EAASyG,GACzB9R,EAAMiS,WAAW5G,EAAS6G,GAC1BlS,EAAMoa,sBAAsB/O,EAASgP,GAC9Bra,EAAMwa,SAASnP,IAE1B,EA3aA,GAAa,EAAArL,MAAK,EADsB,GAAArjC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAib5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAoQX,OA9PE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAAsvF,eAAP,SAAsBl8D,EAA4BkD,GAChD,OAAQA,GAAO,IAAI0mD,GAAS4C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ3E,EAAAm8D,2BAAP,SAAkCn8D,EAA4BkD,GAE5D,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAI0mD,GAAS4C,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAMlF,YAAAyT,UAAA,WACE,IAAIjkC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI4F,UAAUh5B,KAAK25B,OAAS/2B,GAAU5C,KAAKozB,GAAIqF,WAAW,EAAG,IAQpF,YAAAkO,YAAA,SAAYpd,EAAe+M,GAEzB,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIs3C,eACpCjJ,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAA0pD,kBAAA,WACE,IAAIl6E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAShE,YAAAkkC,aAAA,SAAa65C,GACX,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAS9E,YAAA55C,gBAAA,SAAgB45C,GACd,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAS9E,YAAAl6C,OAAA,SAAOk6C,GACL,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAM9E,YAAA35C,aAAA,WACE,IAAIpkC,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI4F,UAAUh5B,KAAK25B,OAAS/2B,GAAU5C,KAAKozB,GAAIqF,WAAW,EAAG,IASpF,YAAAsL,UAAA,SAAU48C,GACR,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAO9E,YAAA15C,MAAA,SAAM3Q,GACJ,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIqjC,OACpCgL,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MASlB,YAAAo8D,eAAA,SAAe7O,GACb,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,IAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAMvE,EAAA8O,WAAP,SAAkBxP,GAChBA,EAAQtpD,YAAY,IAOf,EAAA+4D,aAAP,SAAoBzP,EAA8Bp5C,GAChDo5C,EAAQlqD,cAAc,EAAG8Q,EAAWo5C,EAAQxnD,WAAW,EAAG,KAOrD,EAAAk3D,eAAP,SAAsB1P,EAA8B2P,GAClD3P,EAAQ/pD,eAAe,EAAG05D,EAAmB,IAQxC,EAAAC,wBAAP,SAA+B5P,EAA8B1jF,GAC3D0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAAw3D,uBAAP,SAA8B7P,EAA8BI,GAC1DJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAA0P,gBAAP,SAAuB9P,EAA8B+P,GACnD/P,EAAQ/pD,eAAe,EAAG85D,EAAoB,IAOzC,EAAAC,mBAAP,SAA0BhQ,EAA8BiQ,GACtDjQ,EAAQ/pD,eAAe,EAAGg6D,EAAuB,IAO5C,EAAAlK,UAAP,SAAiB/F,EAA8BgG,GAC7ChG,EAAQ/pD,eAAe,EAAG+vD,EAAc,IAOnC,EAAAkK,gBAAP,SAAuBlQ,EAA8Bj5C,GACnDi5C,EAAQlqD,cAAc,EAAGiR,EAAci5C,EAAQxnD,WAAW,EAAG,KAOxD,EAAAqtD,aAAP,SAAoB7F,EAA8B8F,GAChD9F,EAAQ/pD,eAAe,EAAG6vD,EAAiB,IAOtC,EAAAqK,SAAP,SAAgBnQ,EAA8BoQ,GAC5CpQ,EAAQ/pD,eAAe,EAAGm6D,EAAa,IAOlC,EAAAC,kBAAP,SAAyBrQ,EAA8BsQ,GACrDtQ,EAAQ/pD,eAAe,EAAGq6D,EAAsB,IAO3C,EAAAC,SAAP,SAAgBvQ,GAEd,OADaA,EAAQppD,aAIhB,EAAA45D,YAAP,SACIxQ,EAA8Bp5C,EAA6B+oD,EAC3DI,EAAwCE,EACxCjK,EAAkCj/C,EAAgC++C,EAClEsK,EAAiCE,GAWnC,OAVAvT,EAAMyS,WAAWxP,GACjBjD,EAAM0S,aAAazP,EAASp5C,GAC5Bm2C,EAAM2S,eAAe1P,EAAS2P,GAC9B5S,EAAM+S,gBAAgB9P,EAAS+P,GAC/BhT,EAAMiT,mBAAmBhQ,EAASiQ,GAClClT,EAAMgJ,UAAU/F,EAASgG,GACzBjJ,EAAMmT,gBAAgBlQ,EAASj5C,GAC/Bg2C,EAAM8I,aAAa7F,EAAS8F,GAC5B/I,EAAMoT,SAASnQ,EAASoQ,GACxBrT,EAAMsT,kBAAkBrQ,EAASsQ,GAC1BvT,EAAMwT,SAASvQ,IAE1B,EAvQA,GAAa,EAAAjD,MAAK,EADsB,GAAAzrC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA6Q5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAiKX,OA3JE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAA0wF,2BAAP,SAAkCt9D,EAA4BkD,GAC5D,OAAQA,GAAO,IAAIq6D,GAAqB/Q,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQvF,EAAAw9D,uCAAP,SAA8Cx9D,EAA4BkD,GAGxE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIq6D,GAAqB/Q,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAO9F,YAAAy9D,YAAA,SAAYtnE,GACV,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI2F,WAAW/4B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAa,GAM7F,YAAAunE,kBAAA,WACE,IAAIluF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMhE,YAAAmuF,iBAAA,WACE,IAAInuF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EACH,IAAI9V,YACAkT,KAAKozB,GAAIhH,QAAQrnC,OAAQib,KAAKozB,GAAIhH,QAAQynB,WAAa7zC,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GACvF5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,IACxC,MAON,YAAAouF,gBAAA,SAAgBznE,GACd,IAAI3mB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI6F,WAAWj5B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAC9DvpB,KAAKozB,GAAIqF,WAAW,EAAG,IAMzC,YAAAw4D,sBAAA,WACE,IAAIruF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAAsuF,uBAAP,SAA8BjR,GAC5BA,EAAQtpD,YAAY,IAOf,EAAAw6D,eAAP,SAAsBlR,EAA8BmR,GAClDnR,EAAQ/pD,eAAe,EAAGk7D,EAAmB,IAQxC,EAAAC,wBAAP,SAA+BpR,EAA8B1jF,GAC3D0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ5qD,SAAS94B,EAAK5W,IAExB,OAAOs6F,EAAQ3nD,aAOV,EAAAg5D,uBAAP,SAA8BrR,EAA8BI,GAC1DJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAkR,mBAAP,SAA0BtR,EAA8BuR,GACtDvR,EAAQ/pD,eAAe,EAAGs7D,EAAuB,IAQ5C,EAAAC,4BAAP,SAAmCxR,EAA8B1jF,GAC/D0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ3qD,SAAS/4B,EAAK5W,IAExB,OAAOs6F,EAAQ3nD,aAOV,EAAAo5D,2BAAP,SAAkCzR,EAA8BI,GAC9DJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAsR,qBAAP,SAA4B1R,GAE1B,OADaA,EAAQppD,aAIhB,EAAA+6D,wBAAP,SACI3R,EAA8BmR,EAC9BI,GAIF,OAHAb,EAAkBO,uBAAuBjR,GACzC0Q,EAAkBQ,eAAelR,EAASmR,GAC1CT,EAAkBY,mBAAmBtR,EAASuR,GACvCb,EAAkBgB,qBAAqB1R,IAElD,EApKA,GAAa,EAAA0Q,kBAAiB,EADU,GAAAp/C,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KA0K5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA+FX,OAzFE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAA6xF,8BAAP,SAAqCz+D,EAA4BkD,GAC/D,OAAQA,GAAO,IAAIw7D,GAAwBlS,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQ1F,EAAA2+D,0CAAP,SAAiD3+D,EAA4BkD,GAG3E,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIw7D,GAAwBlS,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IASjG,YAAA4+D,QAAA,SAAQrR,GACN,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAO9E,YAAAsR,aAAA,SAAa37D,GACX,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAI2gD,cACpCtS,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAMX,EAAA++D,0BAAP,SAAiClS,GAC/BA,EAAQtpD,YAAY,IAOf,EAAAy7D,WAAP,SAAkBnS,EAA8BoS,GAC9CpS,EAAQ/pD,eAAe,EAAGm8D,EAAe,IAOpC,EAAAC,gBAAP,SAAuBrS,EAA8BsS,GACnDtS,EAAQ/pD,eAAe,EAAGq8D,EAAoB,IAOzC,EAAAC,wBAAP,SAA+BvS,GAC7B,IAAIr9E,EAASq9E,EAAQppD,YAErB,OADAopD,EAAQroD,cAAch1B,EAAQ,GACvBA,GAGF,EAAA6vF,2BAAP,SACIxS,EAA8BoS,EAC9BE,GAIF,OAHAT,EAAqBK,0BAA0BlS,GAC/C6R,EAAqBM,WAAWnS,EAASoS,GACzCP,EAAqBQ,gBAAgBrS,EAASsS,GACvCT,EAAqBU,wBAAwBvS,IAExD,EAlGA,GAAa,EAAA6R,qBAAoB,EADO,GAAAvgD,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAwG5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EA6HX,OAvHE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAA0yF,sBAAP,SAA6Bt/D,EAA4BkD,GACvD,OAAQA,GAAO,IAAI47D,GAAgBtS,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQlF,EAAAu/D,kCAAP,SAAyCv/D,EAA4BkD,GAEnE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAI47D,GAAgBtS,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAOzF,YAAAw/D,QAAA,SAAQt8D,GACN,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIo/C,mBACpC/Q,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAQlB,YAAAy/D,sBAAA,SAAsBtpE,EAAe+M,GAEnC,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIugD,sBACpClS,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAKozB,GAAI6G,SAASj6B,KAAK25B,OAAS/2B,GAAkB,EAAR2mB,GAAYvpB,KAAKozB,IAC3F,MAMlB,YAAA0/D,4BAAA,WACE,IAAIlwF,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI8G,aAAal6B,KAAK25B,OAAS/2B,GAAU,GAMzD,EAAAmwF,kBAAP,SAAyB9S,GACvBA,EAAQtpD,YAAY,IAOf,EAAAq8D,WAAP,SAAkB/S,EAA8BgT,GAC9ChT,EAAQ/pD,eAAe,EAAG+8D,EAAe,IAOpC,EAAAC,yBAAP,SAAgCjT,EAA8BkT,GAC5DlT,EAAQ/pD,eAAe,EAAGi9D,EAA6B,IAQlD,EAAAC,kCAAP,SAAyCnT,EAA8B1jF,GAErE0jF,EAAQ/nD,YAAY,EAAG37B,EAAKvU,OAAQ,GACpC,IAAK,IAAIrC,EAAI4W,EAAKvU,OAAS,EAAGrC,GAAK,EAAGA,IACpCs6F,EAAQ9pD,UAAU55B,EAAK5W,IAEzB,OAAOs6F,EAAQ3nD,aAOV,EAAA+6D,iCAAP,SAAwCpT,EAA8BI,GACpEJ,EAAQ/nD,YAAY,EAAGmoD,EAAU,IAO5B,EAAAiT,gBAAP,SAAuBrT,GAErB,OADaA,EAAQppD,aAIhB,EAAA08D,mBAAP,SACItT,EAA8BgT,EAC9BE,GAIF,OAHAjB,EAAaa,kBAAkB9S,GAC/BiS,EAAac,WAAW/S,EAASgT,GACjCf,EAAagB,yBAAyBjT,EAASkT,GACxCjB,EAAaoB,gBAAgBrT,IAExC,EAhIA,GAAa,EAAAiS,aAAY,EADe,GAAA3gD,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,KAsI5B,SAAiBA,IAAY,SAAAC,IAAa,SAAAC,GACxC,8BACE,KAAAne,GAAkC,KAElC,KAAAuG,OAAS,EAyIX,OAnIE,YAAAimD,OAAA,SAAOj6F,EAAWytC,GAGhB,OAFApzB,KAAK25B,OAASh0C,EACdqa,KAAKozB,GAAKA,EACHpzB,MAQF,EAAA48E,0BAAP,SAAiCxpD,EAA4BkD,GAC3D,OAAQA,GAAO,IAAIqmD,GAAoBiD,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAQtF,EAAAogE,sCAAP,SAA6CpgE,EAA4BkD,GAEvE,OADAlD,EAAGsD,YAAYtD,EAAGiB,WAAa,EAAAxC,YAAYM,qBACnCmE,GAAO,IAAIqmD,GAAoBiD,OAAOxsD,EAAG6E,UAAU7E,EAAGiB,YAAcjB,EAAGiB,WAAYjB,IAOtF,EAAAqgE,oBAAP,SAA2BrgE,GACzB,OAAOA,EAAG+G,iBAAiB,SAS7B,YAAAu5D,WAAA,SAAW/S,GACT,IAAI/9E,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,EAAS5C,KAAKozB,GAAI0G,SAAS95B,KAAK25B,OAAS/2B,EAAQ+9E,GAAoB,MAO9E,YAAA9D,MAAA,SAAMvmD,GACJ,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAIyrC,OACpC4C,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAOlB,YAAA6+D,aAAA,SAAa37D,GACX,IAAI1zB,EAAS5C,KAAKozB,GAAIsG,SAAS15B,KAAK25B,OAAQ,GAC5C,OAAO/2B,GAAU0zB,GAAO,IAAI+a,EAAYC,aAAaC,IAAI2gD,cACpCtS,OAAO5/E,KAAKozB,GAAI4G,WAAWh6B,KAAK25B,OAAS/2B,GAAS5C,KAAKozB,IAC5D,MAMX,EAAAugE,sBAAP,SAA6B1T,GAC3BA,EAAQtpD,YAAY,IAOf,EAAAi9D,cAAP,SAAqB3T,EAA8B4T,GACjD5T,EAAQ/pD,eAAe,EAAG29D,EAAkB,IAOvC,EAAAC,SAAP,SAAgB7T,EAA8B8T,GAC5C9T,EAAQ/pD,eAAe,EAAG69D,EAAa,IAOlC,EAAAzB,gBAAP,SAAuBrS,EAA8BsS,GACnDtS,EAAQ/pD,eAAe,EAAGq8D,EAAoB,IAOzC,EAAAyB,oBAAP,SAA2B/T,GAEzB,OADaA,EAAQppD,aAQhB,EAAAo9D,6BAAP,SAAoChU,EAA8Br9E,GAChEq9E,EAAQ5oD,OAAOz0B,EAAQ,SAOlB,EAAAsxF,yCAAP,SAAgDjU,EAA8Br9E,GAC5Eq9E,EAAQ5oD,OAAOz0B,EAAQ,QAAQ,IAG1B,EAAAuxF,uBAAP,SACIlU,EAA8B4T,EAAsCE,EACpExB,GAKF,OAJA5V,EAAiBgX,sBAAsB1T,GACvCtD,EAAiBiX,cAAc3T,EAAS4T,GACxClX,EAAiBmX,SAAS7T,EAAS8T,GACnCpX,EAAiB2V,gBAAgBrS,EAASsS,GACnC5V,EAAiBqX,oBAAoB/T,IAEhD,EA5IA,GAAa,EAAAtD,iBAAgB,EADW,GAAAprC,MAAA,EAAAA,IAAG,KAAhB,GAAAD,eAAA,EAAAA,aAAY,KAAzC,CAAiB,EAAAD,cAAA,EAAAA,YAAW,M,g/CCxoH5B,cAEA,UAEA,aACE,WAAoBpB,GAAA,KAAAA,UAClBjwC,KAAKo0F,WAAap0F,KAAKiwC,QAAQmkD,WAC/Bp0F,KAAKq0F,YAAcr0F,KAAKiwC,QAAQokD,YAiCpC,OA9BQ,YAAA3/C,QAAN,W,oFAGM,YAAA35B,IAAN,SACIu5E,EAAiCC,EACjCC,G,wGAEF,IAAW,KADLC,EAAW,IAAIhjD,IACF6iD,EACbnjE,OAAOjrC,eAAesrC,KAAK8iE,EAAO,KAC9BI,EAAOJ,EAAM,GACnBG,EAASxoG,IACL,EACA,IAAI,SACAyoG,EAAKhtD,KAAMgtD,EAAK9yE,UAA+B1G,OAAWA,EAC1Dw5E,EAAKn4F,QAGC,SAAMyD,KAAKiwC,QAAQl1B,IAAI05E,I,OAKzC,OALME,EAAY,SACZ5zE,EAAoC,GAC1C4zE,EAAUjoF,SAAQ,SAAC23C,EAAQp3C,GACzB8T,EAAO9T,GAAQ,IAAI,EAAAs8B,OAAO8a,EAAOziC,KAAMyiC,EAAO9nD,KAAM8nD,EAAO3c,SAEtD,CAAP,EAAO3mB,WAET,YAAA6zE,eAAA,WACE50F,KAAKiwC,QAAQ2kD,kBAEf,YAAAC,aAAA,WACE70F,KAAKiwC,QAAQ4kD,gBAEjB,EApCA,GAAa,EAAAzkD,wB,m+CCJb,cACA,UAEA,UACA,UAEA,UACA,UAiBA,aACE,WAAYk6B,QAAA,IAAAA,MAAA,IACVtqE,KAAK80F,cAAe,EACpB90F,KAAKs0C,YAAcg2B,EAAOh2B,YAC1Bt0C,KAAKglE,SAAW,EAAAmX,SAASvpD,OAAO03C,EAAOtF,UACvChlE,KAAK01C,QAAU,CAACsvB,SAAUhlE,KAAKglE,SAAU+vB,gBAAiB,GAAIC,eAAgB,IAiOlF,OA9NE,sBAAI,yBAAU,C,IAAd,WACE,OAAOh1F,KAAKi1F,OAAOhuD,MAAM2uC,iB,gCAE3B,sBAAI,0BAAW,C,IAAf,WACE,OAAO51E,KAAKi1F,OAAOhuD,MAAM8uC,kB,gCAG3B,YAAA6e,eAAA,WACE50F,KAAKglE,SAASj/C,SAGhB,YAAA8uE,aAAA,WACE70F,KAAKglE,SAASyW,QAMV,YAAAtrC,UAAN,SAAgBh+C,EAAoC0hD,EAAqB7rD,G,qGACvE,SAAMgY,KAAKglE,SAASK,MAAM,UAAW,qBAAqB,gD,8DAExC,SAAM,EAAAxwB,eAAe70C,KAAKs0C,c,cAApCE,EAAU,SAChBx0C,KAAKuzE,eAAiB/+B,EAAQzE,qBAAqB/vC,KAAK01C,SAExD11C,KAAKi1F,OAAS,IAAI,EAAAjY,MACC,iBAAR7qF,EAAP,OACIiqF,EAAcjqF,EAAI+sF,SAAS,QACZ,oBAAVvuF,MAAP,MAEU,GAAM,EAAAkgD,UAAU,EAAAC,SAAV,CAAoB3+C,K,cAAhCysB,EAAM,SACZ5e,KAAKy0C,WAAWrK,OAAOmC,KAAK3tB,GAAMw9D,G,aAGjB,SAAMzrF,MAAMwB,I,OACjB,SADK,SACUpB,e,OAArB6tB,EAAM,SACZ5e,KAAKy0C,WAAW,IAAI5sD,WAAW+2B,GAAMw9D,G,oCAE7Bl9B,YAAYg2C,OAAO/iG,GAM7B6N,KAAKy0C,WAAWtiD,IAJVmhD,EAAM,IAAIzrD,WAAWsK,EAAK0hD,GAAc,EAAG7rD,GAAUmK,EAAItE,YAC/DmS,KAAKy0C,WAAWnB,I,oDArBpB,S,YA6BM,YAAAmB,WAAR,SAAmB0gD,EAA4B/Y,GAA/C,WACE,GAAIp8E,KAAK80F,aACP,MAAM,IAAIlnG,MAAM,uBAGlBoS,KAAKglE,SAASK,MAAM,UAAW,sBAAsB,WAEnD,IAAMkQ,EACF,EAAKhC,eAAekC,eAAiB,EAAKlC,oBAAsCr4D,EACpF,EAAK+5E,OAAOlqG,KAAKoqG,EAAgB5f,EAAkB6G,GAG/C,EAAK7I,eAAerL,oBACtB,EAAKqL,eAAerL,mBAAmB,EAAK+sB,OAAOhuD,OAGrD,EAAKmuD,cAAc,EAAKH,OAAOhuD,OAG/B,EAAKouD,eAAiB,IAAI,EAAA1gB,cAAc,EAAKsgB,OAAOhuD,MAAO,EAAK+rC,KAAM,EAAKhO,aAG7EhlE,KAAK80F,cAAe,GAGhB,YAAA/5E,IAAN,SAAU4oC,G,8EACR,IAAK3jD,KAAK80F,aACR,MAAM,IAAIlnG,MAAM,+BAGlB,MAAO,CAAP,EAAOoS,KAAKglE,SAASK,MAAM,UAAW,eAAe,gD,0DAG7B,OAFhB2O,EAAeh0E,KAAKs1F,2BAA2B3xC,GAE/B,GAAM3jD,KAAKq1F,eAAe/hB,QAAQtzE,KAAKuzE,eAAgBS,I,OAE7E,OAFMuhB,EAAgB,SAEf,CAAP,EAAOv1F,KAAKw1F,aAAaD,sBAIrB,YAAAD,2BAAR,SAAmC3xC,GACjC,IAAM8xC,EAAkBz1F,KAAKi1F,OAAOhuD,MAAM2uC,gBAI1C,GAAI5hE,MAAMmxB,QAAQwe,IAChB,GAAIA,EAAO37D,SAAWytG,EAAgBztG,OACpC,MAAM,IAAI4F,MAAM,0CAA0C6nG,EAAgBztG,OAAM,YAAY27D,EAAO37D,YAKlG,CACH,GAAI27D,EAAOx2C,OAASsoF,EAAgBztG,OAClC,MAAM,IAAI4F,MAAM,sCAAsC6nG,EAAgBztG,OAAM,YAAY27D,EAAOx2C,MAKjG,IAFA,IAAMuoF,EAAe,IAAI1hF,MAAc2vC,EAAOx2C,MAC1CwoF,EAAoB,EACfhwG,EAAI,EAAGA,EAAI8vG,EAAgBztG,SAAUrC,EAAG,CAC/C,IAAM0+D,EAASV,EAAOvxD,IAAIqjG,EAAgB9vG,IAC1C,IAAK0+D,EACH,MAAM,IAAIz2D,MAAM,8BAA8Bqf,KAAI,KAEpDyoF,EAAaC,KAAuBtxC,EAGtCV,EAAS+xC,EAKX,GAAK11F,KAAK01C,QAAQq/C,iBAA2D,IAAxC/0F,KAAK01C,QAAQq/C,gBAAgB/sG,QAAiBgY,KAAK01C,QAAQs/C,gBACrD,IAAvCh1F,KAAK01C,QAAQs/C,eAAehtG,OAqB9BgY,KAAK41F,wBAAwB51F,KAAK01C,QAAQs/C,eAAgBrxC,GAAQ,OArBtB,CAC5C,IAAMkyC,EAAoB71F,KAAKi1F,OAAOhuD,MAAMosC,kBACtCyiB,EAAc91F,KAAKi1F,OAAOhuD,MAAMmhC,YAEhC4sB,EAAiB,IAAIhhF,MAAyB6hF,EAAkB7tG,QAEtE,IAASrC,EAAI,EAAGA,EAAIkwG,EAAkB7tG,SAAUrC,EAAG,CACjD,IAAMowG,EAAaD,EAAYD,EAAkBlwG,IACjDqvG,EAAervG,GAAKowG,EAAWn0E,KAAM6nB,MAAM/B,KAI3C1nC,KAAK01C,QAAQq/C,gBAAiB7lG,KAAK6mG,EAAWn0E,KAAM0nB,YACpDtpC,KAAK01C,QAAQs/C,eAAgB9lG,KAAKy0D,EAAOh+D,GAAG+hD,MAG9C1nC,KAAK41F,wBAAwBZ,EAAgBrxC,GAAQ,GAWvD,OAFA3jD,KAAKg2F,yBAAyBh2F,KAAK01C,QAAQq/C,gBAAkBpxC,GAEtDA,GAGD,YAAAqyC,yBAAR,SAAiCjB,EAAoCkB,GACnE,IAAK,IAAItwG,EAAI,EAAGA,EAAIswG,EAAYjuG,OAAQrC,IAAK,CAC3C,IAAMuwG,EAAenB,EAAgBpvG,GAC/BwwG,EAAaF,EAAYtwG,GAAGi8B,KAClC,GAAIs0E,IAAiBC,EACnB,MAAM,IAAIvoG,MAAM,gBAAgBjI,EAAC,kCAAkCuwG,EAAY,aAAaC,KAK1F,YAAAP,wBAAR,SACIZ,EAA0CiB,EAAuBG,GACnE,IAAK,IAAIzwG,EAAI,EAAGA,EAAIswG,EAAYjuG,OAAQrC,IAAK,CAC3C,IAAM0wG,EAAerB,EAAervG,GAC9B2wG,EAAaL,EAAYtwG,GAAG+hD,KAClC,IAAK1nC,KAAKu2F,kBAAkBF,EAAcC,EAAYF,GACpD,MAAM,IAAIxoG,MAAM,gBAAgBjI,EAAC,oCAAoC0wG,EAAa7oE,KAAK,KAAI,eACvF8oE,EAAW9oE,KAAK,KAAI,OAKtB,YAAA+oE,kBAAR,SAA0BF,EAAiCC,EAA+BF,GAExF,GAAIC,EAAaruG,SAAWsuG,EAAWtuG,OACrC,OAAO,EAGT,IAAK,IAAIrC,EAAI,EAAGA,EAAI0wG,EAAaruG,SAAUrC,EACzC,GAAI0wG,EAAa1wG,KAAO2wG,EAAW3wG,MAAQywG,GAAwC,IAApBC,EAAa1wG,IAE1E,OAAO,EAIX,OAAO,GAGD,YAAA6vG,aAAR,SAAqBD,GACnB,IAAMiB,EAAmBx2F,KAAKi1F,OAAOhuD,MAAM8uC,iBAC3C,GAAIwf,EAAcvtG,SAAWwuG,EAAiBxuG,OAC5C,MAAM,IAAI4F,MAAM,uEAIlB,IADA,IAAMmzB,EAAS,IAAI0wB,IACV9rD,EAAI,EAAGA,EAAI6wG,EAAiBxuG,SAAUrC,EAC7Co7B,EAAO90B,IAAIuqG,EAAiB7wG,GAAI4vG,EAAc5vG,IAGhD,OAAOo7B,GAGD,YAAAq0E,cAAR,SAAsBnuD,GACpB,IAAMiX,EAAQjX,EAAM8rC,WACpB/yE,KAAKgzE,KAAO,IAAIh/D,MAAMkqC,EAAMl2D,QAE5B,IAAK,IAAIrC,EAAI,EAAGA,EAAIu4D,EAAMl2D,OAAQrC,IAChCqa,KAAKgzE,KAAKrtF,GAAKqa,KAAKuzE,eAAetiF,QAAQitD,EAAMv4D,GAAIqa,KAAKi1F,OAAO3sB,OAAQrhC,IAe/E,EAtOA,GAAa,EAAAiJ,W,kjDCxBb,cACA,aACA,UAIOkB,EAFP,QAEgBC,YAAYC,aAAaC,IAEzC,UAiCA,aAkHE,WAIoB7J,EAIA9lB,EAA+B60E,EACvCC,EAA+C76D,EAIvCipB,QAAA,IAAAA,MAAe,EAAAxqB,KAAK1H,UATpB,KAAA8U,OAIA,KAAA9lB,OAA+B,KAAA60E,eACvC,KAAAC,oBAA+C,KAAA76D,QAIvC,KAAAipB,SAClB9kD,KAAKmN,KAAO,EAAAotC,UAAUo8C,wBAAwBjvD,GAC9C,IAAMv6B,EAAOnN,KAAKmN,KACZypF,OAA0B17E,IAAjBu7E,QAAoDv7E,IAAtBw7E,QAA6Cx7E,IAAV2gB,EAEhF,QAAc3gB,IAAV2gB,GACEA,EAAM7zC,SAAWmlB,EACnB,MAAM,IAAI0vB,WAAW,yCAIzB,GAAa,WAATjb,EAAmB,CACrB,UAAc1G,IAAV2gB,GAAyB7nB,MAAMmxB,QAAQtJ,IAAWA,EAAM8kC,OAAM,SAAAh7E,GAAK,MAAa,iBAANA,MAC5E,MAAM,IAAI60C,UAAU,kCAGlBo8D,IACF/6D,EAAQ,IAAI7nB,MAAc7G,QAEvB,CACL,QAAc+N,IAAV2gB,EAAqB,CACvB,IAAMoK,EAAc4wD,EAAoBj1E,GACxC,KAAMia,aAAiBoK,GACrB,MAAM,IAAIzL,UAAU,wBAAwByL,EAAYh5B,MAI5D,GAAI2pF,EAAO,CACT,IAAMh4E,EAAM,IAAIsgC,YAAY/xC,EA4JpC,SAAgByU,GACd,OAAQA,GACN,IAAK,OACL,IAAK,OACL,IAAK,QACH,OAAO,EACT,IAAK,QACL,IAAK,SACH,OAAO,EACT,IAAK,QACL,IAAK,SACL,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,QACE,MAAM,IAAIh0B,MAAM,qCAAqCg0B,IA5KhBk1E,CAAOl1E,IAC1C5hB,KAAK67B,MAqMb,SAAoB1H,EAAyBvS,GAC3C,OAAO,IAAKi1E,EAAoBj1E,GAAzB,CAAgCuS,GAtMpB4iE,CAAWn4E,EAAKgD,KAyJrC,OAjTE,sBAAI,mBAAI,C,IAAR,WACE,QAAmB1G,IAAflb,KAAK67B,MAAqB,CAC5B,IAAMt/B,EAAOyD,KAAKy2F,aAAcz2F,KAAK8kD,QACrC,GAAIvoD,EAAKvU,SAAWgY,KAAKmN,KACvB,MAAM,IAAIvf,MAAM,8FAElBoS,KAAK67B,MAAQt/B,EAEf,OAAOyD,KAAK67B,O,gCAMd,sBAAI,yBAAU,C,IAAd,WACE,GAAkB,WAAd77B,KAAK4hB,KACP,MAAM,IAAI4Y,UAAU,2BAGtB,OAAOx6B,KAAKzD,M,gCAOd,sBAAI,0BAAW,C,IAAf,WACE,OAAQyD,KAAK4hB,MACX,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,OACH,OAAO5hB,KAAKzD,KAEd,QACE,MAAM,IAAIi+B,UAAU,gF,gCAO1B,sBAAI,wBAAS,C,IAAb,WACE,OAAQx6B,KAAK4hB,MACX,IAAK,UACL,IAAK,UACH,OAAO5hB,KAAKzD,KAEd,QACE,MAAM,IAAIi+B,UAAU,+C,gCAQ1B,sBAAI,yBAAU,C,IAAd,WACE,GAAkB,WAAdx6B,KAAK4hB,KACP,OAAO5hB,KAAKzD,KAEd,MAAM,IAAIi+B,UAAU,uC,gCAMtB,YAAApoC,IAAA,SAAIw4F,GACF,OAAO5qF,KAAKzD,KAAK,EAAAg+C,UAAU2H,gBAAgB0oC,EAAS5qF,KAAKw4C,WAM3D,YAAAvsD,IAAA,SAAI2+F,EAA4B3oE,GAC9BjiB,KAAKzD,KAAK,EAAAg+C,UAAU2H,gBAAgB0oC,EAAS5qF,KAAKw4C,UAAYv2B,GAM1D,YAAA+0E,QAAN,W,4GAIqB97E,IAAflb,KAAK67B,MAAL,OACF,EAAA77B,KAAa,GAAMA,KAAK02F,kBAAmB12F,KAAK8kD,U,OAAhD,EAAKjpB,MAAQ,S,iBAEf,MAAO,CAAP,EAAO77B,KAAK67B,eAYd,sBAAI,sBAAO,C,IAAX,WAIE,OAHK77B,KAAKi3F,WACRj3F,KAAKi3F,SAAW,EAAA18C,UAAUsM,eAAe7mD,KAAK0nC,OAEzC1nC,KAAKi3F,U,gCAsDP,EAAAxjD,UAAP,SAAiByjD,GACf,IAAKA,EACH,MAAM,IAAItpG,MAAM,+CAElB,IAAMg0B,EAAO,EAAAqzD,UAAU0B,wBAAwBugB,EAAYhvD,UAGrDjmB,EAAQ,IAAIsnB,EAFL,EAAA0rC,UAAUyB,oBAAoBwgB,EAAYxvD,MAExB9lB,GAE/B,GAAa,WAATA,EAGFs1E,EAAYrvD,WAAYn7B,SAAQ,SAACgR,EAAK/3B,GACpC,IAAMi5B,EAAMwrB,OAAOmC,KAAK7uB,EAAI34B,OAAQ24B,EAAIm2B,WAAYn2B,EAAI7vB,YACxDo0B,EAAM1lB,KAAK5W,GAAKi5B,EAAInL,mBAGjB,GACHyjF,EAAY9uD,SAAqD,iBAAnC8uD,EAAY9uD,QAAQv6C,YAClDqpG,EAAY9uD,QAAQv6C,WAAa,EAAG,CAItC,IAAMspG,EAAWl1E,EAAM1lB,KACjB66F,EACF,IAAIC,SAASH,EAAY9uD,QAAQrjD,OAAQmyG,EAAY9uD,QAAQyL,WAAYqjD,EAAY9uD,QAAQv6C,YAC3FypG,EAAcC,EAAYL,EAAYhvD,UACtC,EAASgvD,EAAY9uD,QAAQv6C,WAAaypG,EAEhD,GAAIJ,EAAY9uD,QAAQv6C,WAAaypG,GAAgB,EACnD,MAAM,IAAI1pG,MAAM,yBAElB,GAAIupG,EAASnvG,SAAW,EACtB,MAAM,IAAI4F,MAAM,0BAGlB,IAAK,IAAIjI,EAAI,EAAGA,EAAI,EAAQA,IAAK,CAC/B,IAAMN,EAAImyG,EAAUJ,EAAYF,EAAYhvD,SAAWviD,EAAI2xG,GAC3DH,EAASxxG,GAAKN,OAEX,CAEL,IAAIi5B,OAAK,EACT,OAAQ44E,EAAYhvD,UAClB,KAAK,EAAArF,KAAKyB,YAAYoE,SAAS8J,MAC7Bl0B,EAAQ44E,EAAYvvD,UACpB,MACF,KAAK,EAAA9E,KAAKyB,YAAYoE,SAAS+uD,MAC/B,KAAK,EAAA50D,KAAKyB,YAAYoE,SAASgvD,MAC/B,KAAK,EAAA70D,KAAKyB,YAAYoE,SAASivD,OAC/B,KAAK,EAAA90D,KAAKyB,YAAYoE,SAASkvD,KAC/B,KAAK,EAAA/0D,KAAKyB,YAAYoE,SAASmvD,MAC/B,KAAK,EAAAh1D,KAAKyB,YAAYoE,SAASovD,KAC7Bx5E,EAAQ44E,EAAYtvD,UACpB,MACF,KAAK,EAAA/E,KAAKyB,YAAYoE,SAASqvD,MAC7Bz5E,EAAQ44E,EAAYpvD,UACpB,MACF,KAAK,EAAAjF,KAAKyB,YAAYoE,SAASsvD,OAC7B15E,EAAQ44E,EAAYlvD,WACpB,MACF,KAAK,EAAAnF,KAAKyB,YAAYoE,SAASuvD,OAC/B,KAAK,EAAAp1D,KAAKyB,YAAYoE,SAASwvD,OAC7B55E,EAAQ44E,EAAYjvD,WACpB,MACF,QAEE,MAAM,IAAIr6C,MAAM,oBAGpB,GAAI0wB,QACF,MAAM,IAAI1wB,MAAM,oDAGlB,IAAM2O,EAAO0lB,EAAM1lB,KACnB,GAAIA,EAAKvU,SAAWs2B,EAAMt2B,OACxB,MAAM,IAAI4F,MAAM,yBAGlB,IAASjI,EAAI,EAAGA,EAAI24B,EAAMt2B,OAAQrC,IAAK,CACrC,IAAMwyG,EAAU75E,EAAM34B,GAClB,UAAK21C,OAAO68D,GACd57F,EAAK5W,GAAK0tD,EAAa8kD,EAASjB,EAAYhvD,UAE5C3rC,EAAK5W,GAAKwyG,GAKhB,OAAOl2E,GAUF,EAAAm2E,SAAP,SAAgB77F,EAA2CmrC,EAAyB9lB,GAClF,OAAO,IAAI2nB,EAAO7B,EAAM9lB,OAAM1G,OAAWA,EAAW3e,IAG/C,EAAAm3C,cAAP,SAAqB2kD,GACnB,IAAKA,EACH,MAAM,IAAIzqG,MAAM,+CAElB,IAAM85C,EAAO,EAAAutC,UAAUwC,wBAAwB4gB,GACzCz2E,EAAO,EAAAqzD,UAAU0B,wBAAwB0hB,EAAUnwD,YAEnDjmB,EAAQ,IAAIsnB,EAAO7B,EAAM9lB,GAE/B,GAAa,WAATA,EAGF,IAAK,IAAIj8B,EAAI,EAAGA,EAAI0yG,EAAU7O,mBAAoB7jG,IAChDs8B,EAAM1lB,KAAK5W,GAAK0yG,EAAUxwD,WAAWliD,QAGlC,GACH0yG,EAAU9O,gBAAuD,iBAA9B8O,EAAU/O,iBAAgC+O,EAAU/O,gBAAkB,EAAG,CAI9G,IAAM6N,EAAWl1E,EAAM1lB,KACjB66F,EAAa,IAAIC,SACnBgB,EAAU9O,eAAgBxkG,OAAQszG,EAAU9O,eAAgB11C,WAAYwkD,EAAU/O,iBAChFgO,EAAcC,EAAYc,EAAUnwD,YACpC,EAASmwD,EAAU/O,gBAAkBgO,EAE3C,GAAIe,EAAU/O,gBAAkBgO,GAAgB,EAC9C,MAAM,IAAI1pG,MAAM,yBAElB,GAAIupG,EAASnvG,SAAW,EACtB,MAAM,IAAI4F,MAAM,0BAGlB,IAASjI,EAAI,EAAGA,EAAI,EAAQA,IAAK,CAC/B,IAAMN,EAAImyG,EAAUJ,EAAYiB,EAAUnwD,WAAYviD,EAAI2xG,GAC1DH,EAASxxG,GAAKN,GAGlB,OAAO48B,GAEX,EArTA,GA2UA,SAASs1E,EAAY31E,GACnB,OAAQA,GACN,KAAK,EAAAihB,KAAKyB,YAAYoE,SAASmvD,MAC/B,KAAK,EAAAh1D,KAAKyB,YAAYoE,SAASkvD,KAC/B,KAAK,EAAA/0D,KAAKyB,YAAYoE,SAASovD,KAC7B,OAAO,EACT,KAAK,EAAAj1D,KAAKyB,YAAYoE,SAASivD,OAC/B,KAAK,EAAA90D,KAAKyB,YAAYoE,SAASgvD,MAC7B,OAAO,EACT,KAAK,EAAA70D,KAAKyB,YAAYoE,SAAS8J,MAC/B,KAAK,EAAA3P,KAAKyB,YAAYoE,SAAS+uD,MAC/B,KAAK,EAAA50D,KAAKyB,YAAYoE,SAASuvD,OAC7B,OAAO,EACT,KAAK,EAAAp1D,KAAKyB,YAAYoE,SAASqvD,MAC/B,KAAK,EAAAl1D,KAAKyB,YAAYoE,SAASsvD,OAC/B,KAAK,EAAAn1D,KAAKyB,YAAYoE,SAASwvD,OAC7B,OAAO,EACT,QACE,MAAM,IAAItqG,MAAM,qCAAqC,EAAAi1C,KAAKyB,YAAYoE,SAAS9mB,KAQrF,SAASi1E,EAAoBj1E,GAC3B,OAAQA,GACN,IAAK,OACL,IAAK,QACH,OAAO/5B,WACT,IAAK,OACH,OAAOwE,UACT,IAAK,QACH,OAAOE,WACT,IAAK,SACH,OAAOK,YACT,IAAK,QACH,OAAOH,WACT,IAAK,SACH,OAAOK,YACT,IAAK,UACH,OAAOE,aACT,IAAK,UACH,OAAOE,aACT,QAEE,MAAM,IAAIU,MAAM,sBAKtB,SAASylD,EAAa1tD,EAASi8B,GAE7B,GAAIA,IAAS,EAAAihB,KAAKyB,YAAYoE,SAASqvD,OAASn2E,IAASwvB,EAAOsuC,eAAeqY,OAC7E,GAAIpyG,EAAEy5C,mBAAmB,aAAez5C,EAAEo5C,UAAU,YAClD,MAAM,IAAIvE,UAAU,8BAEjB,IACH5Y,IAAS,EAAAihB,KAAKyB,YAAYoE,SAASuvD,QAAUr2E,IAASwvB,EAAOsuC,eAAeuY,QAC5Er2E,IAAS,EAAAihB,KAAKyB,YAAYoE,SAASwvD,QAAUt2E,IAASwvB,EAAOsuC,eAAewY,OAK9E,MAAM,IAAI19D,UAAU,oBAAoB,EAAAqI,KAAKyB,YAAYoE,SAAS9mB,IAJlE,GAAIj8B,EAAEy5C,mBAAmB,aAAez5C,EAAEo5C,SAAS,GACjD,MAAM,IAAIvE,UAAU,2BAMxB,OAAO70C,EAAE+3C,WAIX,SAAS85D,EAAUc,EAAgB12E,EAAuDiyB,GACxF,OAAQjyB,GACN,KAAK,EAAAihB,KAAKyB,YAAYoE,SAASovD,KAC/B,KAAK,EAAAj1D,KAAKyB,YAAYoE,SAASmvD,MAC7B,OAAOS,EAAKC,SAAS1kD,GACvB,KAAK,EAAAhR,KAAKyB,YAAYoE,SAASkvD,KAC7B,OAAOU,EAAKE,QAAQ3kD,GACtB,KAAK,EAAAhR,KAAKyB,YAAYoE,SAASivD,OAC7B,OAAOW,EAAKG,UAAU5kD,GAAY,GACpC,KAAK,EAAAhR,KAAKyB,YAAYoE,SAASgvD,MAC7B,OAAOY,EAAKI,SAAS7kD,GAAY,GACnC,KAAK,EAAAhR,KAAKyB,YAAYoE,SAAS8J,MAC7B,OAAO8lD,EAAKK,WAAW9kD,GAAY,GACrC,KAAK,EAAAhR,KAAKyB,YAAYoE,SAAS+uD,MAC7B,OAAOa,EAAKM,SAAS/kD,GAAY,GACnC,KAAK,EAAAhR,KAAKyB,YAAYoE,SAASuvD,OAC7B,OAAOK,EAAKO,UAAUhlD,GAAY,GACpC,KAAK,EAAAhR,KAAKyB,YAAYoE,SAASqvD,MAC7B,OAAO1kD,EACH,UAAKvX,SAASw8D,EAAKO,UAAUhlD,GAAY,GAAOykD,EAAKO,UAAUhlD,EAAa,GAAG,IAAO,GAAQjyB,GACpG,KAAK,EAAAihB,KAAKyB,YAAYoE,SAASsvD,OAC7B,OAAOM,EAAKQ,WAAWjlD,GAAY,GACrC,KAAK,EAAAhR,KAAKyB,YAAYoE,SAASwvD,OAC7B,OAAO7kD,EACH,UAAKvX,SAASw8D,EAAKO,UAAUhlD,GAAY,GAAOykD,EAAKO,UAAUhlD,EAAa,GAAG,IAAO,GAAOjyB,GACnG,QACE,MAAM,IAAIh0B,MAAM,sCAAsC,EAAAi1C,KAAKyB,YAAYoE,SAAS9mB,KA7azE,EAAA2nB,U,o9BCzCb,cACA,aACA,UAIA,UAMA,4BAAiCoa,G,IAAkB,wDACjD,IAAKA,GAAUA,EAAO37D,SAAW+wG,EAAmB/wG,OAClD,OAAO,EAET,IAAK,IAAIrC,EAAI,EAAGA,EAAIg+D,EAAO37D,OAAQrC,IACjC,IAAKg+D,EAAOh+D,GAAG+hD,MAAQic,EAAOh+D,GAAG+hD,KAAK1/C,SAAW+wG,EAAmBpzG,GAClE,OAAO,EAGX,OAAO,GAIT,kBAAuBqzG,EAAeC,GACpC,IAAKD,EACH,MAAM,IAAIprG,MAAqB,iBAARqrG,EAAmBA,EAAMA,MAIpD,+BAsBA,OAfS,EAAAhhD,YAAP,SACIihD,EAEAC,GAEF,GAAID,EAAGlxG,SAAWmxG,EAAGnxG,OACnB,OAAO,EAET,IAAK,IAAIrC,EAAI,EAAGA,EAAIuzG,EAAGlxG,OAAQrC,IAC7B,GAAIuzG,EAAGvzG,KAAOwzG,EAAGxzG,GACf,OAAO,EAGX,OAAO,GAEX,EAtBA,GAAa,EAAAqyD,YAwBb,+BAkDA,OA3CS,EAAAohD,sBAAP,SAA6BC,EAA0BC,GAYrD,MAAO,CAPqB,IAAjBD,EAAMrxG,OAAgB,CAAC,EAAGqxG,EAAM,IAAMA,EAKrB,IAAjBC,EAAMtxG,OAAgB,CAACsxG,EAAM,GAAI,GAAKA,IAY5C,EAAAC,uBAAP,SAA8B7sC,EAAuBe,EAAeC,GAEpD,IAAVD,GAEFf,EAAYlyD,OAAOkyD,EAAY1kE,OAAS,EAAG,GAG/B,IAAV0lE,GACFhB,EAAYlxD,OAUT,EAAAg+F,gBAAP,SAAuBj0G,EAAqBkC,GAC1C,OAAQlC,EAAE,KAAOkC,EAAE,QAAMyzB,EAAY,CAAC31B,EAAE,GAAIkC,EAAE,KAElD,EAlDA,GAAa,EAAAgyG,aAoDb,+BA+LA,OAvLS,EAAAjsC,UAAP,SAAiBksC,EAA0BC,EAA0BC,G,WAAA,IAAAA,OAAA,GACnE,IAAM7+B,EAAQ2+B,EAAM1xG,OACdgzE,EAAQ2+B,EAAM3xG,OACpB,GAAc,IAAV+yE,EACF,OAAO4+B,EAET,GAAc,IAAV3+B,EACF,OAAO0+B,EAET,IAAMG,EAAQz0F,KAAKE,IAAIo0F,EAAM1xG,OAAQ2xG,EAAM3xG,QACrC8xG,EAAQ,IAAI9lF,MAAc6lF,GAGhC,GAAID,EAAU,CACZ,GAAI7+B,EAAQ,GAAKC,EAAQ,EACvB,OAEF,IAAM++B,EACFN,EAAWD,gBAAgB,CAACE,EAAM3+B,EAAQ,GAAI2+B,EAAM3+B,EAAQ,IAAK,CAAC4+B,EAAM3+B,EAAQ,GAAI2+B,EAAM3+B,EAAQ,KACtG,QAAqB9/C,IAAjB6+E,EACF,OAEF,IAAuCA,EAAY,GAAlDD,EAAMD,EAAQ,GAAE,KAAEC,EAAMD,EAAQ,GAAE,KAGrC,IAAK,IAAIl0G,EAAIi0G,EAAW,EAAI,EAAGj0G,GAAKk0G,EAAOl0G,IAAK,CAC9C,IAAMq0G,EAAOj/B,EAAQp1E,EAAI,EAAI,EAAI+zG,EAAM3+B,EAAQp1E,GACzCs0G,EAAOj/B,EAAQr1E,EAAI,EAAI,EAAIg0G,EAAM3+B,EAAQr1E,GAE/C,GAAIq0G,IAASC,GAAQD,EAAO,GAAKC,EAAO,EACtC,OAEFH,EAAMD,EAAQl0G,GAAKyf,KAAKE,IAAI00F,EAAMC,GAGpC,OAAOH,GASF,EAAAvwE,MAAP,SAAa2wE,EAAuCC,GAIlD,IAAMC,EAAkB,IAAIpmF,MAAMmmF,EAAcnyG,QAEhD,OADAgyD,EAAcqgD,UAAUH,EAAoBC,EAAeC,GACpDA,GAUF,EAAAC,UAAP,SAAiBH,EAAuCC,EAAkCC,GAKxF,IADA,IAAM/3C,EAAY63C,EAAmBlyG,OAASmyG,EAAcnyG,OACnDrC,EAAI,EAAGA,EAAIw0G,EAAcnyG,OAAQrC,IACxCy0G,EAAgBz0G,GAAKu0G,EAAmB73C,EAAY18D,GAAKw0G,EAAcx0G,IAYpE,EAAA20G,KAAP,SACI/0G,EAAWkC,EAAW27B,EAA+Dm3E,EACrFptC,GACF,IAAMT,EAAc1S,EAAcwT,UAAUjoE,EAAEmiD,KAAMjgD,EAAEigD,MAEtD,GAAIglB,EAAa,CACf,GAAI6tC,IAAYhgD,EAAU8S,SAASX,EAAannE,EAAEmiD,MAEhD,OAGF,IAAMv6B,EAAOotC,EAAUptC,KAAKu/C,GACtB1mE,EAAIu0G,EAAUh1G,EAAI,IAAI,EAAAgkD,OAAOmjB,EAAaS,GAAc5nE,EAAEq8B,MAGhE,GAA2B,IAAvB8qC,EAAY1kE,OACdhC,EAAEiG,IAAI,GAAIm3B,EAAG79B,EAAE6M,IAAI,IAAK3K,EAAE2K,IAAI,UAI3B,CACH,IAAMooG,EAAgB,IAAIxmF,MAAc04C,EAAY1kE,QAC9CyyG,EAAmB,IAAIzmF,MAAMzuB,EAAEmiD,KAAK1/C,QACpC0yG,EAAmB,IAAI1mF,MAAMvsB,EAAEigD,KAAK1/C,QACtC2yG,EAAsB,EACtBC,EAAsB,EACtBC,GAAY,EACZC,GAAY,EACM,IAAlBv1G,EAAEmiD,KAAK1/C,SACT2yG,EAAOp1G,EAAE6M,IAAI,IACbyoG,GAAY,GAEQ,IAAlBpzG,EAAEigD,KAAK1/C,SACT4yG,EAAOnzG,EAAE2K,IAAI,IACb0oG,GAAY,GAGd,IADA,IAAIC,OAAI,EACCp1G,EAAI,EAAGA,EAAIwnB,EAAMxnB,IAAK,CAE7Bo1G,EAAOp1G,EACP,IAAK,IAAI+F,EAAIghE,EAAY1kE,OAAS,EAAG0D,GAAK,EAAGA,IAC3C8uG,EAAc9uG,GAAKqvG,EAAOruC,EAAYhhE,GACtCqvG,EAAO31F,KAAK+pB,MAAM4rE,EAAOruC,EAAYhhE,IAGlCmvG,IAEH7gD,EAAcqgD,UAAUG,EAAej1G,EAAEmiD,KAAM+yD,GAC/CE,EAAOp1G,EAAE6M,IAAIqoG,IAEVK,IACH9gD,EAAcqgD,UAAUG,EAAe/yG,EAAEigD,KAAMgzD,GAC/CE,EAAOnzG,EAAE2K,IAAIsoG,IAGf10G,EAAEiG,IAAIuuG,EAAep3E,EAAGu3E,EAAMC,KAIlC,OAAO50G,IAWJ,EAAAg1G,iBAAP,SAAwBvxD,EAA0BwxD,GAEhD,IAAMhgC,EAAYxxB,EAAMzhD,OAClBkzG,EAAYD,EAAWjzG,OAC7B,GAAIizE,EAAYigC,EACd,OAAO,EAET,IAAK,IAAIv1G,EAAI,EAAGA,GAAKs1E,EAAWt1E,IAC9B,GAA6B,IAAzB8jD,EAAMwxB,EAAYt1E,IAAY8jD,EAAMwxB,EAAYt1E,KAAOs1G,EAAWC,EAAYv1G,GAChF,OAAO,EAGX,OAAO,GAUF,EAAAs0D,iBAAP,SAAwBgU,EAA+BvB,GAGrD,IAFA,IAAM7S,EAASoU,EAAWjmE,OACpB0/C,EAAiB,GACd/hD,EAAI,EAAGA,EAAIk0D,EAAQl0D,IAAK,CAC/B,IAAMkjD,EAAMgR,EAAS,EAAIl0D,EACnBJ,EAAI0oE,EAAWplB,IAAQ,GACnB6jB,EAAYA,EAAY1kE,OAAS,EAAIrC,IAAM,GAC7C,GAAW,IAANJ,GACXmiD,EAAKz4C,QAAQ45C,GAGjB,OAAOnB,GAEX,EA/LA,GAAa,EAAAsS,gBAmMb,2BACI38C,EAAoC06C,EAAoCojD,EAAqBC,EAC7F7nC,GACF,GAAI6nC,EAAc,GAAKA,GAAerjD,EAAO/vD,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIutG,EAAc,GAAKA,GAAe99F,EAAOrV,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIwtG,EAAc7nC,EAAYxb,EAAO/vD,OACnC,MAAM,IAAI4F,MAAM,kDAElB,GAAIutG,EAAc5nC,EAAYl2D,EAAOrV,OACnC,MAAM,IAAI4F,MAAM,4CAGlB,IAAK,IAAIgV,EAAS,EAAGA,EAAS2wD,EAAW3wD,IACvCvF,EAAO89F,EAAcv4F,GAAUm1C,EAAOqjD,EAAcx4F,IAIxD,+BA+CA,OA3CS,EAAAy1D,qBAAP,SACIgjC,EAA8BC,EAAoBC,EAA+BC,EACjFC,GACF,GAAyB,IAArBJ,EAAUrzG,QAAsC,IAAtBuzG,EAAWvzG,OACvC,MAAM,IAAI4F,MAAM,8BAGlB,IAAIjD,EACAwB,EACAzB,EAEA4wG,GACF3wG,EAAI0wG,EAAU,GACdlvG,EAAIkvG,EAAU,KAEd1wG,EAAI0wG,EAAU,GACdlvG,EAAIkvG,EAAU,IAGhB,IAAIK,GAAQ,EAUZ,GARIF,GACF9wG,EAAI6wG,EAAW,GACfG,EAAO,IAEPhxG,EAAI6wG,EAAW,GACfG,EAAO,GAGLH,EAAWG,KAAUvvG,EACvB,MAAM,IAAIyB,MAAM,sBAGlB,GAAIjD,GAAK,GAAKD,GAAK,GAAKyB,GAAK,EAC3B,MAAM,IAAIyB,MAAM,2BAGlB,GAAI6tG,IAAczhD,EAAcghD,iBAAiBS,EAAW,CAAC9wG,EAAGD,IAC9D,MAAM,IAAIkD,MAAM,0CAGlB,MAAO,CAACjD,EAAGD,EAAGyB,IAElB,EA/CA,GAAa,EAAAisE,WAiDb,+BAgGA,OA/FS,EAAAue,wBAAP,SAA+BglB,GAE7B,OAAQA,GACN,KAAK,EAAA94D,KAAKyB,YAAYoE,SAASkvD,KAC7B,MAAO,OACT,KAAK,EAAA/0D,KAAKyB,YAAYoE,SAASmvD,MAC7B,MAAO,QACT,KAAK,EAAAh1D,KAAKyB,YAAYoE,SAASovD,KAC7B,MAAO,OACT,KAAK,EAAAj1D,KAAKyB,YAAYoE,SAASgvD,MAC7B,MAAO,QACT,KAAK,EAAA70D,KAAKyB,YAAYoE,SAASivD,OAC7B,MAAO,SACT,KAAK,EAAA90D,KAAKyB,YAAYoE,SAAS+uD,MAC7B,MAAO,QACT,KAAK,EAAA50D,KAAKyB,YAAYoE,SAASuvD,OAC7B,MAAO,SACT,KAAK,EAAAp1D,KAAKyB,YAAYoE,SAAS8J,MAC7B,MAAO,UACT,KAAK,EAAA3P,KAAKyB,YAAYoE,SAASsvD,OAC7B,MAAO,UACT,KAAK,EAAAn1D,KAAKyB,YAAYoE,SAASgK,OAC7B,MAAO,SAIT,KAAK,EAAA7P,KAAKyB,YAAYoE,SAASqvD,MAC7B,MAAO,QACT,KAAK,EAAAl1D,KAAKyB,YAAYoE,SAASwvD,OAC7B,MAAO,SAET,QACE,MAAM,IAAItqG,MAAM,0BAA0B,EAAAi1C,KAAKyB,YAAYoE,SAASizD,MAInE,EAAAC,2BAAP,SAAkCh6E,GAChC,OAAQA,GACN,IAAK,OACH,OAAO,EAAAihB,KAAKyB,YAAYoE,SAASkvD,KACnC,IAAK,QACH,OAAO,EAAA/0D,KAAKyB,YAAYoE,SAASmvD,MACnC,IAAK,OACH,OAAO,EAAAh1D,KAAKyB,YAAYoE,SAASovD,KACnC,IAAK,QACH,OAAO,EAAAj1D,KAAKyB,YAAYoE,SAASgvD,MACnC,IAAK,SACH,OAAO,EAAA70D,KAAKyB,YAAYoE,SAASivD,OACnC,IAAK,QACH,OAAO,EAAA90D,KAAKyB,YAAYoE,SAAS+uD,MACnC,IAAK,SACH,OAAO,EAAA50D,KAAKyB,YAAYoE,SAASuvD,OACnC,IAAK,UACH,OAAO,EAAAp1D,KAAKyB,YAAYoE,SAAS8J,MACnC,IAAK,UACH,OAAO,EAAA3P,KAAKyB,YAAYoE,SAASsvD,OACnC,IAAK,SACH,OAAO,EAAAn1D,KAAKyB,YAAYoE,SAASgK,OACnC,IAAK,QACH,OAAO,EAAA7P,KAAKyB,YAAYoE,SAASqvD,MACnC,IAAK,SACH,OAAO,EAAAl1D,KAAKyB,YAAYoE,SAASwvD,OAEnC,QACE,MAAM,IAAItqG,MAAM,0BAA0Bg0B,KAIzC,EAAA80D,oBAAP,SAA2BhvC,GAEzB,OAAOA,EAAKiM,KAAI,SAAAvtD,GAAK,iBAAKk1C,OAAOl1C,GAAKA,EAAEs3C,WAAat3C,MAGhD,EAAA8uF,yBAAP,SAAgCiC,GAC9B,MAAO,CACL7tC,WAAY2rC,EAAU0B,wBAAwBQ,EAAU3tC,UACxDC,MAAO,CAAC/B,KAAMutC,EAAUyB,oBAAoBS,EAAU1tC,MAAOZ,IAAK8K,KAAI,SAAAvtD,GAAK,OAAAA,EAAE4iD,gBAI1E,EAAAyuC,wBAAP,SAA+BpzB,GAE7B,IADA,IAAM3c,EAAO,GACJ/hD,EAAI,EAAGA,EAAI0+D,EAAOglC,aAAc1jG,IACvC+hD,EAAKx4C,KAAKkkD,EAASC,aAAagR,EAAO3c,KAAK/hD,KAE9C,OAAO+hD,GAGF,EAAA2tC,8BAAP,SAAqCvuF,GAEnC,IADA,IAAM8kB,EAAa,GACVjmB,EAAI,EAAGA,EAAImB,EAAK+wF,mBAAoBlyF,IAC3CimB,EAAW1c,KAAKpI,EAAK8kB,WAAWjmB,IAElC,OAAOimB,GAEX,EAhGA,GAAa,EAAAqpE,YAkGb,+BAYA,OAXS,EAAA5hC,aAAP,SAAoBhuD,GAClB,OAAI,UAAKi2C,OAAOj2C,GACPA,EAAEq4C,WACAr4C,aAAa,EAAAwsC,YAAYc,KAC3B,UAAKuK,UAAU,CAAC1a,IAAKn9B,EAAEm9B,IAAKC,KAAMp9B,EAAEo9B,KAAM4Y,UAAU,IAAOqC,WAE7Dr4C,GAEF,EAAAi2C,OAAP,SAAcj2C,GACZ,OAAO,UAAKi2C,OAAOj2C,IAAMA,aAAa,EAAAwsC,YAAYc,MAEtD,EAZA,GAAa,EAAAygB,WAcb,+BA2UA,OA1US,EAAAjmC,KAAP,SAAYu6B,GACV,OAAO6S,EAAUshD,0BAA0Bn0D,EAAM,EAAGA,EAAK1/C,SAIpD,EAAAq6E,kBAAP,SAAyB36B,EAAyBwmB,GAChD,GAAIA,EAAO,GAAKA,EAAOxmB,EAAK1/C,OAC1B,MAAM,IAAI4F,MAAM,wBAAwBsgE,EAAI,wCAAwCxmB,EAAK1/C,OAAM,gBAEjG,OAAOuyD,EAAUshD,0BAA0Bn0D,EAAMwmB,EAAMxmB,EAAK1/C,SAIvD,EAAAo6E,gBAAP,SAAuB16B,EAAyBwmB,GAC9C,GAAIA,EAAO,GAAKA,EAAOxmB,EAAK1/C,OAC1B,MAAM,IAAI4F,MAAM,wBAAwBsgE,EAAI,sCAAsCxmB,EAAK1/C,OAAM,gBAE/F,OAAOuyD,EAAUshD,0BAA0Bn0D,EAAM,EAAGwmB,IAG/C,EAAA2tC,0BAAP,SAAiCn0D,EAAyB3hB,EAAesH,GAEvE,IADA,IAAIlgB,EAAO,EACFxnB,EAAIogC,EAAOpgC,EAAI0nC,EAAK1nC,IAAK,CAGhC,GAAI+hD,EAAK/hD,IAAM,EACb,MAAM,IAAIiI,MAEN,sHAENuf,GAAQu6B,EAAK/hD,GAEf,OAAOwnB,GAGF,EAAA05C,eAAP,SAAsBnf,GACpB,IAAM6Q,EAAO7Q,EAAK1/C,OAClB,GAAa,IAATuwD,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC,GAEV,IAAMC,EAAU,IAAIxkC,MAAMukC,GAC1BC,EAAQD,EAAO,GAAK,EACpBC,EAAQD,EAAO,GAAK7Q,EAAK6Q,EAAO,GAChC,IAAK,IAAI5yD,EAAI4yD,EAAO,EAAG5yD,GAAK,IAAKA,EAC/B6yD,EAAQ7yD,GAAK6yD,EAAQ7yD,EAAI,GAAK+hD,EAAK/hD,EAAI,GAEzC,OAAO6yD,GAGF,EAAAiF,UAAP,SAAiB/V,GAEf,OADaA,EAAKx/C,QACN40D,WAGP,EAAAoF,gBAAP,SAAuB0oC,EAA4BpyC,EAA4B0V,QAChEhzC,IAATgzC,IACFA,EAAO08B,EAAQ5iG,QAGjB,IADA,IAAI4a,EAAS,EACJjd,EAAI,EAAGA,EAAIuoE,IAAQvoE,EAC1Bid,GAAU41C,EAAQ7yD,GAAKilG,EAAQjlG,GAEjC,OAAOid,GAGF,EAAAq/C,gBAAP,SAAuBr/C,EAAgB41C,GACrC,IAAMD,EAAOC,EAAQxwD,OACrB,GAAa,IAATuwD,EACF,MAAO,GACF,GAAa,IAATA,EACT,MAAO,CAAC31C,EAAS41C,EAAQ,IAG3B,IADA,IAAMoyC,EAAoB,IAAI52E,MAAMwkC,EAAQxwD,QACnCrC,EAAI,EAAGA,EAAIilG,EAAQ5iG,OAAS,IAAKrC,EACxCilG,EAAQjlG,GAAKyf,KAAK+pB,MAAMvsB,EAAS41C,EAAQ7yD,IACzCid,GAAUgoF,EAAQjlG,GAAK6yD,EAAQ7yD,GAGjC,OADAilG,EAAQA,EAAQ5iG,OAAS,GAAK4a,EACvBgoF,GAMF,EAAA7yB,cAAP,SAAqB7J,EAAc8B,GACjC,GAAI9B,GAAQ8B,GAAc9B,GAAQ8B,EAChC,MAAM,IAAIpiE,MAAM,wCAElB,OAAOsgE,EAAO,EAAIA,EAAO8B,EAAa9B,GAGjC,EAAAuQ,cAAP,SAAqBD,EAAyBxO,GAA9C,WACE,OAAOwO,EAAK7qB,KAAI,SAAArpD,GAAK,SAAKytE,cAAcztE,EAAG0lE,OAWtC,EAAA8rC,eAAP,SAAsBvyE,EAAiBme,EAAyBq0D,GAC9D,GAAoB,IAAhBr0D,EAAK1/C,QAAiC,IAAjBuhC,EAAMvhC,OAC7B,MAAM,IAAI4F,MAAM,oDAElB,QAA0BstB,IAAtB6gF,EACFA,EAAoBr0D,EAAK1/C,YAEzB,GAAI+zG,GAAqB,GAAKA,EAAoBr0D,EAAK1/C,OACrD,MAAM,IAAI4F,MAAM,kCAIpB,IAAK,IAAIrD,EAAIwxG,EAAoB,EAAGxxG,GAAK,IACvCg/B,EAAMh/B,OACFg/B,EAAMh/B,GAAKm9C,EAAKn9C,OAFwBA,EAK5Cg/B,EAAMh/B,GAAK,GAgBR,EAAA80E,sBAAP,SACI28B,EAAiCC,GAEnC,GAA0B,IAAtBA,EAAWj0G,OAAc,CAC3B,GAA4B,IAAxBg0G,EAAah0G,QAAiD,IAAjCuyD,EAAUptC,KAAK6uF,GAC9C,MAAO,GAEP,MAAM,IAAIpuG,MAAM,qCAQpB,IAJA,IAAMsuG,EAAQD,EAAWj0G,OACnBg4E,EAAe,IAAIhsD,MAAckoF,GACnCC,GAAoB,EACpBC,EAAgB,EACXz2G,EAAI,EAAGA,EAAIu2G,EAAOv2G,IAAK,CAC9B,GAAIs2G,EAAWt2G,IAAM,EACnB,MAAM,IAAIiI,MAAM,qDAElB,IAAuB,IAAnBquG,EAAWt2G,GAAW,CACxB,IAA0B,IAAtBw2G,EACF,MAAM,IAAIvuG,MAAM,kDAElBuuG,EAAmBx2G,MACd,CACL,GAAsB,IAAlBs2G,EAAWt2G,GAAU,CACvB,GAAIA,GAAKq2G,EAAah0G,OACpB,MAAM,IAAI4F,MAAM,gFAElBoyE,EAAar6E,GAAKq2G,EAAar2G,QAE/Bq6E,EAAar6E,GAAKs2G,EAAWt2G,GAE/By2G,GAAiBp8B,EAAar6E,IAIlC,IAAM02G,EAAgB9hD,EAAUptC,KAAK6uF,GACrC,IAA0B,IAAtBG,EAAyB,CAC3B,GAAIE,EAAgBD,GAAkB,EACpC,MAAM,IAAIxuG,MAAM,6EACZouG,EAAY,oBAAoBC,EAAU,KAEhDj8B,EAAam8B,GAAoBE,EAAgBD,OAIjD,GAAIA,IAAkBC,EACpB,MAAM,IAAIzuG,MAAM,2DAGpB,OAAOoyE,GASF,EAAAyD,gBAAP,SAAuBl+E,EAAsBg+E,GAC3C,OAAIA,EACKA,EAAK5vB,KAAI,SAAC1sD,GAAM,OAAA1B,EAAE0B,MAElB1B,EAAE2C,QAAQ40D,WASd,EAAA0e,SAAP,SAAgB9zB,EAAyB/S,GACvC,IAAM4jB,EAAO7Q,EAAK1/C,OAClB,OAAO0/C,EAAKiM,KAAI,SAAC1sD,EAAGtB,GAAM,OAAAsB,EAAI0tC,EAAIhvC,GAAKgvC,EAAIhvC,EAAI4yD,OAQ1C,EAAA8U,SAAP,SAAgBivC,EAA2BC,GACzC,OAAID,EAAOt0G,SAAWu0G,EAAOv0G,QAGtBs0G,EAAO37B,OAAM,SAAC15E,EAAGtB,GAAM,OAAAsB,IAAMs1G,EAAO52G,OAOtC,EAAAgxG,wBAAP,SAA+BjvD,G,QAC7B,GAAIA,EAAK1/C,OAAS,EAChB,MAAM,IAAIwyC,UAAU,mDAEtB,IAAIrtB,EAAO,E,IACX,IAAgB,QAAAu6B,GAAI,8BAAE,CAAjB,IAAMriD,EAAC,QACV,IAAKqrB,OAAOw0B,UAAU7/C,GACpB,MAAM,IAAIm1C,UAAU,kBAAkBn1C,EAAC,sBAEzC,GAAIA,EAAI,GAAKA,EAAI,WACf,MAAM,IAAIm1C,UAAU,yBAAyBn1C,EAAC,mBAEhD8nB,GAAQ9nB,G,iGAEV,OAAO8nB,GAQF,EAAAwqD,aAAP,SAAoBjwB,EAAyBwmB,GACvCA,EAAO,IACTA,GAAQxmB,EAAK1/C,QAEf,IAAMw0G,EAAQ90D,EAAKy2B,QAAO,SAAC7zE,EAAGpD,GAAM,OAAAoD,EAAIpD,IAAG,GACrCu1G,EAAQ/0D,EAAKx/C,MAAMgmE,GAAMiQ,QAAO,SAAC7zE,EAAGpD,GAAM,OAAAoD,EAAIpD,IAAG,GAGvD,MAFmB,CAACs1G,EAAQC,EAAOA,IAU9B,EAAAlgD,aAAP,SAAoB7U,EAAyB82B,GAC3C,IAAM9G,EAAa,IAAI1jD,MAGvBwqD,EAAOjkB,EAAUkkB,cAAcD,EAAM92B,EAAK1/C,QAE1C,IAAK,IAAIrC,EAAI,EAAGA,EAAI+hD,EAAK1/C,OAAQrC,IAAK,CACpC,IAAM+2G,EAAgBl+B,EAAKh1E,QAAQ7D,IAAM,EACzC,GAAI+2G,GAA6B,IAAZh1D,EAAK/hD,GACxB,MAAM,IAAIiI,MAAM,6CAGG,IAAhB4wE,EAAKx2E,QAAgB0/C,EAAK/hD,GAAK,GAAO64E,EAAKx2E,OAAS,IAAM00G,IAC7DhlC,EAAWxoE,KAAKw4C,EAAK/hD,IAIzB,OAAO+xE,GAQF,EAAAgN,eAAP,SAAsBh9B,EAAyB82B,GAC7C,IAAM9G,EAAa,IAAI1jD,MAAc0zB,EAAK1/C,OAASw2E,EAAKx2E,QAGxD0vE,EAAWugB,KAAK,GAGhB,IAAK,IAAItyF,EAAI,EAAGA,EAAI64E,EAAKx2E,OAAQrC,IAAK,CACpC,IAAMuoE,EAAO3T,EAAUwd,cAAcyG,EAAK74E,GAAI+hD,EAAK1/C,QACnD,GAAIkmE,GAAQwJ,EAAW1vE,OACrB,MAAM,IAAI4F,MAAM,mCAElB,GAAyB,IAArB8pE,EAAWxJ,GACb,MAAM,IAAItgE,MAAM,+BAGlB8pE,EAAWxJ,GAAQ,EAIrB,IAAIyuC,EAAoB,EACxB,IAASh3G,EAAI,EAAGA,EAAI+xE,EAAW1vE,OAAQrC,IACf,IAAlB+xE,EAAW/xE,KACb+xE,EAAW/xE,GAAK+hD,EAAKi1D,MAMzB,GAAIA,IAAsBj1D,EAAK1/C,OAC7B,MAAM,IAAI4F,MAAM,qDAGlB,OAAO8pE,GAEX,EA3UA,GAAa,EAAAnd,YA8Ub,+BAwFA,OAtFS,EAAAqiD,IAAP,SACIv/F,EAAoC06C,EAAoCojD,EAAqBC,EAC7F7nC,GACF,GAAI6nC,EAAc,GAAKA,GAAerjD,EAAO/vD,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIutG,EAAc,GAAKA,GAAe99F,EAAOrV,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIwtG,EAAc7nC,EAAYxb,EAAO/vD,OACnC,MAAM,IAAI4F,MAAM,kDAElB,GAAIutG,EAAc5nC,EAAYl2D,EAAOrV,OACnC,MAAM,IAAI4F,MAAM,4CAGlB,IAAK,IAAIgV,EAAS,EAAGA,EAAS2wD,EAAW3wD,IACvCvF,EAAO89F,EAAcv4F,IAAWwC,KAAKiqB,IAAI0oB,EAAOqjD,EAAcx4F,GAAS,IAKpE,EAAAi6F,KAAP,SACIx/F,EAAoC06C,EAAoCojD,EAAqBC,EAC7F7nC,EAAmBjmD,GACrB,GAAI8tF,EAAc,GAAKA,GAAerjD,EAAO/vD,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIutG,EAAc,GAAKA,GAAe99F,EAAOrV,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIwtG,EAAc7nC,EAAYxb,EAAO/vD,OACnC,MAAM,IAAI4F,MAAM,kDAElB,GAAIutG,EAAc5nC,EAAYl2D,EAAOrV,OACnC,MAAM,IAAI4F,MAAM,4CAGlB,IAAK,IAAIgV,EAAS,EAAGA,EAAS2wD,EAAW3wD,IACvCvF,EAAO89F,EAAcv4F,IAAY0K,EAAQyqC,EAAOqjD,EAAcx4F,IAK3D,EAAAk6F,KAAP,SACIz/F,EAAoC06C,EAAoCojD,EAAqBC,EAC7F7nC,EAAmB9rE,GACrB,GAAI2zG,EAAc,GAAKA,GAAerjD,EAAO/vD,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIutG,EAAc,GAAKA,GAAe99F,EAAOrV,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIwtG,EAAc7nC,EAAYxb,EAAO/vD,OACnC,MAAM,IAAI4F,MAAM,kDAElB,GAAIutG,EAAc5nC,EAAYl2D,EAAOrV,OACnC,MAAM,IAAI4F,MAAM,4CAGlB,IAAK,IAAIgV,EAAS,EAAGA,EAAS2wD,EAAW3wD,IACvCvF,EAAO89F,EAAcv4F,GAAUwC,KAAKiqB,IAAI0oB,EAAOqjD,EAAcx4F,GAASnb,IAKnE,EAAAw1C,IAAP,SACI5/B,EAAoC06C,EAAoCojD,EAAqBC,EAC7F7nC,GACF,GAAI6nC,EAAc,GAAKA,GAAerjD,EAAO/vD,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIutG,EAAc,GAAKA,GAAe99F,EAAOrV,OAC3C,MAAM,IAAI4F,MAAM,6BAElB,GAAIwtG,EAAc7nC,EAAYxb,EAAO/vD,OACnC,MAAM,IAAI4F,MAAM,kDAElB,GAAIutG,EAAc5nC,EAAYl2D,EAAOrV,OACnC,MAAM,IAAI4F,MAAM,4CAGlB,IAAK,IAAIgV,EAAS,EAAGA,EAAS2wD,EAAW3wD,IACvCvF,EAAO89F,EAAcv4F,GAAWm1C,EAAOqjD,EAAcx4F,GAAUvF,EAAO89F,EAAcv4F,IAG1F,EAxFA,GAAa,EAAAm6F,WA0Fb,+BAsCA,OA/BS,EAAAl6B,WAAP,SAAkBn7B,EAAyBwmB,EAAcxO,EAAiBojB,GAExE,GAAqB,IAAjBpjB,EAAM13D,OAAc,CACtB,IAAK86E,EACH,MAAM,IAAIl1E,MAAM,8EAElBg1E,EAAUo6B,eAAet1D,EAAKwmB,GAAO4U,EAAYpjB,GAKnD,IAFA,IAAM+O,EAAqB,GACrBE,EAAU,CAAC,GACRhpE,EAAI,EAAGA,EAAI+5D,EAAM13D,SAAUrC,EAAG,CAC3B,IAANA,GACFgpE,EAAQz/D,KAAKy/D,EAAQhpE,EAAI,GAAK+5D,EAAM/5D,EAAI,IAE1C,IAAM8jD,EAAQ/B,EAAKx/C,QACnBuhD,EAAMykB,GAAQxO,EAAM/5D,GACpB8oE,EAAOv/D,KAAKu6C,GAEd,MAAO,CAACglB,EAAQE,IAGX,EAAAquC,eAAP,SAAsBC,EAA8Bn6B,EAAoBpjB,GAEtE,GAAIu9C,EAAuBn6B,GAAe,EACxC,MAAM,IAAIl1E,MAAM,4CAElB,IAAK,IAAIjI,EAAI,EAAGA,EAAIm9E,IAAcn9E,EAChC+5D,EAAMxwD,KAAK+tG,EAAuBn6B,IAGxC,EAtCA,GAAa,EAAAF,YAwCb,+BA4FA,OAlFS,EAAAs6B,WAAP,SACI33G,EAAWi5E,EAAgB2+B,EAAmBxgC,EAC9CL,GACF,IAAM50B,EAAOniD,EAAEmiD,KAAKx/C,MAAM,GAEN,IAAhBs2E,EAAKx2E,QACP0/C,EAAKh7B,SAAQ,SAACtmB,EAAGq7E,GAAQ,OAAAjD,EAAKtvE,KAAKuyE,MAWrC,IARA,IAAM/J,EAAa0lC,EAAWC,gBAAgB31D,EAAM82B,GAAM,GAGpDrxD,EAAOotC,EAAUptC,KAAKuqD,GACtBxwE,EAAI,IAAI,EAAAqiD,OAAOmuB,EAAYnyE,EAAEq8B,MAC7B42B,EAAU+B,EAAUsM,eAAe6Q,GACnC4lC,EAAe/iD,EAAUsM,eAAenf,GACxC61D,EAAW,IAAIvpF,MAAM0zB,EAAK1/C,QACvBrC,EAAI,EAAGA,EAAIwnB,EAAMxnB,IAAK,CAC7B,IAAMilG,EAAUrwC,EAAU0H,gBAAgBt8D,EAAG6yD,GAE7CwB,EAAcqgD,UAAUzP,EAASljD,EAAM61D,GACvCr2G,EAAE+E,IACE2+F,EACAwS,EAAWI,iBACPj4G,EAAE6/D,WAAYoZ,EAAM92B,EAAM,EAAG6S,EAAU2H,gBAAgBq7C,EAAUD,GAAe3gC,EAAKL,IAG/F,OAAI6gC,EACKj2G,EAGA,IAAI,EAAAqiD,OACP6zD,EAAWC,gBAAgB31D,EAAM82B,EAAM2+B,GAAWj2G,EAAE06B,UAAM1G,OAAWA,EAAWh0B,EAAEqV,KAAMrV,EAAE49D,SAe3F,EAAA04C,iBAAP,SACIl3D,EAA0Bk4B,EAAgB92B,EAAgB+1D,EAAoBpvE,EAC9EsuC,EAA4BL,GAC9B,IAAIv7B,EAAM,EACV,GAAI08D,GAAcj/B,EAAKx2E,OACrB,OAAO20E,EAAIr2B,EAAMjY,IAInB,IAFA,IAAM6/B,EAAOsQ,EAAKi/B,GACZC,EAAOxvC,GAAQxmB,EAAK1/C,OAAS,EAAIuyD,EAAUptC,KAAKu6B,EAAKx/C,MAAMgmE,EAAO,IAC/DvoE,EAAI,EAAGA,EAAI+hD,EAAKwmB,GAAOvoE,IAC9Bo7C,EAAY,IAANp7C,EAAUy3G,EAAWI,iBAAiBl3D,EAAOk4B,EAAM92B,EAAM+1D,EAAa,EAAGpvE,EAAKsuC,EAAKL,GACzEA,EAAIv7B,EAAKq8D,EAAWI,iBAAiBl3D,EAAOk4B,EAAM92B,EAAM+1D,EAAa,EAAGpvE,EAAKsuC,EAAKL,IAClGjuC,GAAOqvE,EAET,OAAO38D,GAUF,EAAAs8D,gBAAP,SAAuB31D,EAAyB82B,EAAyBI,GAEvE,IADA,IAAMlH,EAAahwB,EAAKx/C,QACfvC,EAAI,EAAGA,EAAI64E,EAAKx2E,OAAQrC,IAE7B+xE,EAAW8G,EAAK74E,IADdi5E,EACoB,EAEA,EAG1B,OAAOlH,EAAW7X,QAAO,SAAAhX,GAAO,OAAQ,IAARA,MAEpC,EA5FA,GAAa,EAAAu0D,aA8Fb,+BA8LA,OArLS,EAAAhhC,qBAAP,SACID,EAA2BU,EAA8BnM,EAAuBlY,EAChFsY,GACF,IAAKqL,GAAoBzL,EAAY1oE,SAAW60E,EAAU70E,OAAS,EACjE,MAAM,IAAI4F,MAAM,sFAGlB,GAAIuuE,EAEF,IAAK,IAAItzB,EAAM,EAAGA,EAAMg0B,EAAU70E,OAAS,EAAG6gD,IACxCA,GAAO6nB,EAAY1oE,OACrB0oE,EAAYxhE,KAAK2tE,EAAUh0B,EAAM,IAEjC6nB,EAAY7nB,GAAOg0B,EAAUh0B,EAAM,GAMzC,IAASA,EAAM,EAAGA,EAAM6nB,EAAY1oE,OAAQ6gD,IAC1C,GAAIA,EAAM2P,EAAQxwD,QAChB,GAAIwwD,EAAQ3P,GAAO,EACjB,MAAM,IAAIj7C,MAAM,qDAGlB4qD,EAAQtpD,KAAK,GAKjB,IAAS25C,EAAM,EAAGA,EAA2B,EAArB6nB,EAAY1oE,OAAY6gD,IAC9C,GAAIA,EAAMioB,EAAK9oE,QACb,GAAI8oE,EAAKjoB,GAAO,EACd,MAAM,IAAIj7C,MAAM,iDAGlBkjE,EAAK5hE,KAAK,GAKd,IAAS25C,EAAM,EAAGA,EAAM6nB,EAAY1oE,OAAQ6gD,IAAO,CACjD,GAAI6nB,EAAY7nB,IAAQ,EACtB,MAAM,IAAIj7C,MAAM,2CAGlB,GAAIkjE,EAAKjoB,IAAQ6nB,EAAY7nB,IAAQioB,EAAKjoB,EAAM6nB,EAAY1oE,SAAW0oE,EAAY7nB,GACjF,MAAM,IAAIj7C,MAAM,wCAMf,EAAAgjE,yBAAP,SACIiM,EAA8BrkB,EAAmBqY,EAAqBH,EAAuBI,EAC7FC,GACF,GAAKA,EAAL,CAIA,GAAID,EAAK9oE,SAAW,GAAK60E,EAAU70E,OAAS,GAC1C,MAAM,IAAI4F,MAAM,gEAGlB,GAAI4qD,EAAQxwD,SAAY60E,EAAU70E,OAAS,EACzC,MAAM,IAAI4F,MAAM,6DAGlB,GAAI8iE,EAAY1oE,SAAY60E,EAAU70E,OAAS,EAC7C,MAAM,IAAI4F,MAAM,mEAGlB,IAAK,IAAIi7C,EAAM,EAAGA,EAAMg0B,EAAU70E,OAAS,EAAG6gD,IAC5C8nB,EAAagtC,wBACT9gC,EAAUh0B,EAAM,GAAI2P,EAAQ3P,GAAMgoB,EAAUhoB,GAAM6nB,EAAY7nB,GAAMioB,EAAMjoB,EAAKA,EAAMg0B,EAAU70E,OAAS,EACxG+oE,KAcD,EAAAsL,uBAAP,SACIF,EAA2BU,EAA8BrkB,EAAmBkY,EAAuBI,EACnGC,GACF,GAAI8L,EAAU70E,QAAU,EACtB,MAAM,IAAI4F,MAAM,8CAIlB,IAAM8pE,EAAa,CAACmF,EAAU,GAAIA,EAAU,IAGtChM,EAAY,IAAI78C,MAAc08C,EAAY1oE,QAAQiwF,KAAK,GAI7D,OAFAtnB,EAAaitC,mBACTzhC,EAAkBU,EAAWnF,EAAYlf,EAASqY,EAAWH,EAAaI,EAAMC,GAC7E2G,GAaF,EAAAmmC,uBAAP,SACIhhC,EAA8BihC,EAA+BtlD,EAAmBqY,EAChFH,EAAuBI,EAAgBC,GACzC,GAAI8L,EAAU70E,QAAU,GAAK81G,EAAW91G,QAAU,EAChD,MAAM,IAAI4F,MAAM,2DAIlB,IAAM8pE,EAAa,CAACmF,EAAU,GAAIihC,EAAW,IAG7C,OADAntC,EAAaitC,oBAAmB,EAAO/gC,EAAWnF,EAAYlf,EAASqY,EAAWH,EAAaI,EAAMC,GAC9F2G,GAMM,EAAAkmC,mBAAf,SACIzhC,EAA2BU,EAA8BnF,EAAsBlf,EAC/EqY,EAA8BH,EAAgCI,EAAgBC,GAChF,GAAIoL,EACF,IAAK,IAAItzB,EAAM,EAAGA,EAAMg0B,EAAU70E,OAAS,EAAG6gD,IAC5C6uB,EAAWxoE,KAAK,QAGlB,IAAS25C,EAAM,EAAGA,EAAMg0B,EAAU70E,OAAS,EAAG6gD,IAC5C6uB,EAAWxoE,KAAKyhE,EAAagtC,wBACzB9gC,EAAUh0B,EAAM,GAAI2P,EAAQ3P,GAAMgoB,EAAUhoB,GAAM6nB,EAAY7nB,GAAMioB,EAAMjoB,EAAKA,EAAMg0B,EAAU70E,OAAS,EACxG+oE,KAOK,EAAA4sC,wBAAf,SACII,EAAgBplD,EAAgBqlD,EAAkBnoC,EAAgB/E,EAAgBmtC,EAClFC,EAAsBntC,GACxB,IAAMotC,EAAUH,GAAYnoC,EAAS,GAAK,EAC1C,IAAI9E,GAAuB,WAAZA,EAsBb,OAAO3rD,KAAK+pB,OAAQ4uE,EAASjtC,EAAKmtC,GAAgBntC,EAAKotC,GAAgBC,GAAWxlD,EAAU,GArB5F,OAAQoY,GACN,IAAK,QAGH,OAFAD,EAAKmtC,GAAgB,EACrBntC,EAAKotC,GAAgB,EACd94F,KAAK+pB,OAAQ4uE,EAASI,GAAWxlD,EAAU,GACpD,IAAK,aACL,IAAK,aACH,GAAiB,IAAbqlD,EACF,MAAM,IAAIpwG,MAAM,uDAEhB,IACMwwG,IADoBL,EAASplD,EAAS,GAAKA,EACX,GAAKA,EAASkd,EAASkoC,EAI7D,OAHAjtC,EAAKmtC,GACY,eAAZltC,EAA4B3rD,KAAK+pB,OAAOivE,EAAY,GAAK,GAAKh5F,KAAK+pB,MAAMivE,EAAY,GAC1FttC,EAAKotC,GAAgBE,EAAYttC,EAAKmtC,GAC/B74F,KAAK+pB,OAAQ4uE,EAASK,EAAYvoC,GAAUld,EAAU,GAEjE,QACE,MAAM,IAAI/qD,MAAM,8BAM1B,EA9LA,GAAa,EAAA+iE,gB,mbClhCb,cAMa,EAAA0tC,oBACT,SAAC74D,EAAkCvlB,EAAgBq+E,EAClDvtD,GACC,GAAsB,iBAAXvL,GAAmC,OAAZA,EAAkB,CAClD,GAAI84D,EAAK5/C,IAAIlZ,GACX,MAAM,IAAI53C,MAAM,iCAEhB0wG,EAAKx9F,IAAI0kC,GAIbrU,OAAOotE,QAAQ/4D,GAAS94B,SAAQ,SAAC,G,IAAA,SAAC6O,EAAG,KAAE0G,EAAK,KACpChV,EAAO,EAAWgT,EAAS1E,EAAMA,EACvC,GAAqB,iBAAV0G,EACT,EAAAo8E,oBAAoBp8E,EAAkChV,EAAO,IAAKqxF,EAAMvtD,QACnE,GAAqB,iBAAV9uB,GAAuC,iBAAVA,EAC7C8uB,EAAQ9jC,EAAMgV,EAAMxO,gBACf,IAAqB,kBAAVwO,EAGhB,MAAM,IAAIr0B,MAAM,0CAA0Cq0B,GAF1D8uB,EAAQ9jC,EAAM,EAAU,IAAM,UAO3B,EAAAuxF,gBAAkB,SAACjiG,EAAckiG,GAC5C,IAAMtjE,EAAO,EAAAujE,cAEPC,EAAaxjE,EAAKvgB,gBAAgBre,GAAQ,EAC1CqiG,EAAazjE,EAAKpkB,QAAQ4nF,GAIhC,OAHAxjE,EAAKxgB,aAAape,EAAMqiG,EAAYD,GACpCF,EAAOvvG,KAAK0vG,GAELA,I,yGCrCT,cACA,UAEa,EAAAC,cAAgB,SAACr5D,GAC5B,IAAMrK,EAAO,EAAAujE,cACTI,EAAmB,EACjBL,EAAmB,GAEnBM,EAA0Cv5D,GAAW,GAE3D,IACE,QAAkCtqB,KAA9BsqB,aAAO,EAAPA,EAASw5D,kBACXD,EAAWC,iBAAmB,OACzB,GACiC,iBAA7Bx5D,EAAQw5D,mBAAkCtuF,OAAOw0B,UAAUM,EAAQw5D,mBAC1Ex5D,EAAQw5D,iBAAmB,GAAKx5D,EAAQw5D,iBAAmB,EAC7D,MAAM,IAAIpxG,MAAM,qCAAqC43C,EAAQw5D,kBAG/D,QAAmC9jF,KAA/BsqB,aAAO,EAAPA,EAASy5D,mBACXF,EAAWE,kBAAoB,OAC1B,GAAyC,iBAA9Bz5D,EAAQy5D,oBAAmCvuF,OAAOw0B,UAAUM,EAAQy5D,mBACpF,MAAM,IAAIrxG,MAAM,qCAAqC43C,EAAQy5D,wBAGpC/jF,KAAvBsqB,aAAO,EAAPA,EAASnrC,aACX0kG,EAAW1kG,WAAY,GAGzB,IAAI6kG,EAAgB,EAOpB,QANqBhkF,KAAjBsqB,aAAO,EAAPA,EAASZ,OACXs6D,EAAgB,EAAAV,gBAAgBh5D,EAAQZ,IAAK65D,IAKtB,KAFzBK,EAAmB3jE,EAAK5kB,qBACpBwoF,EAAWC,iBAAmBD,EAAWE,oBAAsBF,EAAW1kG,UAAY6kG,IAExF,MAAM,IAAItxG,MAAM,4BAclB,YAXuBstB,KAAnBsqB,aAAO,EAAPA,EAAS25D,QACX,EAAAd,oBAAoB74D,EAAQ25D,MAAO,GAAI,IAAIC,SAAoC,SAAC7jF,EAAK0G,GACnF,IAAMo9E,EAAgB,EAAAb,gBAAgBjjF,EAAKkjF,GACrCa,EAAkB,EAAAd,gBAAgBv8E,EAAOw8E,GAE/C,GAAqF,IAAjFtjE,EAAK1kB,sBAAsBqoF,EAAkBO,EAAeC,GAC9D,MAAM,IAAI1xG,MAAM,iCAAiC2tB,EAAG,MAAM0G,MAKzD,CAAC68E,EAAkBL,GAC1B,MAAOj6G,GAKP,MAJyB,IAArBs6G,GACF3jE,EAAKxkB,sBAAsBmoF,GAE7BL,EAAO/xF,QAAQyuB,EAAKhkB,OACd3yB,K,6yDC3DV,IAOI+6G,EAPJ,UACA,UAEA,SACA,UACA,UAoCMC,EAA6B,SAAC7D,GAClC,OAAQA,GACN,KAAK,EAAA94D,KAAKyB,YAAYoE,SAASkvD,KAC7B,MAAO,OACT,KAAK,EAAA/0D,KAAKyB,YAAYoE,SAASmvD,MAC7B,MAAO,QACT,KAAK,EAAAh1D,KAAKyB,YAAYoE,SAASovD,KAC7B,MAAO,OACT,KAAK,EAAAj1D,KAAKyB,YAAYoE,SAASgvD,MAC7B,MAAO,QACT,KAAK,EAAA70D,KAAKyB,YAAYoE,SAASivD,OAC7B,MAAO,SACT,KAAK,EAAA90D,KAAKyB,YAAYoE,SAAS+uD,MAC7B,MAAO,QACT,KAAK,EAAA50D,KAAKyB,YAAYoE,SAASuvD,OAC7B,MAAO,SACT,KAAK,EAAAp1D,KAAKyB,YAAYoE,SAAS8J,MAC7B,MAAO,UACT,KAAK,EAAA3P,KAAKyB,YAAYoE,SAASsvD,OAC7B,MAAO,UACT,KAAK,EAAAn1D,KAAKyB,YAAYoE,SAASgK,OAC7B,MAAO,SACT,KAAK,EAAA7P,KAAKyB,YAAYoE,SAASqvD,MAC7B,MAAO,QACT,KAAK,EAAAl1D,KAAKyB,YAAYoE,SAASwvD,OAC7B,MAAO,SAET,QACE,MAAM,IAAItqG,MAAM,0BAA0B,EAAAi1C,KAAKyB,YAAYoE,SAASizD,MAIpE8D,EAAgC,SAAC79E,GAGjC,OAAQA,GACN,IAAK,UACH,OAAO50B,aACT,IAAK,QACH,OAAOnF,WACT,IAAK,OACH,OAAOwE,UACT,IAAK,SACH,OAAOO,YACT,IAAK,QACH,OAAOL,WACT,IAAK,QACH,OAAOE,WACT,IAAK,OACH,OAAO5E,WACT,IAAK,UACH,OAAOqF,aACT,IAAK,SACH,OAAOJ,YACT,IAAK,QACH,OAAO4yG,cACT,IAAK,SACH,OAAOC,eACT,QACE,MAAM,IAAI/xG,MAAM,qBAAqBg0B,KAqB/C,2BAqPA,OA7OE,YAAAuuB,UAAA,SAAU0sC,EAAmBr3C,G,MACrBrK,EAAO,EAAAujE,cACb,IAAKa,EAAS,CACZ,IAAMK,EAAYzkE,EAAKxmB,SAAS,EAAAwR,IAAIgV,KAAKsV,WA5B3B,SAACgqC,GACnB,OAAQA,GACN,IAAK,UACH,OAAO,EACT,IAAK,OACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,QACE,MAAM,IAAI7sF,MAAM,8BAA8B6sF,IAeQolB,CAAY,EAAA15E,IAAIs0D,WACtE,GAAkB,IAAdmlB,EACF,MAAM,IAAIhyG,MAAM,8CAA8CgyG,GAEhEL,GAAU,EAGZ,IAAMO,EAAkB3kE,EAAKpkB,QAAQ8lE,EAAMhvF,YACvCkyG,EAAuB,EACvBtB,EAAmB,GAEvB,IAKE,GAJCsB,GAAD,IAAiC,EAAAC,kBAAkBx6D,GAAQ,IAAtC,GAAEi5D,EAAM,KAE7BtjE,EAAKzuC,OAAOT,IAAI4wF,EAAOijB,GACvB9/F,KAAKigG,cAAgB9kE,EAAKhmB,kBAAkB2qF,EAAiBjjB,EAAMhvF,WAAYkyG,GACpD,IAAvB//F,KAAKigG,cACP,MAAM,IAAIryG,MAAM,0B,QAGlButC,EAAKhkB,MAAM2oF,GACX3kE,EAAKlmB,0BAA0B8qF,GAC/BtB,EAAO/xF,QAAQyuB,EAAKhkB,OAGtB,IAAM+oF,EAAa/kE,EAAK5lB,kBAAkBvV,KAAKigG,eACzCE,EAAchlE,EAAK1lB,mBAAmBzV,KAAKigG,eAEjDjgG,KAAKo0F,WAAa,GAClBp0F,KAAKogG,sBAAwB,GAC7BpgG,KAAKq0F,YAAc,GACnBr0F,KAAKqgG,uBAAyB,GAC9B,IAAK,IAAI16G,EAAI,EAAGA,EAAIu6G,EAAYv6G,IAAK,CACnC,IAAM,EAAOw1C,EAAKxlB,iBAAiB3V,KAAKigG,cAAet6G,GACvD,GAAa,IAAT,EACF,MAAM,IAAIiI,MAAM,2BAElBoS,KAAKogG,sBAAsBlxG,KAAK,GAChC8Q,KAAKo0F,WAAWllG,KAAKisC,EAAKzgB,aAAa,IAEzC,IAAS/0B,EAAI,EAAGA,EAAIw6G,EAAax6G,IAAK,CACpC,IAAM,EAAOw1C,EAAKtlB,kBAAkB7V,KAAKigG,cAAet6G,GACxD,GAAa,IAAT,EACF,MAAM,IAAIiI,MAAM,4BAElBoS,KAAKqgG,uBAAuBnxG,KAAK,GACjC8Q,KAAKq0F,YAAYnlG,KAAKisC,EAAKzgB,aAAa,MAItC,YAAAg6B,QAAN,W,gFACQvZ,EAAO,EAAAujE,cACT1+F,KAAKogG,wBACPpgG,KAAKogG,sBAAsB1zF,QAAQyuB,EAAKplB,UACxC/V,KAAKogG,sBAAwB,IAE3BpgG,KAAKqgG,yBACPrgG,KAAKqgG,uBAAuB3zF,QAAQyuB,EAAKplB,UACzC/V,KAAKqgG,uBAAyB,IAE5BrgG,KAAKigG,gBACP9kE,EAAK9lB,mBAAmBrV,KAAKigG,eAC7BjgG,KAAKigG,cAAgB,G,WAInB,YAAAllF,IAAN,SAAUu5E,EAAiCgM,EAAqC96D,G,0JAExErK,EAAO,EAAAujE,cAEP6B,EAAuB,GACvBC,EAAyB,GAC/BrvE,OAAOotE,QAAQjK,GAAO5nF,SAAQ,SAAA+zF,GAC5B,IAAMxzF,EAAOwzF,EAAI,GACXp8C,EAASo8C,EAAI,GACbl3E,EAAQ,EAAK6qE,WAAW5qG,QAAQyjB,GACtC,IAAe,IAAXsc,EACF,MAAM,IAAI37B,MAAM,kBAAkBqf,EAAI,KAExC,GAAoB,WAAhBo3C,EAAOziC,KAET,MAAM,IAAI4Y,UAAU,kCAEtB+lE,EAAWrxG,KAAKm1D,GAChBm8C,EAAatxG,KAAKq6B,MAGdixE,EAA0B,GAChCrpE,OAAOotE,QAAQ+B,GAAS5zF,SAAQ,SAAA+zF,GAC9B,IAAMxzF,EAAOwzF,EAAI,GAEXl3E,EAAQ,EAAK8qE,YAAY7qG,QAAQyjB,GACvC,IAAe,IAAXsc,EACF,MAAM,IAAI37B,MAAM,mBAAmBqf,EAAI,KAEzCutF,EAActrG,KAAKq6B,MAGf22E,EAAaM,EAAax4G,OAC1Bm4G,EAAc3F,EAAcxyG,OAE9B82G,EAAmB,EACnBL,EAAmB,GAEjBiC,EAAwB,GACxBC,EAA6B,GAEnC,IAIE,IAHA,IAA6B,EAAA9B,cAAcr5D,GAAQ,GAAlDs5D,EAAgB,KAAEL,EAAM,K,WAGhB94G,GACP,IAAM4W,EAAOgkG,EAAW56G,GAAG4W,KAC3B,GAAIyX,MAAMmxB,QAAQ5oC,GAEhB,MAAM,IAAIi+B,UAAU,kCAEpB,IAAMokE,EAAazjE,EAAKpkB,QAAQxa,EAAK1O,YACrC8yG,EAAiBzxG,KAAK0vG,GACtBzjE,EAAKzuC,OAAOT,IAAI,IAAIpE,WAAW0U,EAAKxX,OAAQwX,EAAKs3C,WAAYt3C,EAAK1O,YAAa+wG,GAE/E,IAAMl3D,EAAO64D,EAAW56G,GAAG+hD,KAErB73C,EAAQsrC,EAAK1hB,YACbkwE,EAAaxuD,EAAKthB,WAAW,EAAI6tB,EAAK1/C,QAC5C,IACE,IAAI,EAAW2hG,EAAa,EAC5BjiD,EAAKh7B,SAAQ,SAAAtmB,GAAK,OAAA+0C,EAAK3uC,OAAO,KAAcpG,KAC5C,IAAMi+D,EAASlpB,EAAKllB,iBA3PG,SAAC2L,GAClC,OAAQA,GACN,IAAK,OACH,OAAO,EAAAihB,KAAKyB,YAAYoE,SAASkvD,KACnC,IAAK,QACH,OAAO,EAAA/0D,KAAKyB,YAAYoE,SAASmvD,MACnC,IAAK,OACH,OAAO,EAAAh1D,KAAKyB,YAAYoE,SAASovD,KACnC,IAAK,QACH,OAAO,EAAAj1D,KAAKyB,YAAYoE,SAASgvD,MACnC,IAAK,SACH,OAAO,EAAA70D,KAAKyB,YAAYoE,SAASivD,OACnC,IAAK,QACH,OAAO,EAAA90D,KAAKyB,YAAYoE,SAAS+uD,MACnC,IAAK,SACH,OAAO,EAAA50D,KAAKyB,YAAYoE,SAASuvD,OACnC,IAAK,UACH,OAAO,EAAAp1D,KAAKyB,YAAYoE,SAAS8J,MACnC,IAAK,UACH,OAAO,EAAA3P,KAAKyB,YAAYoE,SAASsvD,OACnC,IAAK,SACH,OAAO,EAAAn1D,KAAKyB,YAAYoE,SAASgK,OACnC,IAAK,QACH,OAAO,EAAA7P,KAAKyB,YAAYoE,SAASqvD,MACnC,IAAK,SACH,OAAO,EAAAl1D,KAAKyB,YAAYoE,SAASwvD,OAEnC,QACE,MAAM,IAAItqG,MAAM,0BAA0Bg0B,IAgOhCg6E,CAA2B2E,EAAW56G,GAAGi8B,MAAOg9E,EAAYriG,EAAK1O,WAAY87F,EAAYjiD,EAAK1/C,QAClG,GAAe,IAAXq8D,EACF,MAAM,IAAIz2D,MAAM,yBAElB8yG,EAAYxxG,KAAKm1D,G,QAEjBlpB,EAAKxhB,aAAa9pB,KAxBflK,EAAI,EAAGA,EAAIu6G,EAAYv6G,I,EAAvBA,GA6BHi7G,EAAiBzlE,EAAK1hB,YACtBonF,EAAoB1lE,EAAKthB,WAAwB,EAAbqmF,GACpCY,EAAmB3lE,EAAKthB,WAAwB,EAAbqmF,GACnCa,EAAqB5lE,EAAKthB,WAAyB,EAAdsmF,GACrCa,EAAoB7lE,EAAKthB,WAAyB,EAAdsmF,GAE1C,IAKE,IAJIc,EAAmBJ,EAAoB,EACvCK,EAAkBJ,EAAmB,EACrCK,EAAoBJ,EAAqB,EACzCK,EAAmBJ,EAAoB,EAClCr7G,EAAI,EAAGA,EAAIu6G,EAAYv6G,IAC9Bw1C,EAAKtuC,QAAQo0G,KAAsBP,EAAY/6G,GAC/Cw1C,EAAKtuC,QAAQq0G,KAAqBlhG,KAAKogG,sBAAsBI,EAAa76G,IAE5E,IAASA,EAAI,EAAGA,EAAIw6G,EAAax6G,IAC/Bw1C,EAAKtuC,QAAQs0G,KAAuB,EACpChmE,EAAKtuC,QAAQu0G,KAAsBphG,KAAKqgG,uBAAuB7F,EAAc70G,IAU/E,GANIi6G,EAAYzkE,EAAKtkB,QACjB7W,KAAKigG,cAAea,EAAkBD,EAAmBX,EAAYc,EAAmBb,EACxFY,EAAoBjC,GAElB/9E,EAAmC,GAEvB,IAAd6+E,EACF,IAASj6G,EAAI,EAAGA,EAAIw6G,EAAax6G,IAAK,CAC9B0+D,EAASlpB,EAAKtuC,QAAQk0G,EAAqB,EAAIp7G,GAE/C07G,EAA2BlmE,EAAK1hB,YAEhC6nF,EAAmBnmE,EAAKthB,WAAW,IACzC,IAGE,GAAkB,KAFlB+lF,EAAYzkE,EAAKhlB,kBACbkuC,EAAQi9C,EAAkBA,EAAmB,EAAGA,EAAmB,EAAGA,EAAmB,KAE3F,MAAM,IAAI1zG,MAAM,yCAAyCgyG,GAQ3D,IANI2B,EAAkBD,EAAmB,EACnCp5D,EAAW/M,EAAKtuC,QAAQ00G,KACxB3C,EAAqBzjE,EAAKtuC,QAAQ00G,KAClC5X,EAAaxuD,EAAKtuC,QAAQ00G,KAC1BlY,EAAaluD,EAAKtuC,QAAQ00G,KAC1B75D,EAAO,GACJ,EAAI,EAAG,EAAI2hD,EAAY,IAC9B3hD,EAAKx4C,KAAKisC,EAAKtuC,QAAQ88F,EAAa,EAAI,IAK1C,GAHAxuD,EAAKplB,SAAS4zE,GAGD,YADP/nE,EAAO49E,EAA2Bt3D,IAGtC,MAAM,IAAI1N,UAAU,kCAEdgnE,EAAa/B,EAA8B79E,GAC3CzU,EAAuB,IAAhBu6B,EAAK1/C,OAAe,EAAI0/C,EAAKy2B,QAAO,SAAC54E,EAAGkC,GAAM,OAAAlC,EAAIkC,KACzD5C,EAAI,IAAI,EAAA0kD,OAAO3nB,EAAM,IAAI4/E,EAAWr0F,GAAOu6B,GACjD,IAAI7/C,WAAWhD,EAAE0X,KAAKxX,OAAQF,EAAE0X,KAAKs3C,WAAYhvD,EAAE0X,KAAK1O,YACnD5B,IAAIkvC,EAAKzuC,OAAO8wB,SAASohF,EAAYA,EAAa/5G,EAAE0X,KAAK1O,aAC9DkzB,EAAO/gB,KAAKq0F,YAAYmG,EAAc70G,KAAOd,E,QAG/Cs2C,EAAKxhB,aAAa0nF,GAClBlmE,EAAK9kB,kBAAkBguC,IAK7B,GAAkB,IAAdu7C,EACF,MAAO,CAAP,EAAO7+E,GAEP,MAAM,IAAInzB,MAAM,yCAAyCgyG,EAAS,K,QAGpEzkE,EAAKxhB,aAAainF,I,QAGpBF,EAAYh0F,QAAQyuB,EAAK9kB,mBACzBsqF,EAAiBj0F,QAAQyuB,EAAKhkB,OAE9BgkB,EAAKxkB,sBAAsBmoF,GAC3BL,EAAO/xF,QAAQyuB,EAAKhkB,O,iBAIxB,YAAAy9E,eAAA,aAIA,YAAAC,aAAA,aAGF,EArPA,GAAa,EAAA7jD,wC,8GCvHb,cACA,UA4Ba,EAAAgvD,kBAAoB,SAACx6D,GAChC,IAAMrK,EAAO,EAAAujE,cACTqB,EAAuB,EACrBtB,EAAmB,GAEnBgD,EAAkDj8D,GAAW,GAEnE,SAC0CtqB,KAApCsqB,aAAO,EAAPA,EAASk8D,0BACXD,EAAeC,uBAAyB,OAE1C,IAAMA,EArCuB,SAACA,GAChC,OAAQA,GACN,IAAK,WACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,IAAK,MACH,OAAO,GACT,QACE,MAAM,IAAI9zG,MAAM,yCAAyC8zG,IA0B5BC,CAAyBF,EAAeC,6BAEpCxmF,KAA/BsqB,aAAO,EAAPA,EAASo8D,qBACXH,EAAeG,mBAAoB,QAGH1mF,KAA9BsqB,aAAO,EAAPA,EAASq8D,oBACXJ,EAAeI,kBAAmB,QAGL3mF,KAA3BsqB,aAAO,EAAPA,EAASs8D,iBACXL,EAAeK,cAAgB,cAEjC,IAAMA,EAnCe,SAACA,GACxB,OAAQA,GACN,IAAK,aACH,OAAO,EACT,IAAK,WACH,OAAO,EACT,QACE,MAAM,IAAIl0G,MAAM,+BAA+Bk0G,IA4B3BC,CAAiBN,EAAeK,eAElDE,EAAkB,EAKtB,QAJuB9mF,KAAnBsqB,aAAO,EAAPA,EAASy8D,SACXD,EAAkB,EAAAxD,gBAAgBh5D,EAAQy8D,MAAOxD,SAGjBvjF,KAA9BsqB,aAAO,EAAPA,EAASw5D,kBACXyC,EAAezC,iBAAmB,OAC7B,GACiC,iBAA7Bx5D,EAAQw5D,mBAAkCtuF,OAAOw0B,UAAUM,EAAQw5D,mBAC1Ex5D,EAAQw5D,iBAAmB,GAAKx5D,EAAQw5D,iBAAmB,EAC7D,MAAM,IAAIpxG,MAAM,qCAAqC43C,EAAQw5D,kBAG/D,QAAmC9jF,KAA/BsqB,aAAO,EAAPA,EAASy5D,mBACXwC,EAAexC,kBAAoB,OAC9B,GAAyC,iBAA9Bz5D,EAAQy5D,oBAAmCvuF,OAAOw0B,UAAUM,EAAQy5D,mBACpF,MAAM,IAAIrxG,MAAM,qCAAqC43C,EAAQy5D,mBAU/D,GANAwC,EAAeS,iBAAkB,EAMJ,KAJ7BnC,EAAuB5kE,EAAKtmB,yBACxB6sF,IAA0BD,EAAeG,oBAAsBH,EAAeI,iBAAmBC,EACjGL,EAAeS,gBAAiB,EAAGF,EAAiBP,EAAezC,iBACnEyC,EAAexC,oBAEjB,MAAM,IAAIrxG,MAAM,gCAclB,YAXuBstB,KAAnBsqB,aAAO,EAAPA,EAAS25D,QACX,EAAAd,oBAAoB74D,EAAQ25D,MAAO,GAAI,IAAIC,SAAoC,SAAC7jF,EAAK0G,GACnF,IAAMo9E,EAAgB,EAAAb,gBAAgBjjF,EAAKkjF,GACrCa,EAAkB,EAAAd,gBAAgBv8E,EAAOw8E,GAE/C,GAA6F,IAAzFtjE,EAAKpmB,0BAA0BgrF,EAAsBV,EAAeC,GACtE,MAAM,IAAI1xG,MAAM,qCAAqC2tB,EAAG,MAAM0G,MAK7D,CAAC89E,EAAsBtB,GAC9B,MAAOj6G,GAKP,MAJ6B,IAAzBu7G,GACF5kE,EAAKlmB,0BAA0B8qF,GAEjCtB,EAAO/xF,QAAQyuB,EAAKhkB,OACd3yB,K,knECxGV,IAQI22C,EARJ,UACA,aAIA,aACA,YAGIgnE,GAAc,EACdC,GAAe,EACfC,GAAU,EAqBD,EAAAzxD,sBAAwB,qD,gEACnC,GAAIuxD,EACF,MAAO,CAAP,EAAOp8G,QAAQkL,WAEjB,GAAImxG,EACF,MAAM,IAAIx0G,MAAM,yDAElB,GAAIy0G,EACF,MAAM,IAAIz0G,MAAM,sDAmElB,OAhEAw0G,GAAe,EAGTE,EAAU,EAAAn8E,IAAIgV,KAAKqV,YACnBC,EAAa,EAAAtqB,IAAIgV,KAAKsV,WAEtB8xD,EAAa9xD,EAAa,GApCH,WAC7B,IASE,MAN8B,oBAAnB+xD,iBACT,IAAIA,gBAAiBC,MAAM9nG,YAAY,IAAIhN,kBAAkB,IAKxDvC,YAAYs3G,SAAS,IAAI76G,WAAW,CACzC,EAAG,GAAI,IAAK,IAAK,EAAG,EAAI,EAAI,EAAG,EAAG,EAAG,EAAI,GAAI,EAAK,EAAI,EAAG,EAAG,EAAI,EAAG,EACnE,EAAG,EAAI,EAAK,EAAK,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAI,IAAK,GAAI,EAAG,EAAG,GAAI,MAElE,MAAOrD,GACP,OAAO,GAqB4Bm+G,GACjCC,GAAY,EAEVC,EAA8B,GAGhCP,EAAU,GACZO,EAAM3zG,KAAK,IAAInJ,SAAQ,SAACkL,GACtBc,YAAW,WACT6wG,GAAY,EACZ3xG,MACCqxG,OAKPO,EAAM3zG,KAAK,IAAInJ,SAAQ,SAACkL,EAASqqB,GAC/B,IAAM0S,EAAUu0E,EAAa,UAAyB,UAChDj4B,EAAiC,GAEvC,GAAIi4B,EACF,GAAoB,oBAATO,KACTx4B,EAAO5sE,oBAAsB0e,EAAKoR,KAAK9lC,UAAW,4BAC7C,CACL,IAAMq7G,EACF,yDAAyD,UAAuBtvF,WAAU,QAC9F62D,EAAO5sE,oBAAsB,IAAIolG,KAAK,CAACC,GAAmB,CAACnhF,KAAM,oBACjE0oD,EAAO9iF,WAAa,SAACw7G,EAAkB7mF,GACrC,OAAI6mF,EAAS9jB,SAAS,cACb+jB,IAAIC,gBAAgB,IAAIJ,KAC3B,CAGE,EAAQ,OAEV,CAAClhF,KAAM,qBAENzF,EAAkB6mF,GAK/Bh1E,EAAQs8C,GAAQz5E,MAEZ,SAAAW,GACE4wG,GAAe,EACfD,GAAc,EACdhnE,EAAO3pC,EACPP,OAGF,SAAC8uB,GACCqiF,GAAe,EACfC,GAAU,EACV/mF,EAAOyE,UAIf,GAAMh6B,QAAQo9G,KAAKN,I,OAEnB,GAFA,SAEID,EACF,MAAM,IAAIh1G,MAAM,2DAA2D00G,EAAO,M,kBAIzE,EAAA5D,YAAc,WACzB,GAAIyD,EACF,OAAOhnE,EAGT,MAAM,IAAIvtC,MAAM,wCAGL,EAAA8mD,QAAU,W,OACjBytD,GAAgBC,GAAiBC,IACnCD,GAAe,EAEwB,QAAtC,EAAAjnE,EAA+BtgB,eAAO,SAAEhf,sBAEzCumG,GAAe,EACfD,GAAc,EACdE,GAAU,K,8BCrId7wG,EAAOJ,QAAUgyG,QAAQ,O,8BCAzB5xG,EAAOJ,QAAUgyG,QAAQ,O,8BCAzB5xG,EAAOJ,QAAUgyG,QAAQ,S,6BCAzB5xG,EAAOJ,QAAUgyG,QAAQ,e,8BCAzB5xG,EAAOJ,QAAUgyG,QAAQ,S,8BCAzB5xG,EAAOJ,QAAUgyG,QAAQ,mB,8BCAzB5xG,EAAOJ,QAAUgyG,QAAQ,wBCCrBC,yBAA2B,GAG/B,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqBroF,IAAjBsoF,EACH,OAAOA,EAAapyG,QAGrB,IAAII,EAAS6xG,yBAAyBE,GAAY,CAGjDnyG,QAAS,IAOV,OAHAqyG,oBAAoBF,GAAU/xE,KAAKhgC,EAAOJ,QAASI,EAAQA,EAAOJ,QAASkyG,qBAGpE9xG,EAAOJ,QCpBfkyG,oBAAoBl9G,EAAI,SAASgL,EAASsyG,GACzC,IAAI,IAAInoF,KAAOmoF,EACXJ,oBAAoB79G,EAAEi+G,EAAYnoF,KAAS+nF,oBAAoB79G,EAAE2L,EAASmqB,IAC5E4V,OAAOqK,eAAepqC,EAASmqB,EAAK,CAAEooF,YAAY,EAAMvxG,IAAKsxG,EAAWnoF,MCJ3E+nF,oBAAoB79G,EAAI,SAAS6wC,EAAKqX,GAAQ,OAAOxc,OAAOnhC,UAAU9J,eAAesrC,KAAK8E,EAAKqX,ICC/F21D,oBAAoBn+G,EAAI,SAASiM,GACX,oBAAXwyG,QAA0BA,OAAOC,aAC1C1yE,OAAOqK,eAAepqC,EAASwyG,OAAOC,YAAa,CAAE5hF,MAAO,WAE7DkP,OAAOqK,eAAepqC,EAAS,aAAc,CAAE6wB,OAAO,KCFvD,IAAI6hF,oBAAsBR,oBAAoB,M","file":"ort-web.node.js","sourcesContent":["var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e){function t(){return D.buffer!=I&&Z(D.buffer),F}function r(){return D.buffer!=I&&Z(D.buffer),L}function n(){return D.buffer!=I&&Z(D.buffer),P}function a(){return D.buffer!=I&&Z(D.buffer),H}function o(){return D.buffer!=I&&Z(D.buffer),W}var i,u,s=void 0!==(e=e||{})?e:{};s.ready=new Promise((function(e,t){i=e,u=t}));var c,f={};for(c in s)s.hasOwnProperty(c)&&(f[c]=s[c]);var l=[],d=\"./this.program\",m=function(e,t){throw t},p=!1,h=!1,g=!1,_=!1;p=\"object\"==typeof window,h=\"function\"==typeof importScripts,g=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,_=!p&&!g&&!h;var E=s.ENVIRONMENT_IS_PTHREAD||!1;E&&(I=s.buffer);var v,y,T,O,w,S=\"\";function A(e){return s.locateFile?s.locateFile(e,S):S+e}if(g){var b;S=h?require(\"path\").dirname(S)+\"/\":__dirname+\"/\",v=function(e,t){return O||(O=require(\"fs\")),w||(w=require(\"path\")),e=w.normalize(e),O.readFileSync(e,t?null:\"utf8\")},T=function(e){var t=v(e,!0);return t.buffer||(t=new Uint8Array(t)),B(t.buffer),t},process.argv.length>1&&(d=process.argv[1].replace(/\\\\/g,\"/\")),l=process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof ln))throw e})),process.on(\"unhandledRejection\",_e),m=function(e){process.exit(e)},s.inspect=function(){return\"[Emscripten Module object]\"};try{b=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=b.Worker}else _?(\"undefined\"!=typeof read&&(v=function(e){return read(e)}),T=function(e){var t;return\"function\"==typeof readbuffer?new Uint8Array(readbuffer(e)):(B(\"object\"==typeof(t=read(e,\"binary\"))),t)},\"undefined\"!=typeof scriptArgs?l=scriptArgs:void 0!==arguments&&(l=arguments),\"function\"==typeof quit&&(m=function(e){quit(e)}),\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(p||h)&&(h?S=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(S=document.currentScript.src),_scriptDir&&(S=_scriptDir),S=0!==S.indexOf(\"blob:\")?S.substr(0,S.lastIndexOf(\"/\")+1):\"\",g?(v=function(e,t){return O||(O=require(\"fs\")),w||(w=require(\"path\")),e=w.normalize(e),O.readFileSync(e,t?null:\"utf8\")},T=function(e){var t=v(e,!0);return t.buffer||(t=new Uint8Array(t)),B(t.buffer),t}):(v=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},h&&(T=function(e){var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),y=function(e,t,r){var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=function(){200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));g&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var C,x,D,k,R=s.print||console.log.bind(console),N=s.printErr||console.warn.bind(console);for(c in f)f.hasOwnProperty(c)&&(s[c]=f[c]);function M(e){M.shown||(M.shown={}),M.shown[e]||(M.shown[e]=1,N(e))}f=null,s.arguments&&(l=s.arguments),s.thisProgram&&(d=s.thisProgram),s.quit&&(m=s.quit),Atomics.load,Atomics.store,Atomics.compareExchange,s.wasmBinary&&(C=s.wasmBinary),s.noExitRuntime&&(x=s.noExitRuntime),\"object\"!=typeof WebAssembly&&_e(\"no native wasm support detected\");var I,F,L,P,H,W,U=!1;function B(e,t){e||_e(\"Assertion failed: \"+t)}function G(e,t,r){for(var n=t+r,a=\"\";!(t>=n);){var o=e[t++];if(!o)return a;if(128&o){var i=63&e[t++];if(192!=(224&o)){var u=63&e[t++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&e[t++])<65536)a+=String.fromCharCode(o);else{var s=o-65536;a+=String.fromCharCode(55296|s>>10,56320|1023&s)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function Y(e,t){return e?G(r(),e,t):\"\"}function j(e,t,r,n){if(!(n>0))return 0;for(var a=r,o=r+n-1,i=0;i<e.length;++i){var u=e.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++i)),u<=127){if(r>=o)break;t[r++]=u}else if(u<=2047){if(r+1>=o)break;t[r++]=192|u>>6,t[r++]=128|63&u}else if(u<=65535){if(r+2>=o)break;t[r++]=224|u>>12,t[r++]=128|u>>6&63,t[r++]=128|63&u}else{if(r+3>=o)break;t[r++]=240|u>>18,t[r++]=128|u>>12&63,t[r++]=128|u>>6&63,t[r++]=128|63&u}}return t[r]=0,r-a}function z(e,t,n){return j(e,r(),t,n)}function q(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++r)),n<=127?++t:t+=n<=2047?2:n<=65535?3:4}return t}function V(e){var r=q(e)+1,n=Wr(r);return n&&j(e,t(),n,r),n}function X(e,r){t().set(e,r)}function Q(e,r,n){for(var a=0;a<e.length;++a)t()[r++>>0]=e.charCodeAt(a);n||(t()[r>>0]=0)}function K(e,t){return e%t>0&&(e+=t-e%t),e}function Z(e){I=e,s.HEAP8=F=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=P=new Int32Array(e),s.HEAPU8=L=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=W=new Float64Array(e)}var J,$=s.INITIAL_MEMORY||16777216;if(E)D=s.wasmMemory,I=s.buffer;else if(s.wasmMemory)D=s.wasmMemory;else if(!((D=new WebAssembly.Memory({initial:$/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw N(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),g&&console.log(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)\"),Error(\"bad memory\");D&&(I=D.buffer),$=I.byteLength,Z(I);var ee=[],te=[],re=[],ne=[],ae=[];function oe(){if(!E){if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)fe(s.preRun.shift());De(ee)}}function ie(){De(te)}function ue(){E||De(re)}function se(){E||(De(ne),mr(),Le.runExitHandlers())}function ce(){if(!E){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;)le(s.postRun.shift());De(ae)}}function fe(e){ee.unshift(e)}function le(e){ae.unshift(e)}E||te.push({func:function(){Hr()}});var de=0,me=null,pe=null;function he(e){B(!E,\"addRunDependency cannot be used in a pthread worker\"),de++,s.monitorRunDependencies&&s.monitorRunDependencies(de)}function ge(e){if(de--,s.monitorRunDependencies&&s.monitorRunDependencies(de),0==de&&(null!==me&&(clearInterval(me),me=null),pe)){var t=pe;pe=null,t()}}function _e(e){s.onAbort&&s.onAbort(e),E&&console.error(\"Pthread aborting at \"+(new Error).stack),N(e+=\"\"),U=!0,e=\"abort(\"+e+\"). Build with -s ASSERTIONS=1 for more info.\";var t=new WebAssembly.RuntimeError(e);throw u(t),t}function Ee(e,t){return String.prototype.startsWith?e.startsWith(t):0===e.indexOf(t)}s.preloadedImages={},s.preloadedAudios={};var ve=\"data:application/octet-stream;base64,\";function ye(e){return Ee(e,ve)}var Te=\"file://\";function Oe(e){return Ee(e,Te)}var we=\"ort-wasm-threaded.wasm\";function Se(e){try{if(e==we&&C)return new Uint8Array(C);if(T)return T(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){_e(e)}}function Ae(){if(!C&&(p||h)){if(\"function\"==typeof fetch&&!Oe(we))return fetch(we,{credentials:\"same-origin\"}).then((function(e){if(!e.ok)throw\"failed to load wasm binary file at '\"+we+\"'\";return e.arrayBuffer()})).catch((function(){return Se(we)}));if(y)return new Promise((function(e,t){y(we,(function(t){e(new Uint8Array(t))}),t)}))}return Promise.resolve().then((function(){return Se(we)}))}function be(){var e={a:Pr};function t(e,t){var r=e.exports;s.asm=r,J=s.asm.Aa,k=t,E||ge()}function r(e){t(e.instance,e.module)}function n(t){return Ae().then((function(t){return WebAssembly.instantiate(t,e)})).then(t,(function(e){N(\"failed to asynchronously prepare wasm: \"+e),_e(e)}))}if(E||he(),s.instantiateWasm)try{return s.instantiateWasm(e,t)}catch(e){return N(\"Module.instantiateWasm callback failed with error: \"+e),!1}return(C||\"function\"!=typeof WebAssembly.instantiateStreaming||ye(we)||Oe(we)||\"function\"!=typeof fetch?n(r):fetch(we,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(r,(function(e){return N(\"wasm streaming compile failed: \"+e),N(\"falling back to ArrayBuffer instantiation\"),n(r)}))}))).catch(u),{}}ye(we)||(we=A(we));var Ce={673802:function(){throw\"Canceled!\"},674054:function(e,t){setTimeout((function(){Jr(e,t)}),0)}};function xe(){Le.initRuntime()}function De(e){for(;e.length>0;){var t=e.shift();if(\"function\"!=typeof t){var r=t.func;\"number\"==typeof r?void 0===t.arg?J.get(r)():J.get(r)(t.arg):r(void 0===t.arg?null:t.arg)}else t(s)}}var ke={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};function Re(e,r){if(e<=0||e>t().length||!0&e||r<0)return-28;if(0==r)return 0;r>=2147483647&&(r=1/0);var a=Atomics.load(n(),fn>>2),o=0;if(a==e&&Atomics.compareExchange(n(),fn>>2,a,0)==a&&(o=1,--r<=0))return 1;var i=Atomics.notify(n(),e>>2,r);if(i>=0)return i+o;throw\"Atomics.notify returned an unexpected value \"+i}function Ne(e){if(E)throw\"Internal Error! killThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in killThread!\";n()[e+12>>2]=0;var t=Le.pthreads[e];t.worker.terminate(),Le.freeThreadData(t),Le.runningWorkers.splice(Le.runningWorkers.indexOf(t.worker),1),t.worker.pthread=void 0}function Me(e){if(E)throw\"Internal Error! cancelThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cancelThread!\";Le.pthreads[e].worker.postMessage({cmd:\"cancel\"})}function Ie(e){if(E)throw\"Internal Error! cleanupThread() can only ever be called from main application thread!\";if(!e)throw\"Internal Error! Null pthread_ptr in cleanupThread!\";n()[e+12>>2]=0;var t=Le.pthreads[e];if(t){var r=t.worker;Le.returnWorkerToPool(r)}}s._emscripten_futex_wake=Re;var Fe,Le={unusedWorkers:[],runningWorkers:[],initMainThreadBlock:function(){},initRuntime:function(){for(var e=Wr(228),t=0;t<57;++t)a()[e/4+t]=0;n()[e+12>>2]=e;var r=e+152;n()[r>>2]=r;var o=Wr(512);for(t=0;t<128;++t)a()[o/4+t]=0;Atomics.store(a(),e+100>>2,o),Atomics.store(a(),e+40>>2,e),rn(e,!h,1),Kr(e)},initWorker:function(){},pthreads:{},threadExitHandlers:[],setThreadStatus:function(){},runExitHandlers:function(){for(;Le.threadExitHandlers.length>0;)Le.threadExitHandlers.pop()();E&&Gr()&&Xr()},threadExit:function(e){var t=Gr();t&&(Atomics.store(a(),t+4>>2,e),Atomics.store(a(),t+0>>2,1),Atomics.store(a(),t+56>>2,1),Atomics.store(a(),t+60>>2,0),Le.runExitHandlers(),Re(t+0,2147483647),rn(0,0,0),E&&postMessage({cmd:\"exit\"}))},threadCancel:function(){Le.runExitHandlers();var e=Gr();Atomics.store(a(),e+4>>2,-1),Atomics.store(a(),e+0>>2,1),Re(e+0,2147483647),rn(0,0,0),postMessage({cmd:\"cancelDone\"})},terminateAllThreads:function(){for(var e in Le.pthreads)(n=Le.pthreads[e])&&n.worker&&Le.returnWorkerToPool(n.worker);Le.pthreads={};for(var t=0;t<Le.unusedWorkers.length;++t)(r=Le.unusedWorkers[t]).terminate();for(Le.unusedWorkers=[],t=0;t<Le.runningWorkers.length;++t){var r,n=(r=Le.runningWorkers[t]).pthread;Le.freeThreadData(n),r.terminate()}Le.runningWorkers=[]},freeThreadData:function(e){if(e){if(e.threadInfoStruct){var t=n()[e.threadInfoStruct+100>>2];n()[e.threadInfoStruct+100>>2]=0,Br(t),Br(e.threadInfoStruct)}e.threadInfoStruct=0,e.allocatedOwnStack&&e.stackBase&&Br(e.stackBase),e.stackBase=0,e.worker&&(e.worker.pthread=null)}},returnWorkerToPool:function(e){Le.runWithoutMainThreadQueuedCalls((function(){delete Le.pthreads[e.pthread.threadInfoStruct],Le.unusedWorkers.push(e),Le.runningWorkers.splice(Le.runningWorkers.indexOf(e),1),Le.freeThreadData(e.pthread),e.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(e){n()[cn>>2]=0;try{e()}finally{n()[cn>>2]=1}},receiveObjectTransfer:function(e){},loadWasmModuleToWorker:function(e,t){e.onmessage=function(r){var n=r.data,o=n.cmd;if(e.pthread&&(Le.currentProxiedOperationCallerThread=e.pthread.threadInfoStruct),n.targetThread&&n.targetThread!=Gr()){var i=Le.pthreads[n.targetThread];return i?i.worker.postMessage(r.data,n.transferList):console.error('Internal error! Worker sent a message \"'+o+'\" to target pthread '+n.targetThread+\", but that thread no longer exists!\"),void(Le.currentProxiedOperationCallerThread=void 0)}if(\"processQueuedMainThreadWork\"===o)Qr();else if(\"spawnThread\"===o)yr(r.data);else if(\"cleanupThread\"===o)Ie(n.thread);else if(\"killThread\"===o)Ne(n.thread);else if(\"cancelThread\"===o)Me(n.thread);else if(\"loaded\"===o)e.loaded=!0,t&&t(e),e.runPthread&&(e.runPthread(),delete e.runPthread);else if(\"print\"===o)R(\"Thread \"+n.threadId+\": \"+n.text);else if(\"printErr\"===o)N(\"Thread \"+n.threadId+\": \"+n.text);else if(\"alert\"===o)alert(\"Thread \"+n.threadId+\": \"+n.text);else if(\"exit\"===o)e.pthread&&Atomics.load(a(),e.pthread.threadInfoStruct+64>>2)&&Le.returnWorkerToPool(e);else if(\"exitProcess\"===o)try{mn(n.returnCode)}catch(r){if(r instanceof ln)return;throw r}else\"cancelDone\"===o?Le.returnWorkerToPool(e):\"objectTransfer\"===o?Le.receiveObjectTransfer(r.data):\"setimmediate\"===r.data.target?e.postMessage(r.data):N(\"worker sent an unknown command \"+o);Le.currentProxiedOperationCallerThread=void 0},e.onerror=function(e){N(\"pthread sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message)},g&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})),e.on(\"exit\",(function(e){}))),e.postMessage({cmd:\"load\",urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:D,wasmModule:k})},allocateUnusedWorker:function(){var e=A(\"ort-wasm-threaded.worker.js\");Le.unusedWorkers.push(new Worker(e))},getNewWorker:function(){return 0==Le.unusedWorkers.length&&(Le.allocateUnusedWorker(),Le.loadWasmModuleToWorker(Le.unusedWorkers[0])),Le.unusedWorkers.length>0?Le.unusedWorkers.pop():null},busySpinWait:function(e){for(var t=performance.now()+e;performance.now()<t;);}};function Pe(e,t){un(e,t),an(e)}function He(){return x}function We(e,t){return J.get(e)(t)}function Ue(e,t,r,n){_e(\"Assertion failed: \"+Y(e)+\", at: \"+[t?Y(t):\"unknown filename\",r,n?Y(n):\"unknown function\"])}s.establishStackSpace=Pe,s.getNoExitRuntime=He,s.invokeEntryPoint=We,Fe=g?function(){var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:E?function(){return performance.now()-s.__performance_now_clock_drift}:\"undefined\"!=typeof dateNow?dateNow:function(){return performance.now()};var Be=!0;function Ge(e){return n()[Ur()>>2]=e,e}function Ye(e,t){var r;if(0===e)r=Date.now();else{if(1!==e&&4!==e||!Be)return Ge(28),-1;r=Fe()}return n()[t>>2]=r/1e3|0,n()[t+4>>2]=r%1e3*1e3*1e3|0,0}function je(e,t){return Ye(e,t)}var ze={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function qe(e){return Wr(e+ze.SIZE)+ze.SIZE}function Ve(e,t){if(E)return kt(1,1,e,t);ne.unshift({func:e,arg:t})}function Xe(e,t){return Ve(e,t)}function Qe(e,t){Le.threadExitHandlers.push((function(){J.get(e)(t)}))}function Ke(e,t){return Qe(e,t)}function Ze(e){this.excPtr=e,this.ptr=e-ze.SIZE,this.set_type=function(e){n()[this.ptr+ze.TYPE_OFFSET>>2]=e},this.get_type=function(){return n()[this.ptr+ze.TYPE_OFFSET>>2]},this.set_destructor=function(e){n()[this.ptr+ze.DESTRUCTOR_OFFSET>>2]=e},this.get_destructor=function(){return n()[this.ptr+ze.DESTRUCTOR_OFFSET>>2]},this.set_refcount=function(e){n()[this.ptr+ze.REFCOUNT_OFFSET>>2]=e},this.set_caught=function(e){e=e?1:0,t()[this.ptr+ze.CAUGHT_OFFSET>>0]=e},this.get_caught=function(){return 0!=t()[this.ptr+ze.CAUGHT_OFFSET>>0]},this.set_rethrown=function(e){e=e?1:0,t()[this.ptr+ze.RETHROWN_OFFSET>>0]=e},this.get_rethrown=function(){return 0!=t()[this.ptr+ze.RETHROWN_OFFSET>>0]},this.init=function(e,t){this.set_type(e),this.set_destructor(t),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(n(),this.ptr+ze.REFCOUNT_OFFSET>>2,1)},this.release_ref=function(){return 1===Atomics.sub(n(),this.ptr+ze.REFCOUNT_OFFSET>>2,1)}}function Je(e,t,r){throw new Ze(e).init(t,r),e}var $e={mappings:{},buffers:[null,[],[]],printChar:function(e,t){var r=$e.buffers[e];0===t||10===t?((1===e?R:N)(G(r,0)),r.length=0):r.push(t)},varargs:void 0,get:function(){return $e.varargs+=4,n()[$e.varargs-4>>2]},getStr:function(e){return Y(e)},get64:function(e,t){return e}};function et(e,t){return E?kt(2,1,e,t):(e=$e.getStr(e),$e.doAccess(e,t))}function tt(e,t,r){return E?kt(3,1,e,t,r):($e.varargs=r,0)}function rt(e,t){if(E)return kt(4,1,e,t)}function nt(e,t,r){if(E)return kt(5,1,e,t,r)}function at(){return 42}function ot(e,t,r){return E?kt(6,1,e,t,r):($e.varargs=r,0)}function it(e,t){if(E)return kt(7,1,e,t)}function ut(e,t){return E?kt(8,1,e,t):(e=$e.getStr(e),$e.doMkdir(e,t))}function st(e,t,r,n,a,o){var i;o<<=12;var u=!1;return 0!=(16&n)&&e%16384!=0?-28:0==(32&n)?-52:(i=sn(16384,t))?(jr(i,0,t),u=!0,$e.mappings[i]={malloc:i,len:t,allocated:u,fd:a,prot:r,flags:n,offset:o},i):-48}function ct(e,t,r,n,a,o){return E?kt(9,1,e,t,r,n,a,o):st(e,t,r,n,a,o)}function ft(e,t){if(-1==(0|e)||0===t)return-28;var r=$e.mappings[e];return r?(t===r.len&&($e.mappings[e]=null,r.allocated&&Br(r.malloc)),0):0}function lt(e,t){return E?kt(10,1,e,t):ft(e,t)}function dt(e,t,r){if(E)return kt(11,1,e,t,r);$e.varargs=r}function mt(e,t,r){return E?kt(12,1,e,t,r):(e=$e.getStr(e),$e.doReadlink(e,t,r))}function pt(e){if(E)return kt(13,1,e)}function ht(e,t){if(E)return kt(14,1,e,t)}function gt(e){if(E)return kt(15,1,e)}function _t(e,t){if(e==t)postMessage({cmd:\"processQueuedMainThreadWork\"});else if(E)postMessage({targetThread:e,cmd:\"processThreadQueue\"});else{var r=Le.pthreads[e],n=r&&r.worker;if(!n)return;n.postMessage({cmd:\"processThreadQueue\"})}return 1}function Et(){_e()}function vt(e,t){return e-t}function yt(e){_e(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function Tt(){_e(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function Ot(e,t){_e(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function wt(e,t){_e(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function St(e,t,r){var n=Mt(t,r);return Ce[e].apply(null,n)}function At(){g||h||M(\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\")}function bt(e,t){}function Ct(e,r,a){if(e<=0||e>t().length||!0&e)return-28;if(p){if(Atomics.load(n(),e>>2)!=r)return-6;var o=performance.now(),i=o+a;for(Atomics.exchange(n(),fn>>2,e);;){if((o=performance.now())>i)return Atomics.exchange(n(),fn>>2,0),-73;if(0==Atomics.exchange(n(),fn>>2,0))break;if(Qr(),Atomics.load(n(),e>>2)!=r)return-6;Atomics.exchange(n(),fn>>2,e)}return 0}var u=Atomics.wait(n(),e>>2,r,a);if(\"timed-out\"===u)return-73;if(\"not-equal\"===u)return-6;if(\"ok\"===u)return 0;throw\"Atomics.wait returned an unexpected value \"+u}function xt(e,t,n){r().copyWithin(e,t,t+n)}function Dt(){return g?require(\"os\").cpus().length:navigator.hardwareConcurrency}function kt(e,t){for(var r=arguments.length-2,n=nn(),a=r,i=on(8*a),u=i>>3,s=0;s<r;s++){var c=arguments[2+s];o()[u+s]=c}var f=en(e,a,i,t);return an(n),f}var Rt=[],Nt=[];function Mt(e,t){var a;for(Nt.length=0,t>>=2;a=r()[e++];){var i=a<105;i&&1&t&&t++,Nt.push(i?o()[t++>>1]:n()[t]),++t}return Nt}function It(e,t,r){Rt.length=t;for(var n=r>>3,a=0;a<t;a++)Rt[a]=o()[n+a];return(e<0?Ce[-e-1]:Ir[e]).apply(null,Rt)}function Ft(){return r().length}function Lt(e){try{return D.grow(e-I.byteLength+65535>>>16),Z(D.buffer),1}catch(e){}}function Pt(e){e>>>=0;var t=Ft();if(e<=t)return!1;var r=2147483648;if(e>r)return!1;for(var n=1;n<=4;n*=2){var a=t*(1+.2/n);if(a=Math.min(a,e+100663296),Lt(Math.min(r,K(Math.max(16777216,e,a),65536))))return!0}return!1}var Ht={inEventHandler:0,removeAllEventListeners:function(){for(var e=Ht.eventHandlers.length-1;e>=0;--e)Ht._removeHandler(e);Ht.eventHandlers=[],Ht.deferredCalls=[]},registerRemoveEventListeners:function(){Ht.removeEventListenersRegistered||(ne.push(Ht.removeAllEventListeners),Ht.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,t,r){function n(e,t){if(e.length!=t.length)return!1;for(var r in e)if(e[r]!=t[r])return!1;return!0}for(var a in Ht.deferredCalls){var o=Ht.deferredCalls[a];if(o.targetFunction==e&&n(o.argsList,r))return}Ht.deferredCalls.push({targetFunction:e,precedence:t,argsList:r}),Ht.deferredCalls.sort((function(e,t){return e.precedence<t.precedence}))},removeDeferredCalls:function(e){for(var t=0;t<Ht.deferredCalls.length;++t)Ht.deferredCalls[t].targetFunction==e&&(Ht.deferredCalls.splice(t,1),--t)},canPerformEventHandlerRequests:function(){return Ht.inEventHandler&&Ht.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(Ht.canPerformEventHandlerRequests())for(var e=0;e<Ht.deferredCalls.length;++e){var t=Ht.deferredCalls[e];Ht.deferredCalls.splice(e,1),--e,t.targetFunction.apply(null,t.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,t){for(var r=0;r<Ht.eventHandlers.length;++r)Ht.eventHandlers[r].target!=e||t&&t!=Ht.eventHandlers[r].eventTypeString||Ht._removeHandler(r--)},_removeHandler:function(e){var t=Ht.eventHandlers[e];t.target.removeEventListener(t.eventTypeString,t.eventListenerFunc,t.useCapture),Ht.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var t=function(t){++Ht.inEventHandler,Ht.currentEventHandler=e,Ht.runDeferredCalls(),e.handlerFunc(t),Ht.runDeferredCalls(),--Ht.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=t,e.target.addEventListener(e.eventTypeString,t,e.useCapture),Ht.eventHandlers.push(e),Ht.registerRemoveEventListeners();else for(var r=0;r<Ht.eventHandlers.length;++r)Ht.eventHandlers[r].target==e.target&&Ht.eventHandlers[r].eventTypeString==e.eventTypeString&&Ht._removeHandler(r--)},queueEventHandlerOnThread_iiii:function(e,t,r,a,o){var i=nn(),u=on(12);n()[u>>2]=r,n()[u+4>>2]=a,n()[u+8>>2]=o,tn(0,e,637534208,t,a,u),an(i)},getTargetThreadForEventCallback:function(e){switch(e){case 1:return 0;case 2:return Le.currentProxiedOperationCallerThread;default:return e}},getNodeNameForTarget:function(e){return e?e==window?\"#window\":e==screen?\"#screen\":e&&e.nodeName?e.nodeName:\"\":\"\"},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};function Wt(e){var t=q(e)+1,r=Wr(t);return z(e,r,t),r}function Ut(e,t,r,a){var o=nn(),i=on(12),u=0;t&&(u=Wt(t)),n()[i>>2]=u,n()[i+4>>2]=r,n()[i+8>>2]=a,tn(0,e,657457152,0,u,i),an(o)}function Bt(e,t,r,n){Ut(e,t=t?Y(t):\"\",r,n)}function Gt(e){return e>2?Y(e):e}var Yt=[0,\"undefined\"!=typeof document?document:0,\"undefined\"!=typeof window?window:0];function jt(e){return e=Gt(e),Yt[e]||(\"undefined\"!=typeof document?document.querySelector(e):void 0)}function zt(e){return jt(e)}function qt(e,t,r){var a=zt(e);if(!a)return-4;if(a.canvasSharedPtr&&(n()[a.canvasSharedPtr>>2]=t,n()[a.canvasSharedPtr+4>>2]=r),!a.offscreenCanvas&&a.controlTransferredOffscreen)return a.canvasSharedPtr?(Bt(n()[a.canvasSharedPtr+8>>2],e,t,r),1):-4;a.offscreenCanvas&&(a=a.offscreenCanvas);var o=!1;if(a.GLctxObject&&a.GLctxObject.GLctx){var i=a.GLctxObject.GLctx.getParameter(2978);o=0===i[0]&&0===i[1]&&i[2]===a.width&&i[3]===a.height}return a.width=t,a.height=r,o&&a.GLctxObject.GLctx.viewport(0,0,t,r),0}function Vt(e,t,r){return E?kt(16,1,e,t,r):qt(e,t,r)}function Xt(e,t,r){return zt(e)?qt(e,t,r):Vt(e,t,r)}function Qt(e){}function Kt(e){var t=e.getExtension(\"ANGLE_instanced_arrays\");if(t)return e.vertexAttribDivisor=function(e,r){t.vertexAttribDivisorANGLE(e,r)},e.drawArraysInstanced=function(e,r,n,a){t.drawArraysInstancedANGLE(e,r,n,a)},e.drawElementsInstanced=function(e,r,n,a,o){t.drawElementsInstancedANGLE(e,r,n,a,o)},1}function Zt(e){var t=e.getExtension(\"OES_vertex_array_object\");if(t)return e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)},1}function Jt(e){var t=e.getExtension(\"WEBGL_draw_buffers\");if(t)return e.drawBuffers=function(e,r){t.drawBuffersWEBGL(e,r)},1}function $t(e){return!!(e.multiDrawWebgl=e.getExtension(\"WEBGL_multi_draw\"))}var er={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,recordError:function(e){er.lastError||(er.lastError=e)},getNewId:function(e){for(var t=er.counter++,r=e.length;r<t;r++)e[r]=null;return t},getSource:function(e,t,r,a){for(var o=\"\",i=0;i<t;++i){var u=a?n()[a+4*i>>2]:-1;o+=Y(n()[r+4*i>>2],u<0?void 0:u)}return o},createContext:function(e,t){var r=e.getContext(\"webgl\",t);return r?er.registerContext(r,t):0},registerContext:function(e,t){var r=Wr(8);n()[r+4>>2]=Gr();var a={handle:r,attributes:t,version:t.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=a),er.contexts[r]=a,(void 0===t.enableExtensionsByDefault||t.enableExtensionsByDefault)&&er.initExtensions(a),r},makeContextCurrent:function(e){return er.currentContext=er.contexts[e],s.ctx=Cr=er.currentContext&&er.currentContext.GLctx,!(e&&!Cr)},getContext:function(e){return er.contexts[e]},deleteContext:function(e){er.currentContext===er.contexts[e]&&(er.currentContext=null),\"object\"==typeof Ht&&Ht.removeAllHandlersOnTarget(er.contexts[e].GLctx.canvas),er.contexts[e]&&er.contexts[e].GLctx.canvas&&(er.contexts[e].GLctx.canvas.GLctxObject=void 0),Br(er.contexts[e].handle),er.contexts[e]=null},initExtensions:function(e){if(e||(e=er.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var t=e.GLctx;Kt(t),Zt(t),Jt(t),t.disjointTimerQueryExt=t.getExtension(\"EXT_disjoint_timer_query\"),$t(t),(t.getSupportedExtensions()||[]).forEach((function(e){e.indexOf(\"lose_context\")<0&&e.indexOf(\"debug\")<0&&t.getExtension(e)}))}},populateUniformTable:function(e){for(var t=er.programs[e],r=er.programInfos[e]={uniforms:{},maxUniformLength:0,maxAttributeLength:-1,maxUniformBlockNameLength:-1},n=r.uniforms,a=Cr.getProgramParameter(t,35718),o=0;o<a;++o){var i=Cr.getActiveUniform(t,o),u=i.name;r.maxUniformLength=Math.max(r.maxUniformLength,u.length+1),\"]\"==u.slice(-1)&&(u=u.slice(0,u.lastIndexOf(\"[\")));var s=Cr.getUniformLocation(t,u);if(s){var c=er.getNewId(er.uniforms);n[u]=[i.size,c],er.uniforms[c]=s;for(var f=1;f<i.size;++f){var l=u+\"[\"+f+\"]\";s=Cr.getUniformLocation(t,l),c=er.getNewId(er.uniforms),er.uniforms[c]=s}}}}},tr=[\"default\",\"low-power\",\"high-performance\"];function rr(e,t){var r=t>>2,a=n()[r+6],o={alpha:!!n()[r+0],depth:!!n()[r+1],stencil:!!n()[r+2],antialias:!!n()[r+3],premultipliedAlpha:!!n()[r+4],preserveDrawingBuffer:!!n()[r+5],powerPreference:tr[a],failIfMajorPerformanceCaveat:!!n()[r+7],majorVersion:n()[r+8],minorVersion:n()[r+9],enableExtensionsByDefault:n()[r+10],explicitSwapControl:n()[r+11],proxyContextToMainThread:n()[r+12],renderViaOffscreenBackBuffer:n()[r+13]},i=zt(e);return i?o.explicitSwapControl?0:er.createContext(i,o):0}function nr(e,t){return rr(e,t)}var ar={};function or(){return d||\"./this.program\"}function ir(){if(!ir.strings){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:or()};for(var t in ar)e[t]=ar[t];var r=[];for(var t in e)r.push(t+\"=\"+e[t]);ir.strings=r}return ir.strings}function ur(e,t){if(E)return kt(17,1,e,t);var r=0;return ir().forEach((function(a,o){var i=t+r;n()[e+4*o>>2]=i,Q(a,i),r+=a.length+1})),0}function sr(e,t){if(E)return kt(18,1,e,t);var r=ir();n()[e>>2]=r.length;var a=0;return r.forEach((function(e){a+=e.length+1})),n()[t>>2]=a,0}function cr(e){return E?kt(19,1,e):0}function fr(e,r){if(E)return kt(20,1,e,r);var n=1==e||2==e?2:_e();return t()[r>>0]=n,0}function lr(e,t,r,a){if(E)return kt(21,1,e,t,r,a);var o=$e.getStreamFromFD(e),i=$e.doReadv(o,t,r);return n()[a>>2]=i,0}function dr(e,t,r,n,a){if(E)return kt(22,1,e,t,r,n,a)}function mr(){\"undefined\"!=typeof _fflush&&_fflush(0);var e=$e.buffers;e[1].length&&$e.printChar(1,10),e[2].length&&$e.printChar(2,10)}function pr(e,t,a,o){if(E)return kt(23,1,e,t,a,o);for(var i=0,u=0;u<a;u++){for(var s=n()[t+8*u>>2],c=n()[t+(8*u+4)>>2],f=0;f<c;f++)$e.printChar(e,r()[s+f]);i+=c}return n()[o>>2]=i,0}function hr(e){var t=Date.now();return n()[e>>2]=t/1e3|0,n()[e+4>>2]=t%1e3*1e3|0,0}function gr(e,t){var r=new Date(1e3*n()[e>>2]);n()[t>>2]=r.getUTCSeconds(),n()[t+4>>2]=r.getUTCMinutes(),n()[t+8>>2]=r.getUTCHours(),n()[t+12>>2]=r.getUTCDate(),n()[t+16>>2]=r.getUTCMonth(),n()[t+20>>2]=r.getUTCFullYear()-1900,n()[t+24>>2]=r.getUTCDay(),n()[t+36>>2]=0,n()[t+32>>2]=0;var a=Date.UTC(r.getUTCFullYear(),0,1,0,0,0,0),o=(r.getTime()-a)/864e5|0;return n()[t+28>>2]=o,gr.GMTString||(gr.GMTString=V(\"GMT\")),n()[t+40>>2]=gr.GMTString,t}function _r(){if(E)return kt(24,1);if(!_r.called){_r.called=!0;var e=(new Date).getFullYear(),t=new Date(e,0,1),r=new Date(e,6,1),a=t.getTimezoneOffset(),o=r.getTimezoneOffset(),i=Math.max(a,o);n()[Vr()>>2]=60*i,n()[qr()>>2]=Number(a!=o);var u=l(t),s=l(r),c=V(u),f=V(s);o<a?(n()[zr()>>2]=c,n()[zr()+4>>2]=f):(n()[zr()>>2]=f,n()[zr()+4>>2]=c)}function l(e){var t=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return t?t[1]:\"GMT\"}}function Er(e,t){_r();var r=new Date(1e3*n()[e>>2]);n()[t>>2]=r.getSeconds(),n()[t+4>>2]=r.getMinutes(),n()[t+8>>2]=r.getHours(),n()[t+12>>2]=r.getDate(),n()[t+16>>2]=r.getMonth(),n()[t+20>>2]=r.getFullYear()-1900,n()[t+24>>2]=r.getDay();var a=new Date(r.getFullYear(),0,1),o=(r.getTime()-a.getTime())/864e5|0;n()[t+28>>2]=o,n()[t+36>>2]=-60*r.getTimezoneOffset();var i=new Date(r.getFullYear(),6,1).getTimezoneOffset(),u=a.getTimezoneOffset(),s=0|(i!=u&&r.getTimezoneOffset()==Math.min(u,i));n()[t+32>>2]=s;var c=n()[zr()+(s?4:0)>>2];return n()[t+40>>2]=c,t}function vr(e){_r();var t=new Date(n()[e+20>>2]+1900,n()[e+16>>2],n()[e+12>>2],n()[e+8>>2],n()[e+4>>2],n()[e>>2],0),r=n()[e+32>>2],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),u=o.getTimezoneOffset(),s=Math.min(u,i);if(r<0)n()[e+32>>2]=Number(i!=u&&s==a);else if(r>0!=(s==a)){var c=Math.max(u,i),f=r>0?s:c;t.setTime(t.getTime()+6e4*(f-a))}n()[e+24>>2]=t.getDay();var l=(t.getTime()-o.getTime())/864e5|0;return n()[e+28>>2]=l,n()[e>>2]=t.getSeconds(),n()[e+4>>2]=t.getMinutes(),n()[e+8>>2]=t.getHours(),n()[e+12>>2]=t.getDate(),n()[e+16>>2]=t.getMonth(),t.getTime()/1e3|0}function yr(e){if(E)throw\"Internal Error! spawnThread() can only ever be called from main application thread!\";var t=Le.getNewWorker();if(void 0!==t.pthread)throw\"Internal error!\";if(!e.pthread_ptr)throw\"Internal error, no pthread ptr!\";Le.runningWorkers.push(t);for(var r=Wr(512),o=0;o<128;++o)n()[r+4*o>>2]=0;var i=e.stackBase+e.stackSize,u=Le.pthreads[e.pthread_ptr]={worker:t,stackBase:e.stackBase,stackSize:e.stackSize,allocatedOwnStack:e.allocatedOwnStack,threadInfoStruct:e.pthread_ptr},s=u.threadInfoStruct>>2;Atomics.store(a(),s+16,e.detached),Atomics.store(a(),s+25,r),Atomics.store(a(),s+10,u.threadInfoStruct),Atomics.store(a(),s+20,e.stackSize),Atomics.store(a(),s+19,i),Atomics.store(a(),s+26,e.stackSize),Atomics.store(a(),s+28,i),Atomics.store(a(),s+29,e.detached);var c=Yr()+40;Atomics.store(a(),s+43,c),t.pthread=u;var f={cmd:\"run\",start_routine:e.startRoutine,arg:e.arg,threadInfoStruct:e.pthread_ptr,stackBase:e.stackBase,stackSize:e.stackSize};t.runPthread=function(){f.time=performance.now(),t.postMessage(f,e.transferList)},t.loaded&&(t.runPthread(),delete t.runPthread)}function Tr(e,t,r,o){if(\"undefined\"==typeof SharedArrayBuffer)return N(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;if(!e)return N(\"pthread_create called with a null thread pointer!\"),28;var i=[];if(E&&0===i.length)return $r(687865856,e,t,r,o);var u=0,s=0,c=0;t&&-1!=t?(u=n()[t>>2],u+=81920,s=n()[t+8>>2],c=0!==n()[t+12>>2]):u=2097152;var f=0==s;f?s=sn(16,u):B((s-=u)>0);for(var l=Wr(228),d=0;d<57;++d)a()[(l>>2)+d]=0;n()[e>>2]=l,n()[l+12>>2]=l;var m=l+152;n()[m>>2]=m;var p={stackBase:s,stackSize:u,allocatedOwnStack:f,detached:c,startRoutine:r,pthread_ptr:l,arg:o,transferList:i};return E?(p.cmd=\"spawnThread\",postMessage(p,i)):yr(p),0}function Or(){if(E){var e=Gr();if(e&&!Atomics.load(a(),e+56>>2)&&2==Atomics.load(a(),e+0>>2))throw\"Canceled!\"}}function wr(e,t,r){if(!e)return N(\"pthread_join attempted on a null thread pointer!\"),ke.ESRCH;if(E&&Gr()==e)return N(\"PThread \"+e+\" is attempting to join to itself!\"),ke.EDEADLK;if(!E&&Zr()==e)return N(\"Main thread \"+e+\" is attempting to join to itself!\"),ke.EDEADLK;if(n()[e+12>>2]!==e)return N(\"pthread_join attempted on thread \"+e+\", which does not point to a valid thread, or does not exist anymore!\"),ke.ESRCH;if(Atomics.load(a(),e+64>>2))return N(\"Attempted to join thread \"+e+\", which was already detached!\"),ke.EINVAL;for(r&&At();;){var o=Atomics.load(a(),e+0>>2);if(1==o){var i=Atomics.load(a(),e+4>>2);return t&&(n()[t>>2]=i),Atomics.store(a(),e+64>>2,1),E?postMessage({cmd:\"cleanupThread\",thread:e}):Ie(e),0}if(!r)return ke.EBUSY;Or(),E||Qr(),Ct(e+0,o,E?100:1)}}function Sr(e,t){return wr(e,t,!0)}function Ar(e){return e%4==0&&(e%100!=0||e%400==0)}function br(e,t){for(var r=0,n=0;n<=t;r+=e[n++]);return r}var Cr,xr=[31,29,31,30,31,30,31,31,30,31,30,31],Dr=[31,28,31,30,31,30,31,31,30,31,30,31];function kr(e,t){for(var r=new Date(e.getTime());t>0;){var n=Ar(r.getFullYear()),a=r.getMonth(),o=(n?xr:Dr)[a];if(!(t>o-r.getDate()))return r.setDate(r.getDate()+t),r;t-=o-r.getDate()+1,r.setDate(1),a<11?r.setMonth(a+1):(r.setMonth(0),r.setFullYear(r.getFullYear()+1))}return r}function Rr(e,t,r,a){var o=n()[a+40>>2],i={tm_sec:n()[a>>2],tm_min:n()[a+4>>2],tm_hour:n()[a+8>>2],tm_mday:n()[a+12>>2],tm_mon:n()[a+16>>2],tm_year:n()[a+20>>2],tm_wday:n()[a+24>>2],tm_yday:n()[a+28>>2],tm_isdst:n()[a+32>>2],tm_gmtoff:n()[a+36>>2],tm_zone:o?Y(o):\"\"},u=Y(r),s={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var c in s)u=u.replace(new RegExp(c,\"g\"),s[c]);var f=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],l=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function d(e,t,r){for(var n=\"number\"==typeof e?e.toString():e||\"\";n.length<t;)n=r[0]+n;return n}function m(e,t){return d(e,t,\"0\")}function p(e,t){function r(e){return e<0?-1:e>0?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function h(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function g(e){var t=kr(new Date(e.tm_year+1900,0,1),e.tm_yday),r=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),a=h(r),o=h(n);return p(a,t)<=0?p(o,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var _={\"%a\":function(e){return f[e.tm_wday].substring(0,3)},\"%A\":function(e){return f[e.tm_wday]},\"%b\":function(e){return l[e.tm_mon].substring(0,3)},\"%B\":function(e){return l[e.tm_mon]},\"%C\":function(e){return m((e.tm_year+1900)/100|0,2)},\"%d\":function(e){return m(e.tm_mday,2)},\"%e\":function(e){return d(e.tm_mday,2,\" \")},\"%g\":function(e){return g(e).toString().substring(2)},\"%G\":function(e){return g(e)},\"%H\":function(e){return m(e.tm_hour,2)},\"%I\":function(e){var t=e.tm_hour;return 0==t?t=12:t>12&&(t-=12),m(t,2)},\"%j\":function(e){return m(e.tm_mday+br(Ar(e.tm_year+1900)?xr:Dr,e.tm_mon-1),3)},\"%m\":function(e){return m(e.tm_mon+1,2)},\"%M\":function(e){return m(e.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return e.tm_hour>=0&&e.tm_hour<12?\"AM\":\"PM\"},\"%S\":function(e){return m(e.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.tm_wday||7},\"%U\":function(e){var t=new Date(e.tm_year+1900,0,1),r=0===t.getDay()?t:kr(t,7-t.getDay()),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(r,n)<0){var a=br(Ar(n.getFullYear())?xr:Dr,n.getMonth()-1)-31,o=31-r.getDate()+a+n.getDate();return m(Math.ceil(o/7),2)}return 0===p(r,t)?\"01\":\"00\"},\"%V\":function(e){var t,r=new Date(e.tm_year+1900,0,4),n=new Date(e.tm_year+1901,0,4),a=h(r),o=h(n),i=kr(new Date(e.tm_year+1900,0,1),e.tm_yday);return p(i,a)<0?\"53\":p(o,i)<=0?\"01\":(t=a.getFullYear()<e.tm_year+1900?e.tm_yday+32-a.getDate():e.tm_yday+1-a.getDate(),m(Math.ceil(t/7),2))},\"%w\":function(e){return e.tm_wday},\"%W\":function(e){var t=new Date(e.tm_year,0,1),r=1===t.getDay()?t:kr(t,0===t.getDay()?1:7-t.getDay()+1),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(p(r,n)<0){var a=br(Ar(n.getFullYear())?xr:Dr,n.getMonth()-1)-31,o=31-r.getDate()+a+n.getDate();return m(Math.ceil(o/7),2)}return 0===p(r,t)?\"01\":\"00\"},\"%y\":function(e){return(e.tm_year+1900).toString().substring(2)},\"%Y\":function(e){return e.tm_year+1900},\"%z\":function(e){var t=e.tm_gmtoff,r=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(r?\"+\":\"-\")+String(\"0000\"+t).slice(-4)},\"%Z\":function(e){return e.tm_zone},\"%%\":function(){return\"%\"}};for(var c in _)u.indexOf(c)>=0&&(u=u.replace(new RegExp(c,\"g\"),_[c](i)));var E=Fr(u,!1);return E.length>t?0:(X(E,e),E.length-1)}function Nr(e,t,r,n){return Rr(e,t,r,n)}function Mr(e){if(E)return kt(25,1,e);switch(e){case 30:return 16384;case 85:return 131072;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return\"object\"==typeof navigator&&navigator.hardwareConcurrency||1}return Ge(28),-1}E||Le.initMainThreadBlock();var Ir=[null,Ve,et,tt,rt,nt,ot,it,ut,ct,lt,dt,mt,pt,ht,gt,Vt,ur,sr,cr,fr,lr,dr,pr,_r,Mr];function Fr(e,t,r){var n=r>0?r:q(e)+1,a=new Array(n),o=j(e,a,0,a.length);return t&&(a.length=o),a}var Lr,Pr={h:Ue,P:je,b:qe,d:Xe,e:Ke,c:Je,V:et,x:tt,$:rt,ca:nt,v:at,W:ot,_:it,Z:ut,ba:ct,aa:lt,p:dt,U:mt,X:pt,z:ht,Y:gt,O:_t,g:Et,y:Ye,ea:vt,D:yt,l:Tt,E:Ot,ga:wt,u:St,K:At,n:bt,k:Ct,j:Re,i:Fe,I:xt,q:Dt,L:It,J:Pt,M:Xt,t:Qt,N:nr,S:ur,T:sr,m:cr,Q:fr,w:lr,F:dr,o:pr,R:hr,fa:gr,H:xe,B:Er,a:D||s.wasmMemory,A:vr,G:Qe,s:Tr,C:Sr,da:Rr,f:Nr,r:Mr},Hr=(be(),s.___wasm_call_ctors=function(){return(Hr=s.___wasm_call_ctors=s.asm.ha).apply(null,arguments)}),Wr=(s._OrtInit=function(){return(s._OrtInit=s.asm.ia).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm.ja).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.ka).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.la).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ma).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.na).apply(null,arguments)},s._OrtGetInputCount=function(){return(s._OrtGetInputCount=s.asm.oa).apply(null,arguments)},s._OrtGetOutputCount=function(){return(s._OrtGetOutputCount=s.asm.pa).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.qa).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ra).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.sa).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.ta).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.ua).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.va).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.wa).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.xa).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.ya).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.za).apply(null,arguments)},s._malloc=function(){return(Wr=s._malloc=s.asm.Ba).apply(null,arguments)}),Ur=s.___errno_location=function(){return(Ur=s.___errno_location=s.asm.Ca).apply(null,arguments)},Br=s._free=function(){return(Br=s._free=s.asm.Da).apply(null,arguments)},Gr=s._pthread_self=function(){return(Gr=s._pthread_self=s.asm.Ea).apply(null,arguments)},Yr=s._emscripten_get_global_libc=function(){return(Yr=s._emscripten_get_global_libc=s.asm.Fa).apply(null,arguments)},jr=s._memset=function(){return(jr=s._memset=s.asm.Ga).apply(null,arguments)},zr=s.__get_tzname=function(){return(zr=s.__get_tzname=s.asm.Ha).apply(null,arguments)},qr=s.__get_daylight=function(){return(qr=s.__get_daylight=s.asm.Ia).apply(null,arguments)},Vr=s.__get_timezone=function(){return(Vr=s.__get_timezone=s.asm.Ja).apply(null,arguments)},Xr=(s.___em_js__initPthreadsJS=function(){return(s.___em_js__initPthreadsJS=s.asm.Ka).apply(null,arguments)},s.___pthread_tsd_run_dtors=function(){return(Xr=s.___pthread_tsd_run_dtors=s.asm.La).apply(null,arguments)}),Qr=s._emscripten_main_thread_process_queued_calls=function(){return(Qr=s._emscripten_main_thread_process_queued_calls=s.asm.Ma).apply(null,arguments)},Kr=(s._emscripten_current_thread_process_queued_calls=function(){return(s._emscripten_current_thread_process_queued_calls=s.asm.Na).apply(null,arguments)},s._emscripten_register_main_browser_thread_id=function(){return(Kr=s._emscripten_register_main_browser_thread_id=s.asm.Oa).apply(null,arguments)}),Zr=s._emscripten_main_browser_thread_id=function(){return(Zr=s._emscripten_main_browser_thread_id=s.asm.Pa).apply(null,arguments)},Jr=s.__emscripten_do_dispatch_to_thread=function(){return(Jr=s.__emscripten_do_dispatch_to_thread=s.asm.Qa).apply(null,arguments)},$r=s._emscripten_sync_run_in_main_thread_4=function(){return($r=s._emscripten_sync_run_in_main_thread_4=s.asm.Ra).apply(null,arguments)},en=s._emscripten_run_in_main_runtime_thread_js=function(){return(en=s._emscripten_run_in_main_runtime_thread_js=s.asm.Sa).apply(null,arguments)},tn=s.__emscripten_call_on_thread=function(){return(tn=s.__emscripten_call_on_thread=s.asm.Ta).apply(null,arguments)},rn=(s._emscripten_tls_init=function(){return(s._emscripten_tls_init=s.asm.Ua).apply(null,arguments)},s.__emscripten_thread_init=function(){return(rn=s.__emscripten_thread_init=s.asm.Va).apply(null,arguments)}),nn=s.stackSave=function(){return(nn=s.stackSave=s.asm.Wa).apply(null,arguments)},an=s.stackRestore=function(){return(an=s.stackRestore=s.asm.Xa).apply(null,arguments)},on=s.stackAlloc=function(){return(on=s.stackAlloc=s.asm.Ya).apply(null,arguments)},un=s._emscripten_stack_set_limits=function(){return(un=s._emscripten_stack_set_limits=s.asm.Za).apply(null,arguments)},sn=s._memalign=function(){return(sn=s._memalign=s.asm._a).apply(null,arguments)},cn=s.__emscripten_allow_main_runtime_queued_calls=767088,fn=s.__emscripten_main_thread_futex=772432;function ln(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function dn(e){if(e=e||l,!(de>0)){if(E)return i(s),void postMessage({cmd:\"loaded\"});oe(),de>0||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),t()}),1)):t())}function t(){Lr||(Lr=!0,s.calledRun=!0,U||(ie(),ue(),i(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),ce()))}}function mn(e,t){if(!t||!x||0!==e){if(!t&&E)throw postMessage({cmd:\"exitProcess\",returnCode:e}),new ln(e);x||(Le.terminateAllThreads(),se(),s.onExit&&s.onExit(e),U=!0),m(e,new ln(e))}}if(s.UTF8ToString=Y,s.stringToUTF8=z,s.lengthBytesUTF8=q,s.PThread=Le,s.stackSave=nn,s.stackRestore=an,s.stackAlloc=on,s.PThread=Le,s.wasmMemory=D,s.ExitStatus=ln,pe=function e(){Lr||dn(),Lr||(pe=e)},s.run=dn,s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);s.preInit.length>0;)s.preInit.pop()();return E&&Le.initWorker(),dn(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\r\nvar ortWasm = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\r\n  return (\r\nfunction(ortWasm) {\r\n  ortWasm = ortWasm || {};\r\n\r\nvar Module=typeof ortWasm!==\"undefined\"?ortWasm:{};var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);quit_=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){read_=function shell_read(f){return read(f)}}readBinary=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){arguments_=scriptArgs}else if(typeof arguments!=\"undefined\"){arguments_=arguments}if(typeof quit===\"function\"){quit_=function(status){quit(status)}}if(typeof print!==\"undefined\"){if(typeof console===\"undefined\")console={};console.log=print;console.warn=console.error=typeof printErr!==\"undefined\"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime;if(Module[\"noExitRuntime\"])noExitRuntime=Module[\"noExitRuntime\"];if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;__ATINIT__.push({func:function(){___wasm_call_ctors()}});function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what+=\"\";err(what);ABORT=true;EXITSTATUS=1;what=\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var fileURIPrefix=\"file://\";function isFileURI(filename){return hasPrefix(filename,fileURIPrefix)}var wasmBinaryFile=\"ort-wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"T\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"wa\"];removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){wasmTable.get(func)()}else{wasmTable.get(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var ExceptionInfoAttrs={DESTRUCTOR_OFFSET:0,REFCOUNT_OFFSET:4,TYPE_OFFSET:8,CAUGHT_OFFSET:12,RETHROWN_OFFSET:13,SIZE:16};function ___cxa_allocate_exception(size){return _malloc(size+ExceptionInfoAttrs.SIZE)+ExceptionInfoAttrs.SIZE}function _atexit(func,arg){__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(a0,a1){return _atexit(a0,a1)}function ___cxa_thread_atexit(a0,a1){return _atexit(a0,a1)}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-ExceptionInfoAttrs.SIZE;this.set_type=function(type){HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]=type};this.get_type=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.TYPE_OFFSET>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+ExceptionInfoAttrs.DESTRUCTOR_OFFSET>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.CAUGHT_OFFSET>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+ExceptionInfoAttrs.RETHROWN_OFFSET>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2];HEAP32[this.ptr+ExceptionInfoAttrs.REFCOUNT_OFFSET>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function ___sys_access(path,amode){path=SYSCALLS.getStr(path);return SYSCALLS.doAccess(path,amode)}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}function ___sys_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_fstat64(fd,buf){}function ___sys_getdents64(fd,dirp,count){}function ___sys_getpid(){return 42}function ___sys_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;return 0}function ___sys_lstat64(path,buf){}function ___sys_mkdir(path,mode){path=SYSCALLS.getStr(path);return SYSCALLS.doMkdir(path,mode)}function syscallMmap2(addr,len,prot,flags,fd,off){off<<=12;var ptr;var allocated=false;if((flags&16)!==0&&addr%16384!==0){return-28}if((flags&32)!==0){ptr=_memalign(16384,len);if(!ptr)return-48;_memset(ptr,0,len);allocated=true}else{return-52}SYSCALLS.mappings[ptr]={malloc:ptr,len:len,allocated:allocated,fd:fd,prot:prot,flags:flags,offset:off};return ptr}function ___sys_mmap2(addr,len,prot,flags,fd,off){return syscallMmap2(addr,len,prot,flags,fd,off)}function syscallMunmap(addr,len){if((addr|0)===-1||len===0){return-28}var info=SYSCALLS.mappings[addr];if(!info)return 0;if(len===info.len){SYSCALLS.mappings[addr]=null;if(info.allocated){_free(info.malloc)}}return 0}function ___sys_munmap(addr,len){return syscallMunmap(addr,len)}function ___sys_open(path,flags,varargs){SYSCALLS.varargs=varargs}function ___sys_readlink(path,buf,bufsize){path=SYSCALLS.getStr(path);return SYSCALLS.doReadlink(path,buf,bufsize)}function ___sys_rmdir(path){}function ___sys_stat64(path,buf){}function ___sys_unlink(path){}function _abort(){abort()}var _emscripten_get_now;if(ENVIRONMENT_IS_NODE){_emscripten_get_now=function(){var t=process[\"hrtime\"]();return t[0]*1e3+t[1]/1e6}}else if(typeof dateNow!==\"undefined\"){_emscripten_get_now=dateNow}else _emscripten_get_now=function(){return performance.now()};var _emscripten_get_now_is_monotonic=true;function _clock_gettime(clk_id,tp){var now;if(clk_id===0){now=Date.now()}else if((clk_id===1||clk_id===4)&&_emscripten_get_now_is_monotonic){now=_emscripten_get_now()}else{setErrNo(28);return-1}HEAP32[tp>>2]=now/1e3|0;HEAP32[tp+4>>2]=now%1e3*1e3*1e3|0;return 0}function _difftime(time1,time0){return time1-time0}function _dlclose(handle){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlerror(){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlopen(filename,flag){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _dlsym(handle,symbol){abort(\"To use dlopen, you need to use Emscripten's linking support, see https://github.com/emscripten-core/emscripten/wiki/Linking\")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}function _emscripten_thread_sleep(msecs){var start=_emscripten_get_now();while(_emscripten_get_now()-start<msecs){}}var ENV={};function getExecutableName(){return thisProgram||\"./this.program\"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator===\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\";var env={\"USER\":\"web_user\",\"LOGNAME\":\"web_user\",\"PATH\":\"/\",\"PWD\":\"/\",\"HOME\":\"/home/web_user\",\"LANG\":lang,\"_\":getExecutableName()};for(var x in ENV){env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+\"=\"+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _fd_close(fd){return 0}function _fd_fdstat_get(fd,pbuf){var type=fd==1||fd==2?2:abort();HEAP8[pbuf>>0]=type;return 0}function _fd_read(fd,iov,iovcnt,pnum){var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _gmtime_r(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getUTCSeconds();HEAP32[tmPtr+4>>2]=date.getUTCMinutes();HEAP32[tmPtr+8>>2]=date.getUTCHours();HEAP32[tmPtr+12>>2]=date.getUTCDate();HEAP32[tmPtr+16>>2]=date.getUTCMonth();HEAP32[tmPtr+20>>2]=date.getUTCFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getUTCDay();HEAP32[tmPtr+36>>2]=0;HEAP32[tmPtr+32>>2]=0;var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;if(!_gmtime_r.GMTString)_gmtime_r.GMTString=allocateUTF8(\"GMT\");HEAP32[tmPtr+40>>2]=_gmtime_r.GMTString;return tmPtr}function _tzset(){if(_tzset.called)return;_tzset.called=true;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[__get_timezone()>>2]=stdTimezoneOffset*60;HEAP32[__get_daylight()>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\\(([A-Za-z ]+)\\)$/);return match?match[1]:\"GMT\"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function _mktime(tmPtr){_tzset();var date=new Date(HEAP32[tmPtr+20>>2]+1900,HEAP32[tmPtr+16>>2],HEAP32[tmPtr+12>>2],HEAP32[tmPtr+8>>2],HEAP32[tmPtr+4>>2],HEAP32[tmPtr>>2],0);var dst=HEAP32[tmPtr+32>>2];var guessedOffset=date.getTimezoneOffset();var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dstOffset=Math.min(winterOffset,summerOffset);if(dst<0){HEAP32[tmPtr+32>>2]=Number(summerOffset!=winterOffset&&dstOffset==guessedOffset)}else if(dst>0!=(dstOffset==guessedOffset)){var nonDstOffset=Math.max(winterOffset,summerOffset);var trueOffset=dst>0?dstOffset:nonDstOffset;date.setTime(date.getTime()+(trueOffset-guessedOffset)*6e4)}HEAP32[tmPtr+24>>2]=date.getDay();var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();return date.getTime()/1e3|0}function _pthread_create(){return 6}function _pthread_join(){return 28}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):\"\"};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_1[rule])}var WEEKDAYS=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var MONTHS=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];function leadingSomething(value,digits,character){var str=typeof value===\"number\"?value.toString():value||\"\";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,\"0\")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={\"%a\":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},\"%A\":function(date){return WEEKDAYS[date.tm_wday]},\"%b\":function(date){return MONTHS[date.tm_mon].substring(0,3)},\"%B\":function(date){return MONTHS[date.tm_mon]},\"%C\":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},\"%d\":function(date){return leadingNulls(date.tm_mday,2)},\"%e\":function(date){return leadingSomething(date.tm_mday,2,\" \")},\"%g\":function(date){return getWeekBasedYear(date).toString().substring(2)},\"%G\":function(date){return getWeekBasedYear(date)},\"%H\":function(date){return leadingNulls(date.tm_hour,2)},\"%I\":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},\"%j\":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},\"%m\":function(date){return leadingNulls(date.tm_mon+1,2)},\"%M\":function(date){return leadingNulls(date.tm_min,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return\"AM\"}else{return\"PM\"}},\"%S\":function(date){return leadingNulls(date.tm_sec,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(date){return date.tm_wday||7},\"%U\":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?\"01\":\"00\"},\"%V\":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return\"53\"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return\"01\"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},\"%w\":function(date){return date.tm_wday},\"%W\":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?\"01\":\"00\"},\"%y\":function(date){return(date.tm_year+1900).toString().substring(2)},\"%Y\":function(date){return date.tm_year+1900},\"%z\":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?\"+\":\"-\")+String(\"0000\"+off).slice(-4)},\"%Z\":function(date){return date.tm_zone},\"%%\":function(){return\"%\"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,\"g\"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _sysconf(name){switch(name){case 30:return 16384;case 85:var maxHeapSize=2147483648;return maxHeapSize/16384;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:case 80:case 81:case 79:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator===\"object\")return navigator[\"hardwareConcurrency\"]||1;return 1}}setErrNo(28);return-1}function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var asmLibraryArg={\"a\":___cxa_allocate_exception,\"c\":___cxa_atexit,\"d\":___cxa_thread_atexit,\"b\":___cxa_throw,\"F\":___sys_access,\"p\":___sys_fcntl64,\"L\":___sys_fstat64,\"O\":___sys_getdents64,\"m\":___sys_getpid,\"G\":___sys_ioctl,\"K\":___sys_lstat64,\"J\":___sys_mkdir,\"N\":___sys_mmap2,\"M\":___sys_munmap,\"j\":___sys_open,\"E\":___sys_readlink,\"H\":___sys_rmdir,\"r\":___sys_stat64,\"I\":___sys_unlink,\"i\":_abort,\"q\":_clock_gettime,\"u\":_difftime,\"R\":_dlclose,\"h\":_dlerror,\"S\":_dlopen,\"Q\":_dlsym,\"y\":_emscripten_memcpy_big,\"f\":_emscripten_resize_heap,\"D\":_emscripten_thread_sleep,\"B\":_environ_get,\"C\":_environ_sizes_get,\"g\":_fd_close,\"z\":_fd_fdstat_get,\"o\":_fd_read,\"x\":_fd_seek,\"n\":_fd_write,\"A\":_gettimeofday,\"v\":_gmtime_r,\"k\":_localtime_r,\"t\":_mktime,\"w\":_pthread_create,\"l\":_pthread_join,\"P\":_strftime,\"e\":_strftime_l,\"s\":_sysconf};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"U\"]).apply(null,arguments)};var _OrtInit=Module[\"_OrtInit\"]=function(){return(_OrtInit=Module[\"_OrtInit\"]=Module[\"asm\"][\"V\"]).apply(null,arguments)};var _OrtCreateSessionOptions=Module[\"_OrtCreateSessionOptions\"]=function(){return(_OrtCreateSessionOptions=Module[\"_OrtCreateSessionOptions\"]=Module[\"asm\"][\"W\"]).apply(null,arguments)};var _OrtAddSessionConfigEntry=Module[\"_OrtAddSessionConfigEntry\"]=function(){return(_OrtAddSessionConfigEntry=Module[\"_OrtAddSessionConfigEntry\"]=Module[\"asm\"][\"X\"]).apply(null,arguments)};var _OrtReleaseSessionOptions=Module[\"_OrtReleaseSessionOptions\"]=function(){return(_OrtReleaseSessionOptions=Module[\"_OrtReleaseSessionOptions\"]=Module[\"asm\"][\"Y\"]).apply(null,arguments)};var _OrtCreateSession=Module[\"_OrtCreateSession\"]=function(){return(_OrtCreateSession=Module[\"_OrtCreateSession\"]=Module[\"asm\"][\"Z\"]).apply(null,arguments)};var _OrtReleaseSession=Module[\"_OrtReleaseSession\"]=function(){return(_OrtReleaseSession=Module[\"_OrtReleaseSession\"]=Module[\"asm\"][\"_\"]).apply(null,arguments)};var _OrtGetInputCount=Module[\"_OrtGetInputCount\"]=function(){return(_OrtGetInputCount=Module[\"_OrtGetInputCount\"]=Module[\"asm\"][\"$\"]).apply(null,arguments)};var _OrtGetOutputCount=Module[\"_OrtGetOutputCount\"]=function(){return(_OrtGetOutputCount=Module[\"_OrtGetOutputCount\"]=Module[\"asm\"][\"aa\"]).apply(null,arguments)};var _OrtGetInputName=Module[\"_OrtGetInputName\"]=function(){return(_OrtGetInputName=Module[\"_OrtGetInputName\"]=Module[\"asm\"][\"ba\"]).apply(null,arguments)};var _OrtGetOutputName=Module[\"_OrtGetOutputName\"]=function(){return(_OrtGetOutputName=Module[\"_OrtGetOutputName\"]=Module[\"asm\"][\"ca\"]).apply(null,arguments)};var _OrtFree=Module[\"_OrtFree\"]=function(){return(_OrtFree=Module[\"_OrtFree\"]=Module[\"asm\"][\"da\"]).apply(null,arguments)};var _OrtCreateTensor=Module[\"_OrtCreateTensor\"]=function(){return(_OrtCreateTensor=Module[\"_OrtCreateTensor\"]=Module[\"asm\"][\"ea\"]).apply(null,arguments)};var _OrtGetTensorData=Module[\"_OrtGetTensorData\"]=function(){return(_OrtGetTensorData=Module[\"_OrtGetTensorData\"]=Module[\"asm\"][\"fa\"]).apply(null,arguments)};var _OrtReleaseTensor=Module[\"_OrtReleaseTensor\"]=function(){return(_OrtReleaseTensor=Module[\"_OrtReleaseTensor\"]=Module[\"asm\"][\"ga\"]).apply(null,arguments)};var _OrtCreateRunOptions=Module[\"_OrtCreateRunOptions\"]=function(){return(_OrtCreateRunOptions=Module[\"_OrtCreateRunOptions\"]=Module[\"asm\"][\"ha\"]).apply(null,arguments)};var _OrtAddRunConfigEntry=Module[\"_OrtAddRunConfigEntry\"]=function(){return(_OrtAddRunConfigEntry=Module[\"_OrtAddRunConfigEntry\"]=Module[\"asm\"][\"ia\"]).apply(null,arguments)};var _OrtReleaseRunOptions=Module[\"_OrtReleaseRunOptions\"]=function(){return(_OrtReleaseRunOptions=Module[\"_OrtReleaseRunOptions\"]=Module[\"asm\"][\"ja\"]).apply(null,arguments)};var _OrtRun=Module[\"_OrtRun\"]=function(){return(_OrtRun=Module[\"_OrtRun\"]=Module[\"asm\"][\"ka\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"la\"]).apply(null,arguments)};var ___errno_location=Module[\"___errno_location\"]=function(){return(___errno_location=Module[\"___errno_location\"]=Module[\"asm\"][\"ma\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"na\"]).apply(null,arguments)};var _memset=Module[\"_memset\"]=function(){return(_memset=Module[\"_memset\"]=Module[\"asm\"][\"oa\"]).apply(null,arguments)};var __get_tzname=Module[\"__get_tzname\"]=function(){return(__get_tzname=Module[\"__get_tzname\"]=Module[\"asm\"][\"pa\"]).apply(null,arguments)};var __get_daylight=Module[\"__get_daylight\"]=function(){return(__get_daylight=Module[\"__get_daylight\"]=Module[\"asm\"][\"qa\"]).apply(null,arguments)};var __get_timezone=Module[\"__get_timezone\"]=function(){return(__get_timezone=Module[\"__get_timezone\"]=Module[\"asm\"][\"ra\"]).apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return(stackSave=Module[\"stackSave\"]=Module[\"asm\"][\"sa\"]).apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return(stackRestore=Module[\"stackRestore\"]=Module[\"asm\"][\"ta\"]).apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return(stackAlloc=Module[\"stackAlloc\"]=Module[\"asm\"][\"ua\"]).apply(null,arguments)};var _memalign=Module[\"_memalign\"]=function(){return(_memalign=Module[\"_memalign\"]=Module[\"asm\"][\"va\"]).apply(null,arguments)};Module[\"UTF8ToString\"]=UTF8ToString;Module[\"stringToUTF8\"]=stringToUTF8;Module[\"lengthBytesUTF8\"]=lengthBytesUTF8;Module[\"stackSave\"]=stackSave;Module[\"stackRestore\"]=stackRestore;Module[\"stackAlloc\"]=stackAlloc;var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\r\n\r\n\r\n  return ortWasm.ready\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n  module.exports = ortWasm;\r\nelse if (typeof define === 'function' && define['amd'])\r\n  define([], function() { return ortWasm; });\r\nelse if (typeof exports === 'object')\r\n  exports[\"ortWasm\"] = ortWasm;\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/* eslint-disable import/no-internal-modules */\r\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {Session} from './onnxjs/session';\r\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\r\n\r\nclass OnnxjsBackend implements Backend {\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  async init(): Promise<void> {}\r\n\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\r\n    // onnxruntime-common).\r\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\r\n    //       Currently we allow this to happen to make test runner work.\r\n    const session = new Session(options as unknown as Session.Config);\r\n\r\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\r\n    if (typeof pathOrBuffer === 'string') {\r\n      await session.loadModel(pathOrBuffer);\r\n    } else {\r\n      await session.loadModel(pathOrBuffer);\r\n    }\r\n\r\n    return new OnnxjsSessionHandler(session);\r\n  }\r\n}\r\n\r\nexport const onnxjsBackend = new OnnxjsBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\r\nimport {cpus} from 'os';\r\nimport {promisify} from 'util';\r\n\r\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\r\nimport {initializeWebAssembly} from './wasm/wasm-factory';\r\n\r\n/**\r\n * This function initializes all flags for WebAssembly.\r\n *\r\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\r\n * being created, to override default value.\r\n */\r\nexport const initializeFlags = (): void => {\r\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\r\n    env.wasm.initTimeout = 0;\r\n  }\r\n\r\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads < 0) {\r\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\r\n    env.wasm.numThreads = Math.ceil((numCpuLogicalCores || 1) / 2);\r\n  }\r\n  env.wasm.numThreads = Math.min(4, env.wasm.numThreads);\r\n};\r\n\r\nclass OnnxruntimeWebAssemblyBackend implements Backend {\r\n  async init(): Promise<void> {\r\n    // populate wasm flags\r\n    initializeFlags();\r\n\r\n    // init wasm\r\n    await initializeWebAssembly();\r\n  }\r\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\r\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\r\n      Promise<SessionHandler> {\r\n    let buffer: Uint8Array;\r\n    if (typeof pathOrBuffer === 'string') {\r\n      if (typeof fetch === 'undefined') {\r\n        // node\r\n        buffer = await promisify(readFile)(pathOrBuffer);\r\n      } else {\r\n        // browser\r\n        const response = await fetch(pathOrBuffer);\r\n        const arrayBuffer = await response.arrayBuffer();\r\n        buffer = new Uint8Array(arrayBuffer);\r\n      }\r\n    } else {\r\n      buffer = pathOrBuffer;\r\n    }\r\n\r\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\r\n    handler.loadModel(buffer, options);\r\n    return Promise.resolve(handler);\r\n  }\r\n}\r\n\r\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport * from 'onnxruntime-common';\r\nimport {registerBackend} from 'onnxruntime-common';\r\nimport {onnxjsBackend} from './backend-onnxjs';\r\nimport {wasmBackend} from './backend-wasm';\r\n\r\nregisterBackend('webgl', onnxjsBackend, 1);\r\nregisterBackend('wasm', wasmBackend, 2);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil} from './util';\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        if (attr instanceof onnx.AttributeProto) {\r\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        } else if (attr instanceof ortFbs.Attribute) {\r\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n        }\r\n      }\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\r\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\r\n    switch (type) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\r\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\r\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\r\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const tensorProtos = value as onnx.ITensorProto[];\r\n        return tensorProtos.map(value => Tensor.fromProto(value));\r\n      } else if (attr instanceof ortFbs.Attribute) {\r\n        const tensorProtos = value as ortFbs.Tensor[];\r\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\r\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\r\n      // string attributes are returned as string, so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8String = value as Uint8Array;\r\n        return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\r\n      }\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\r\n      // format strings attributes are returned as string[], so no conversion is needed.\r\n      if (attr instanceof onnx.AttributeProto) {\r\n        const utf8Strings = value as Uint8Array[];\r\n        return utf8Strings.map(\r\n            utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\r\n      }\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\r\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\r\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\r\n  }\r\n\r\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\r\n    switch (attr.type()) {\r\n      case ortFbs.AttributeType.FLOAT:\r\n        return attr.f();\r\n      case ortFbs.AttributeType.INT:\r\n        return attr.i();\r\n      case ortFbs.AttributeType.STRING:\r\n        return attr.s();\r\n      case ortFbs.AttributeType.TENSOR:\r\n        return attr.t();\r\n      case ortFbs.AttributeType.GRAPH:\r\n        return attr.g();\r\n      case ortFbs.AttributeType.FLOATS:\r\n        return attr.floatsArray();\r\n      case ortFbs.AttributeType.INTS: {\r\n        const ints = [];\r\n        for (let i = 0; i < attr.intsLength(); i++) {\r\n          ints.push(attr.ints(i)!);\r\n        }\r\n        return ints;\r\n      }\r\n      case ortFbs.AttributeType.STRINGS: {\r\n        const strings = [];\r\n        for (let i = 0; i < attr.stringsLength(); i++) {\r\n          strings.push(attr.strings(i));\r\n        }\r\n        return strings;\r\n      }\r\n      case ortFbs.AttributeType.TENSORS: {\r\n        const tensors = [];\r\n        for (let i = 0; i < attr.tensorsLength(); i++) {\r\n          tensors.push(attr.tensors(i)!);\r\n        }\r\n        return tensors;\r\n      }\r\n      // case ortFbs.AttributeType.GRAPHS:\r\n      // TODO: Subgraph not supported yet.\r\n      // const graphs = [];\r\n      // for (let i = 0; i < attr.graphsLength(); i++) {\r\n      //   graphs.push(attr.graphs(i)!);\r\n      // }\r\n      // return graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {WebGLBackend} from './backends/backend-webgl';\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node the node to resolve\r\n   * @param opsets a list of opsets that exported from the model\r\n   * @param graph the completely initialized graph\r\n   */\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\r\n\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\nexport const backend: {[name: string]: Backend} = {\r\n  webgl: new WebGLBackend(),\r\n};\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\r\n  if (!hint) {\r\n    return resolveBackend(['webgl']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    const backend = backendObj[backendHint];\r\n    let init = backend.initialize();\r\n    if (typeof init === 'object' && 'then' in init) {\r\n      init = await init;\r\n    }\r\n    if (init) {\r\n      backendsCache.set(backendHint, backend);\r\n      return backend;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend {\r\n  glContext: WebGLContext;\r\n\r\n  get contextId(): 'webgl'|'webgl2'|undefined {\r\n    return env.webgl.contextId;\r\n  }\r\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\r\n    env.webgl.contextId = value;\r\n  }\r\n\r\n  get matmulMaxBatchSize(): number|undefined {\r\n    return env.webgl.matmulMaxBatchSize;\r\n  }\r\n  set matmulMaxBatchSize(value: number|undefined) {\r\n    env.webgl.matmulMaxBatchSize = value;\r\n  }\r\n\r\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\r\n    return env.webgl.textureCacheMode;\r\n  }\r\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\r\n    env.webgl.textureCacheMode = value;\r\n  }\r\n\r\n  get pack(): boolean|undefined {\r\n    return env.webgl.pack;\r\n  }\r\n  set pack(value: boolean|undefined) {\r\n    env.webgl.pack = value;\r\n  }\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      if (typeof this.pack !== 'boolean') {\r\n        this.pack = false;\r\n      }\r\n\r\n      Logger.setWithEnv(env);\r\n\r\n      Logger.verbose(\r\n          'WebGLBackend',\r\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\r\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}.`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\nimport {squeezeShape} from './texture-layout-strategy';\r\nimport {TextureLayout} from './types';\r\nimport {generateShaderFuncNameFromInputSamplerName} from './utils';\r\nimport {generateShaderFuncNameFromInputSamplerNameAtOutCoords,} from './utils';\r\nimport {getCoordsDataType, getSqueezedParams, squeezeInputShape} from './utils';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.offsetToCoords(),\r\n      ...this.coordsToOffset(),\r\n      ...this.toVec(),\r\n      ...this.valueFrom(),\r\n      // TODO return these only when packing is enabled.\r\n      ...this.getCommonUtilFuncs(),\r\n      ...this.getInputsSamplingSnippets(),\r\n      ...this.getOutputSamplingSnippet()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'offsetToCoords';\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = 'coordsToOffset';\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates code for output sampler.\r\n   */\r\n\r\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    if (outputLayout.isPacked) {\r\n      return this.getPackedOutputSamplingSnippet(outputLayout);\r\n    } else {\r\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates code for packed output sampler.\r\n   */\r\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRGBASource = `\r\n      void setOutput(vec4 val) {\r\n        ${glsl.output} = val;\r\n      }\r\n    `;\r\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\r\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generates code for unpacked output sampler.\r\n   */\r\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\r\n    const outShape = outputLayout.unpackedShape;\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const funcName = 'getOutputCoords';\r\n    switch (outShape.length) {\r\n      case 0:\r\n        result[funcName] = this.getOutputScalarCoords();\r\n        break;\r\n      case 1:\r\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\r\n        break;\r\n      case 2:\r\n        result[funcName] =\r\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 3:\r\n        result[funcName] =\r\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 4:\r\n        result[funcName] = this.getOutputUnpacked4DCoords(\r\n            outShape as [number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 5:\r\n        result[funcName] = this.getOutputUnpacked5DCoords(\r\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      case 6:\r\n        result[funcName] = this.getOutputUnpacked6DCoords(\r\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\r\n        break;\r\n      default:\r\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    // TODO we need this to properly return a packed vec4 from kernels.\r\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\r\n    const floatTextureSetRSource = `\r\n        void setOutput(float val) {\r\n          ${glsl.output} = vec4(val, 0, 0, 0);\r\n        }\r\n    `;\r\n    const floatTextureSetRFuncName = 'floatTextureSetR';\r\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Scalar output coordinates.\r\n   */\r\n  protected getOutputScalarCoords(): GlslLibRoutine {\r\n    return new GlslLibRoutine(`\r\n      int getOutputCoords() {\r\n        return 0;\r\n      }\r\n    `);\r\n  }\r\n\r\n  /**\r\n   * 1D packed output coordinates.\r\n   */\r\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = texShape;\r\n    let source = '';\r\n    if (packedTexShape[0] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    if (packedTexShape[1] === 1) {\r\n      source = `\r\n          int getOutputCoords() {\r\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 2D packed output coordinates.\r\n   */\r\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\r\n      source = `\r\n        ivec2 getOutputCoords() {\r\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source);\r\n    }\r\n\r\n    const packedTexShape = texShape;\r\n    // texels needed to accommodate a logical row\r\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\r\n\r\n    /**\r\n     * getOutputCoords\r\n     *\r\n     * resTexRC: The rows and columns of the texels. If you move over one\r\n     * texel to the right in the packed texture, you are moving over one column\r\n     * (not two).\r\n     *\r\n     * index: The texel index\r\n     */\r\n    source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * 3D packed output coordinates.\r\n   */\r\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\r\n    const source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n          int b = index / ${texelsInBatch};\r\n          index -= b * ${texelsInBatch};\r\n\r\n          // reverse r and c order for packed texture\r\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n          int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n          return ivec3(b, r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * ND packed output coordinates.\r\n   */\r\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n\r\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\r\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\r\n    let texelsInBatchN = texelsInBatch;\r\n    let batches = '';\r\n    let coords = 'b, r, c';\r\n\r\n    for (let b = 2; b < shape.length - 1; b++) {\r\n      texelsInBatchN *= shape[shape.length - b - 1];\r\n      batches = `\r\n      int b${b} = index / ${texelsInBatchN};\r\n      index -= b${b} * ${texelsInBatchN};\r\n    ` + batches;\r\n      coords = `b${b}, ` + coords;\r\n    }\r\n    const source = `\r\n      ivec${shape.length} getOutputCoords() {\r\n        ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\r\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\r\n\r\n        ${batches}\r\n\r\n        int b = index / ${texelsInBatch};\r\n        index -= b * ${texelsInBatch};\r\n\r\n        // reverse r and c order for packed texture\r\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\r\n        int c = 2 * (index / ${texelsInLogicalRow});\r\n\r\n        return ivec${shape.length}(${coords});\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D output coordinates.\r\n   */\r\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        int getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D output coordinates.\r\n   */\r\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\r\n    const source = `\r\n        ivec2 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          int r = index / ${shape[1]};\r\n          int c = index - r * ${shape[1]};\r\n          return ivec2(r, c);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D output coordinates.\r\n   */\r\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n        ivec3 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec3(r, c, d);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D output coordinates.\r\n   */\r\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec4 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec4(r, c, d, d2);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D output coordinates.\r\n   */\r\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\r\n      GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n      ivec5 getOutputCoords() {\r\n          ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                                vec2(${texShape[0]}, ${texShape[1]}));\r\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n          ${coordsFromIndexSnippet}\r\n          return ivec5(r, c, d, d2, d3);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D output coordinates.\r\n   */\r\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\r\n    number, number\r\n  ]): GlslLibRoutine {\r\n    let source = '';\r\n    const rank = shape.length;\r\n\r\n    let strides = null;\r\n    if (rank < 2) {\r\n      strides = [];\r\n    }\r\n\r\n    strides = new Array(rank - 1);\r\n    strides[rank - 2] = shape[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * shape[i + 1];\r\n    }\r\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\r\n    const coordsFromIndexSnippet =\r\n        strides\r\n            .map((stride, i) => {\r\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\r\n              const line2 = i === strides.length - 1 ?\r\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\r\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\r\n              return `${line1}; ${line2};`;\r\n            })\r\n            .join('');\r\n\r\n    source = `\r\n     ivec6 getOutputCoords() {\r\n         ivec2 resTexRC = ivec2(TexCoords.xy *\r\n                               vec2(${texShape[0]}, ${texShape[1]}));\r\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\r\n         ${coordsFromIndexSnippet}\r\n         return ivec6(r, c, d, d2, d3, d4);\r\n       }\r\n     `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Generates code for common UV coords computation utility functions.\r\n   */\r\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    let funcName = 'uvFromFlat';\r\n    result[funcName] = new GlslLibRoutine(`\r\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\r\n      int texC = index / texNumR;\r\n      int texR = index - texC * texNumR;\r\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\r\n      //       v.\r\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\r\n    }\r\n    `);\r\n    funcName = 'packedUVfrom1D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\r\n        int texelIndex = index / 2;\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom2D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\r\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = texelIndex / texNumC;\r\n        int texC = texelIndex - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'packedUVfrom3D';\r\n    result[funcName] = new GlslLibRoutine(`\r\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\r\n          int texelsInBatch, int texelsInLogicalRow, int b,\r\n          int row, int col) {\r\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\r\n        int texR = index / texNumC;\r\n        int texC = index - texR * texNumC;\r\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\r\n      }\r\n      `);\r\n    funcName = 'sampleTexture';\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    result[funcName] = new GlslLibRoutine(`\r\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\r\n            return ${glsl.texture2D}(textureSampler, uv).r;\r\n        }`);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for inputs\r\n   */\r\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    this.context.programInfo.samplers.forEach((samplerName, i) => {\r\n      const inputLayout = this.context.programInfo.inputLayouts[i];\r\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\r\n      if (inputLayout.isPacked) {\r\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      } else {\r\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\r\n      }\r\n\r\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\r\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\r\n        if (inputLayout.isPacked) {\r\n          result[outCoordFuncName] =\r\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        } else {\r\n          result[outCoordFuncName] =\r\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for output coordinates of samplers\r\n   */\r\n  protected getPackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texName = name;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\r\n\r\n    const inRank = inShape.length;\r\n    const outRank = outShape.length;\r\n\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n\r\n    let output = 'return outputValue;';\r\n    const inSize = ShapeUtil.size(inShape);\r\n    const isInputScalar = inSize === 1;\r\n    const outSize = ShapeUtil.size(outShape);\r\n    const isOutputScalar = outSize === 1;\r\n\r\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\r\n      output = `\r\n        return vec4(outputValue.xx, outputValue.yy);\r\n      `;\r\n    } else if (isInputScalar && !isOutputScalar) {\r\n      if (outRank === 1) {\r\n        output = `\r\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\r\n        `;\r\n      } else {\r\n        output = `\r\n          return vec4(outputValue.x);\r\n        `;\r\n      }\r\n    } else if (broadcastDims.length) {\r\n      const rows = inRank - 2;\r\n      const cols = inRank - 1;\r\n\r\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.x);';\r\n      } else if (broadcastDims.indexOf(rows) > -1) {\r\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\r\n            'outputValue.x, outputValue.y);';\r\n      } else if (broadcastDims.indexOf(cols) > -1) {\r\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\r\n      }\r\n    }\r\n    const source = `\r\n      vec4 ${funcName}() {\r\n        ${type} coords = getOutputCoords();\r\n        ${coordsSnippet}\r\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        ${output}\r\n      }\r\n    `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked output coordinates of samplers\r\n   */\r\n  protected getUnpackedSamplerAtOutputCoords(\r\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\r\n    const outTexShape = [outputLayout.width, outputLayout.height];\r\n    const inTexShape = [inputLayout.width, inputLayout.height];\r\n    const inRank = inputLayout.unpackedShape.length;\r\n    const outRank = outputLayout.unpackedShape.length;\r\n    const inShape = inputLayout.unpackedShape;\r\n    const outShape = outputLayout.unpackedShape;\r\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\r\n\r\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, TexCoords);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const type = getCoordsDataType(outRank);\r\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\r\n    const rankDiff = outRank - inRank;\r\n    let coordsSnippet: string;\r\n    const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\r\n\r\n    if (inRank === 0) {\r\n      coordsSnippet = '';\r\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\r\n      coordsSnippet = 'coords = 0;';\r\n    } else {\r\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\r\n    }\r\n    let unpackedCoordsSnippet = '';\r\n    if (outRank < 2 && inRank > 0) {\r\n      unpackedCoordsSnippet = 'coords';\r\n    } else {\r\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\r\n    }\r\n    const source = `\r\n        float ${funcName}() {\r\n          ${type} coords = getOutputCoords();\r\n          ${coordsSnippet}\r\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for packed operations.\r\n   */\r\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    switch (inputLayout.unpackedShape.length) {\r\n      case 0:\r\n        return this.getPackedSamplerScalar(funcName, name);\r\n      case 1:\r\n        return this.getPackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getPackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getPackedSampler3D(funcName, name, inputLayout);\r\n      default:\r\n        return this.getPackedSamplerND(funcName, name, inputLayout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Constructing snippets for unpacked operations.\r\n   */\r\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    switch (shape.length) {\r\n      case 0:\r\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\r\n      case 1:\r\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\r\n      case 2:\r\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\r\n      case 3:\r\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\r\n      case 4:\r\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\r\n      case 5:\r\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\r\n      case 6:\r\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\r\n      default:\r\n        // TODO support more dimensionalities\r\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Packed scalar snippet.\r\n   */\r\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const source = `\r\n          vec4 ${funcName}() {\r\n            return ${glsl.texture2D}(${name}, halfCR);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Packed 1D snippet.\r\n   */\r\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[1], texShape[0]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int index) {\r\n      vec2 uv = packedUVfrom1D(\r\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 2D snippet.\r\n   */\r\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    const texNumR = texShape[0];\r\n    const texNumC = texShape[1];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\r\n        return ${glsl.texture2D}(${name}, uv);\r\n      }`;\r\n\r\n      return new GlslLibRoutine(packedSampler);\r\n    }\r\n    const packedTexShape = texShape;\r\n    const valuesPerRow = Math.ceil(shape[1] / 2);\r\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\r\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\r\n  }\r\n\r\n  /**\r\n   * Packed 3D snippet.\r\n   */\r\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    if (shape[0] === 1) {\r\n      const squeezedShape = shape.slice(1);\r\n      const keptDims = [1, 2];\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['b', 'row', 'col'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\r\n      const packedSampler = `${samplerRoutine.routineBody}\r\n      vec4 ${funcName}(int b, int row, int col) {\r\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n      } `;\r\n      const source = packedSampler;\r\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\r\n    }\r\n    const texNumR = packedTexShape[0];\r\n    const texNumC = packedTexShape[1];\r\n\r\n    const valuesPerRow = Math.ceil(shape[2] / 2);\r\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\r\n\r\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\r\n      vec2 uv = packedUVfrom3D(\r\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\r\n      return ${glsl.texture2D}(${name}, uv);}`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\r\n  }\r\n  /*\r\n   * Packed ND snippet.\r\n   */\r\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const rank = shape.length;\r\n    const texShape = [inputLayout.width, inputLayout.height];\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n\r\n    const packedTexShape = [texShape[0], texShape[1]];\r\n    const texNumR = packedTexShape[1];\r\n    const texNumC = packedTexShape[0];\r\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\r\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\r\n    let params = 'int b, int row, int col';\r\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\r\n    for (let b = 2; b < rank - 1; b++) {\r\n      params = `int b${b}, ` + params;\r\n      texelsInBatch *= shape[rank - b - 1];\r\n      index = `b${b} * ${texelsInBatch} + ` + index;\r\n    }\r\n    const packedSampler = `vec4 ${funcName}(${params}) {\r\n      int index = ${index};\r\n      int texR = index / ${texNumC};\r\n      int texC = index - texR * ${texNumC};\r\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\r\n      return ${glsl.texture2D}(${name}, uv);\r\n    }`;\r\n    const source = packedSampler;\r\n    return new GlslLibRoutine(source);\r\n  }\r\n\r\n  /**\r\n   * Unpacked scalar snippet.\r\n   */\r\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\r\n    if (texNumR === 1 && texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}() {\r\n            return sampleTexture(${name}, halfCR);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}() {\r\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 1D snippet.\r\n   */\r\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const tNumR = inputLayout.width;\r\n    const tNumC = inputLayout.height;\r\n\r\n    if (tNumC === 1 && tNumR === 1) {\r\n      const source = `\r\n        float ${funcName}(int index) {\r\n          return sampleTexture(${name}, halfCR);\r\n        }\r\n      `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    if (tNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    if (tNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int index) {\r\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n    const source = `\r\n        float ${funcName}(int index) {\r\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 2D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n\r\n    // TODO: modify row/col order for other dimensions.\r\n    const texShape = [inputLayout.height, inputLayout.width];\r\n\r\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\r\n      const texNumR = texShape[1];\r\n      const texNumC = texShape[0];\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const params = ['col', 'row'];\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\r\n    }\r\n\r\n    const texNumR = texShape[1];\r\n    const texNumC = texShape[0];\r\n    if (texNumC === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    if (texNumR === 1) {\r\n      const source = `\r\n          float ${funcName}(int row, int col) {\r\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\r\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\r\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    }\r\n\r\n    const source = `\r\n        float ${funcName}(int row, int col) {\r\n          int index = col * ${shape[1]} + row;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 3D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride0 = shape[1] * shape[2];\r\n    const stride1 = shape[2];\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    const squeezedShape = newShape;\r\n    if (squeezedShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\r\n      const params = ['batch', 'col', 'row'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\r\n      // TODO: revisit the logic here to make it simpler\r\n      const revDims = keptDims.reverse();\r\n      const source = `\r\n          ${routine.routineBody}\r\n          float ${funcName}(int batch, int row, int col) {\r\n            return ${funcName}(${getSqueezedParams(params, revDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, routine.dependencies);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int depth, int row, int col) {\r\n            // Explicitly use integer operations as dot() only works on floats.\r\n            int index = depth * ${stride0} + col * ${stride1} + row;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n      `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 4D snippet.\r\n   */\r\n\r\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride2 = shape[3];\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    //\r\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\r\n    //\r\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    // if (newShape.length < shape.length) {\r\n    //   const newInputShape = squeezeInputShape(shape, newShape);\r\n    //   const params = ['row', 'col', 'depth', 'depth2'];\r\n    //   // Deep copy of input texture layout.\r\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n    //   newInputLayout.unpackedShape = newInputShape;\r\n    //   const source = `\r\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\r\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n    //       }\r\n    //     `;\r\n    //   return new GlslLibRoutine(\r\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n    // }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2) {\r\n          int index = row * ${stride0} + col * ${stride1} +\r\n              depth2 * ${stride2} + depth;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 5D snippet.\r\n   */\r\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride3 = shape[4];\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n          }\r\n        `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\r\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n          depth3 * ${stride3} + depth2;\r\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n          return sampleTexture(${name}, uv);\r\n        }\r\n      `;\r\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n  }\r\n\r\n  /**\r\n   * Unpacked 6D snippet.\r\n   */\r\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\r\n    const shape = inputLayout.unpackedShape;\r\n    const stride4 = shape[5];\r\n    const stride3 = shape[4] * stride4;\r\n    const stride2 = shape[3] * stride3;\r\n    const stride1 = shape[2] * stride2;\r\n    const stride0 = shape[1] * stride1;\r\n\r\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\r\n    if (newShape.length < shape.length) {\r\n      const newInputShape = squeezeInputShape(shape, newShape);\r\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\r\n      // Deep copy of input texture layout.\r\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\r\n      newInputLayout.unpackedShape = newInputShape;\r\n\r\n      const source = `\r\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\r\n            float ${funcName}(int row, int col, int depth,\r\n              int depth2, int depth3, int depth4) {\r\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\r\n            }\r\n          `;\r\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\r\n    }\r\n\r\n    const texNumR = inputLayout.width;\r\n    const texNumC = inputLayout.height;\r\n    const source = `\r\n          float ${funcName}(int row, int col, int depth,\r\n            int depth2, int depth3, int depth4) {\r\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\r\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\r\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\r\n            return sampleTexture(${name}, uv);\r\n          }\r\n        `;\r\n    return new GlslLibRoutine(\r\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\r\n  }\r\n\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine} {\r\n    const output = this.context.programInfo.outputLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const layout = programInfo.inputLayouts[i];\r\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n\r\n  /**\r\n   * Produces a packed value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}_Pack`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        vec4 ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset_${varName}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          return ${glsl.texture2D}(${varName}, coords);\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ProgramInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: readonly number[];\r\n  outputShape: readonly number[];\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(public glContext: WebGLContext, public programInfo: ProgramInfo) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\r\n    this.context = new GlslContext(glContext, programInfo);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, programInfo.outputLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.samplers, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = '';\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + '\\n';\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n    const vec2 halfCR = vec2(0.5, 0.5);\r\n\r\n    // Custom vector types to handle higher dimenalities.\r\n    struct ivec5\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n    };\r\n\r\n    struct ivec6\r\n    {\r\n      int x;\r\n      int y;\r\n      int z;\r\n      int w;\r\n      int u;\r\n      int v;\r\n    };\r\n\r\n    int imod(int x, int y) {\r\n      return x - y * (x / y);\r\n    }\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\nimport {WebGLPack} from './ops/pack';\r\n\r\nimport {WebGLUint8Encode} from './ops/uint8-encode';\r\nimport {WebGLUnpack} from './ops/unpack';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {Artifact, RunData, TextureData, TextureLayout, WebGLOperator} from './types';\r\nimport {getPackedShape} from './utils';\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  private pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  private unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  run(op: WebGLOperator, inputs: Tensor[]): Tensor[] {\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, inputs);\r\n      if (!programInfo.name) {\r\n        programInfo.name = op.constructor?.name;\r\n      }\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, inputs);\r\n    this.runProgram(artifact, runData);\r\n    return [runData.outputTextureData.tensor];\r\n  }\r\n\r\n  checkAndUpdateTextureForm(artifact: Artifact, runData: RunData) {\r\n    // pack/unpack inputs\r\n    for (let i = 0; i < runData.inputTextureDatas.length; ++i) {\r\n      const input = runData.inputTextureDatas[i];\r\n      if (input.isPacked && !artifact.programInfo.expectPackedInputs) {\r\n        runData.inputTextureDatas[i] = this.unpack(input);\r\n      } else if (!input.isPacked && artifact.programInfo.expectPackedInputs) {\r\n        runData.inputTextureDatas[i] = this.pack(input);\r\n      }\r\n    }\r\n  }\r\n  runProgram(artifact: Artifact, runData: RunData) {\r\n    this.checkAndUpdateTextureForm(artifact, runData);\r\n\r\n    // output should match\r\n    if (!!runData.outputTextureData.isPacked !== !!artifact.programInfo.expectPackedOutputs) {\r\n      throw new Error('output property packed inconsistent');\r\n    }\r\n\r\n    this.session.programManager.run(artifact, runData);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  getOrCreateTextureData(tensor: Tensor, layout?: TextureLayout, isPacked = false) {\r\n    let td = this.getTextureData(tensor.dataId, isPacked);\r\n    if (!td) {\r\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\r\n      if (!layout) {\r\n        layout = this.createTextureLayoutFromShape(tensor.dims.slice());\r\n      }\r\n      // if we don't find the texture data with specific pack mode in the cache, try with the different\r\n      // pack mode to see if the tensor is cached using that pack mode. If succeed, we can return this\r\n      // tensor data and later apply a pack/unpack op on this texture, no need to create a new one here.\r\n      td = this.getTextureData(tensor.dataId, !isPacked);\r\n      if (!td) {\r\n        if (isPacked) {\r\n          const unpackedTextureLayout = this.getOrCreateTextureLayout(tensor, 1, false, [], true);\r\n          const unpackedTextureData = this.createTextureData(\r\n              unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n          td = this.pack(unpackedTextureData);\r\n        } else {\r\n          td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n        }\r\n      }\r\n    } else {\r\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from the given data type and texture layout.\r\n   * Usage = Encoder.Usage.Default.\r\n   * @param dataType the tensor data type\r\n   */\r\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType): TextureData {\r\n    return this.createTextureData(layout, dataType);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object, using the given texture.\r\n   * This function does not create new texture. Usually used in scenarios using texture sharing. (eg. Reshape)\r\n   * @param dataType the tensor data type\r\n   * @param texture the WebGLTexture object to share\r\n   * @param tensorId the tensor ID of the shared tensor data\r\n   */\r\n  createSharedTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensorId?: Tensor.Id): TextureData {\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, undefined, tensorId);\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData), undefined,\r\n                  undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\r\n    return textureData;\r\n  }\r\n\r\n  getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ?\r\n        this.session.getTextureData(tensorId, isPacked) :\r\n        isPacked ? this.packedTextureDataCache.get(tensorId) : this.unpackedTextureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td, isPacked);\r\n    } else {\r\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\r\n    }\r\n  }\r\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\r\n    return !!this.getTextureData(tensor.dataId, isPacked);\r\n  }\r\n  /**\r\n   * Create a TextureLayout object from a tensor. If a related texture data is found, returns the cached texture layout.\r\n   */\r\n  getOrCreateTextureLayout(\r\n      tensor: Tensor, channels: 1|4 = 1, isPacked = false, unpackedShape?: readonly number[],\r\n      reverseWH = false): TextureLayout {\r\n    const td = this.getTextureData(tensor.dataId, isPacked);\r\n    if (td) {\r\n      return td;\r\n    }\r\n    return this.createTextureLayoutFromShape(\r\n        channels === 1 || isPacked ? tensor.dims : getPackedShape(tensor.dims), channels, unpackedShape,\r\n        isPacked || reverseWH ? {isPacked, reverseWH} : undefined);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureLayout object from shape.\r\n   */\r\n  createTextureLayoutFromShape(\r\n      shape: readonly number[], channels: 1|4 = 1, unpackedShape?: readonly number[],\r\n      prefs?: WidthHeightPrefs): TextureLayout {\r\n    const isPacked = !!(prefs && prefs.isPacked);\r\n    const [texWidth, texHeight] =\r\n        this.session.layoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\r\n    let [width, height] = [texWidth, texHeight];\r\n    if (prefs && prefs.reverseWH) {\r\n      width = texHeight;\r\n      height = texWidth;\r\n    }\r\n    const rank = shape.length;\r\n    let inferredDims = shape.slice(0);\r\n    if (rank === 0) {\r\n      inferredDims = [1];\r\n    }\r\n    if (channels === 1) {\r\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n      unpackedShape = shape;\r\n    } else if (isPacked) {\r\n      if (channels !== 4) {\r\n        throw new Error('a packed texture must be 4-channel');\r\n      }\r\n      unpackedShape = shape;\r\n      if (rank > 0) {\r\n        inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\r\n      }\r\n      if (rank > 1) {\r\n        inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\r\n      }\r\n    } else if (!unpackedShape) {\r\n      throw new Error('Unpacked shape is needed when using channels > 1');\r\n    }\r\n    return {\r\n      width,\r\n      height,\r\n      channels,\r\n      isPacked,\r\n      shape: inferredDims,\r\n      strides: ShapeUtil.computeStrides(inferredDims),\r\n      unpackedShape,\r\n      reversedWH: (prefs && prefs.reverseWH)\r\n    };\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (textureData.isPacked) {\r\n      return this.readTexture(this.unpack(textureData));\r\n    }\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      const op = new WebGLUint8Encode();\r\n      const uint8TD = op.runInternal(this, textureData);\r\n      return this.session.textureManager.readUint8TextureAsFloat(uint8TD);\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n\r\n  pack(input: TextureData): TextureData {\r\n    const cachedId = this.unpack2packMap.get(input.tensor.dataId);\r\n    if (cachedId) {\r\n      return this.packedTextureDataCache.get(cachedId)!;\r\n    }\r\n    const key = `${input.shape}`;\r\n    let op = this.session.packOpCache.get(key);\r\n    if (!op) {\r\n      op = new WebGLPack();\r\n      this.session.packOpCache.set(key, op);\r\n    }\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, [input.tensor]);\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, [input.tensor]);\r\n    this.runProgram(artifact, runData);\r\n    this.unpack2packMap.set(input.tensor.dataId, runData.outputTextureData.tensor.dataId);\r\n    return runData.outputTextureData;\r\n  }\r\n\r\n  unpack(input: TextureData): TextureData {\r\n    const cachedId = this.pack2unpackMap.get(input.tensor.dataId);\r\n    if (cachedId) {\r\n      return this.unpackedTextureDataCache.get(cachedId)!;\r\n    }\r\n    // For unpacked kernel, cache it by using input's unpackedShape as cache key.\r\n    // Note that we need to use input.unpackedShape instead of input.shape here,\r\n    // as the shape infers the packed texture shape. Different unpackedShape can have the\r\n    // same packed texture shape. For example, for unpacked shape, both [2, 3] and\r\n    // [2, 4] has the same packed shape [1, 2], but those two shapes should have different\r\n    // unpack shaders.\r\n    const key = `${input.unpackedShape}`;\r\n    let op = this.session.unpackOpCache.get(key);\r\n    if (!op) {\r\n      op = new WebGLUnpack();\r\n      this.session.unpackOpCache.set(key, op);\r\n    }\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, [input.tensor]);\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, [input.tensor]);\r\n    this.runProgram(artifact, runData);\r\n    this.pack2unpackMap.set(input.tensor.dataId, runData.outputTextureData.tensor.dataId);\r\n    return runData.outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {WebGLClip} from './ops/clip';\r\nimport {WebGLConcat} from './ops/concat';\r\nimport {WebGLConv} from './ops/conv';\r\nimport {WebGLDepthToSpace} from './ops/depth-to-space';\r\nimport {WebGLDropout} from './ops/dropout';\r\nimport {WebGLElu} from './ops/elu';\r\nimport {WebGLFlatten} from './ops/flatten';\r\nimport {WebGLGather} from './ops/gather';\r\nimport {WebGLGemm} from './ops/gemm';\r\nimport {WebGLImageScaler} from './ops/image-scaler';\r\nimport {WebGLInstanceNormalization} from './ops/instance-normalization';\r\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\r\nimport {WebGLMatMul} from './ops/matmul';\r\nimport {WebGLPad} from './ops/pad';\r\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\r\nimport * as reduceOps from './ops/reduce';\r\nimport {WebGLReshape} from './ops/reshape';\r\nimport {WebGLResizePacked} from './ops/resize-packed';\r\nimport {WebGLSlice, WebGLSliceV10} from './ops/slice';\r\nimport {WebGLSoftmax} from './ops/softmax';\r\nimport {WebGLSplit} from './ops/split';\r\nimport {WebGLSqueeze} from './ops/squeeze';\r\nimport {WebGLSum} from './ops/sum';\r\nimport {WebGLTile} from './ops/tile';\r\nimport {WebGLTranspose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\r\nimport {WebGLUpsample} from './ops/upsample';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\r\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\r\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\r\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\r\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\r\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\r\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\r\n  ['AveragePool', '', '7-10', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\r\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\r\n  ['Clip', '', '6-10', () => new WebGLClip()],\r\n  ['Concat', '', '4+', () => new WebGLConcat()],\r\n  ['Conv', '', '1+', () => new WebGLConv()],\r\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\r\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\r\n  ['Dropout', '', '7+', () => new WebGLDropout()],\r\n  ['DepthToSpace', '', '1+', () => new WebGLDepthToSpace()],\r\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\r\n  ['Elu', '', '6+', () => new WebGLElu()],\r\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\r\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\r\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\r\n  ['Gather', '', '1+', () => new WebGLGather()],\r\n  ['Gemm', '', '7-10', () => new WebGLGemm(false)],\r\n  ['Gemm', '', '11+', () => new WebGLGemm(true)],\r\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\r\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\r\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\r\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\r\n  ['InstanceNormalization', '', '6+', () => new WebGLInstanceNormalization()],\r\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\r\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\r\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\r\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\r\n  ['MaxPool', '', '1-9', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\r\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\r\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\r\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\r\n  ['Pad', '', '2-10', () => new WebGLPad()],\r\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\r\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\r\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\r\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\r\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\r\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\r\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\r\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\r\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\r\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\r\n  ['Reshape', '', '5+', () => new WebGLReshape()],\r\n  ['Resize', '', '10', () => new WebGLResizePacked(10)],\r\n  ['Resize', '', '11+', () => new WebGLResizePacked(11)],\r\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\r\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\r\n  ['Slice', '', '10+', () => new WebGLSliceV10()],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', () => new WebGLSlice()],\r\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data\r\n  // is split. When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\r\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\r\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\r\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\r\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\r\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\r\n  ['Tile', '', '6+', () => new WebGLTile()],\r\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\r\n  ['Upsample', '', '7-8', () => new WebGLUpsample(7)],\r\n  ['Upsample', '', '9', () => new WebGLUpsample(9)],\r\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\r\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const scale = inputLayouts[1];\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\r\n        float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n        float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n        float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n        float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\r\n      }`;\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n      shaderSource\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreateTextureData(t)));\r\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type);\r\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\r\n  private usePackedTexture?: boolean;\r\n\r\n  constructor(\r\n      typeConstraint: readonly Tensor.DataType[], protected glslFunc: GlslValueFunction, opType?: string,\r\n      resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n\r\n    // TODO fix bcast in packed mode.\r\n    if (this.usePackedTexture === undefined) {\r\n      this.usePackedTexture = !isBroadcast && handler.session.pack;\r\n    }\r\n\r\n    const inputLayouts = this.usePackedTexture ?\r\n        inputs.map(t => handler.getOrCreateTextureLayout(t, 4, true, t.dims, true)) :\r\n        inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const ouputLayout = this.usePackedTexture ?\r\n        handler.createTextureLayoutFromShape(inputs[0].dims, 4, inputs[0].dims, {isPacked: true, reverseWH: true}) :\r\n        handler.createTextureLayoutFromShape(inputs[0].dims);\r\n\r\n    if (isBroadcast) {\r\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n      if (!outputShape) {\r\n        throw new Error('Can\\'t perform binary op on the given tensors');\r\n      }\r\n      const outputRank = outputShape.length;\r\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n      const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\r\n      const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\r\n\r\n      // TODO: for packed tensors, we need to implement logic to caculate textCoords for broadcast tensor\r\n      const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\r\n    }`;\r\n      const outputLayout = this.usePackedTexture ?\r\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}) :\r\n          handler.createTextureLayoutFromShape(outputShape);\r\n\r\n      return {\r\n        inputLayouts,\r\n        outputLayout,\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n        expectPackedInputs: this.usePackedTexture,\r\n        expectPackedOutputs: this.usePackedTexture\r\n      };\r\n    }\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${this.glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${this.glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n\r\n    if (this.usePackedTexture) {\r\n      return {\r\n        hasMain: true,\r\n        inputLayouts,\r\n        outputLayout: ouputLayout,\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n        expectPackedInputs: true,\r\n        expectPackedOutputs: true\r\n      };\r\n    } else {\r\n      return {\r\n        hasMain: true,\r\n        inputLayouts,\r\n        outputLayout: handler.createTextureLayoutFromShape(inputs[0].dims),\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n      };\r\n    }\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = this.usePackedTexture ?\r\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true))) :\r\n        inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(\r\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = 'add_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = 'div_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = 'mul_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = 'sub_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = 'equal_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(equal(v1, v2));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = 'greater_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = 'less_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = 'and_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = 'or_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = 'xor_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = 'prelu_';\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Clip} from '../../../ops/clip';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLClip extends Clip implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      const float min = float(${this.min});\r\n      const float max = float(${this.max});\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(clamp(v, min, max));\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLPackedConcat extends Concat implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\r\n      throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n    }\r\n    if (this.axis < 0) {\r\n      this.axis = inputShape.length + this.axis;\r\n    }\r\n    // ensure all of the non-concatenated axes match each other\r\n    // calculate the shape of the output tensor while we do that\r\n    const outputShape = inputShape.slice(0);\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      const dataNShape = inputs[i].dims.slice();\r\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n        // add to the placeholder for computing output shape\r\n        if (axisIndex === this.axis) {\r\n          outputShape[this.axis] += dataNShape[axisIndex];\r\n        }\r\n        // ensure all non-cancatenated axes match each other\r\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n          throw new Error('non concat dimensions must match');\r\n        }\r\n      }\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n    const coords = getChannels('coords', rank);\r\n    const dtype = getCoordsDataType(rank);\r\n    const unpackChannel = unpackFromChannel();\r\n\r\n    const shapes = inputs.map(i => i.dims);\r\n    const allGlChannels = ['x', 'y', 'z', 'w', 'u', 'v'];\r\n    const channels = allGlChannels.slice(0, rank);\r\n    const offsets: number[] = new Array(shapes.length - 1);\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n\r\n    offsets[0] = shapes[0][this.axis];\r\n    for (let i = 1; i < offsets.length; i++) {\r\n      offsets[i] = offsets[i - 1] + shapes[i][this.axis];\r\n    }\r\n\r\n    const channel = channels[this.axis];\r\n    const lastChannels = channels.slice(-2);\r\n    const allChannels = channels.join();\r\n\r\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\r\n      return getChannel(\r\n          getX0(${allChannels}), vec2(${lastChannels.join()}));\r\n      }`;\r\n    for (let i = 1; i < offsets.length; i++) {\r\n      const shift = offsets[i - 1];\r\n      getValueSnippet += `\r\n          if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\r\n            return getChannel(\r\n              getX${i}(${this.getShiftedChannelsSnippet(channels, channel, shift)}),\r\n              vec2(${this.getShiftedChannelsSnippet(lastChannels, channel, shift)}));\r\n          }`;\r\n    }\r\n    const lastIndex = offsets.length;\r\n    const shift = offsets[offsets.length - 1];\r\n    getValueSnippet += `\r\n          return getChannel(\r\n            getX${lastIndex}(${this.getShiftedChannelsSnippet(channels, channel, shift)}),\r\n            vec2(${this.getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const shaderSource = `\r\n        ${unpackChannel}\r\n        float getValue(${channels.map(x => 'int ' + x)}) {\r\n          ${getValueSnippet}\r\n        }\r\n\r\n        void main() {\r\n          ${dtype} coords = getOutputCoords();\r\n          int lastDim = coords.${allGlChannels[rank - 1]};\r\n          coords.${allGlChannels[rank - 1]} = coords.${allGlChannels[rank - 2]};\r\n          coords.${allGlChannels[rank - 2]} = lastDim;\r\n\r\n          vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\r\n\r\n          ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\r\n          if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n            result.g = getValue(${coords});\r\n          }\r\n\r\n          ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\r\n          if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\r\n            result.a = getValue(${coords});\r\n          }\r\n\r\n          ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\r\n          if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\r\n              ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\r\n            result.b = getValue(${coords});\r\n          }\r\n          ${glsl.output} = result;\r\n        }\r\n      `;\r\n\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t, 4, true, t.dims, true)),\r\n      outputLayout:\r\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}),\r\n      samplers,\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: true\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i], true));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates the snippet to shift a given channel in a list of channels by shift\r\n   *\r\n   * i.e: returns a string of the form 'x, y-[shift], z' where any one channel can\r\n   * have the shift applied.\r\n   */\r\n  protected getShiftedChannelsSnippet(channels: string[], channel: string, shift: number) {\r\n    const channelIdx = channels.indexOf(channel);\r\n    const res = channels.map((c, idx) => {\r\n      if (idx === channelIdx) {\r\n        return `${c} - ${shift}`;\r\n      } else {\r\n        return c;\r\n      }\r\n    });\r\n    return res.join();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nimport {WebGLPackedConcat} from './concat-packed';\r\n\r\n// We provide a wrapper class so that the kernel can switch between packed and unpacked depending on the inputs on the\r\n// fly.\r\nexport class WebGLConcat extends Concat implements WebGLOperator {\r\n  unpackedImpl: WebGLUnpackedConcat;\r\n  packedImpl: WebGLPackedConcat;\r\n  constructor() {\r\n    super();\r\n    this.unpackedImpl = new WebGLUnpackedConcat();\r\n    this.packedImpl = new WebGLPackedConcat();\r\n  }\r\n\r\n  // No need to call super since this class only serves as a wrapper.\r\n  initialize(attributes: Attribute): void {\r\n    this.unpackedImpl.initialize(attributes);\r\n    this.packedImpl.initialize(attributes);\r\n  }\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\r\n      return inferenceHandler.run(this.packedImpl, inputs);\r\n    } else {\r\n      return inferenceHandler.run(this.unpackedImpl, inputs);\r\n    }\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (handler.session.pack && inputs[0].dims.length > 1) {\r\n      return this.packedImpl.createProgramInfo(handler, inputs);\r\n    } else {\r\n      return this.unpackedImpl.createProgramInfo(handler, inputs);\r\n    }\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    if (handler.session.pack && inputs[0].dims.length > 1) {\r\n      return this.packedImpl.createRunData(handler, programInfo, inputs);\r\n    } else {\r\n      return this.unpackedImpl.createRunData(handler, programInfo, inputs);\r\n    }\r\n  }\r\n}\r\nexport class WebGLUnpackedConcat extends Concat implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\r\n      throw new Error('axis specified for concat doesn\\'t match input dimensionality');\r\n    }\r\n    if (this.axis < 0) {\r\n      this.axis = inputShape.length + this.axis;\r\n    }\r\n    // ensure all of the non-concatenated axes match each other\r\n    // calculate the shape of the output tensor while we do that\r\n    const outputShape = inputShape.slice(0);\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      const dataNShape = inputs[i].dims.slice();\r\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n        // add to the placeholder for computing output shape\r\n        if (axisIndex === this.axis) {\r\n          outputShape[this.axis] += dataNShape[axisIndex];\r\n        }\r\n        // ensure all non-cancatenated axes match each other\r\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n          throw new Error('non concat dimensions must match');\r\n        }\r\n      }\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n\r\n    let getTextureIndexWhereDataResidesMethod = '';\r\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n    if (inputs.length < 5) {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\r\n    } else {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\r\n    }\r\n\r\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    const shaderSource = `\r\n      ${fetchDataFromCorrectTextureMethod}\r\n      ${getValueFromArrayIndexMethod}\r\n      ${getTextureIndexWhereDataResidesMethod}\r\n      float process(int indices[${rank}]) {\r\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\r\n\r\n        if(textureIndex != 0) {\r\n          indices[${this.axis}] = indices[${\r\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\r\n        }\r\n\r\n        return fetchDataFromCorrectTexture(textureIndex, indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      variables: [{name: 'sizeInConcatAxis', type: 'int', arrayLength: inputs.length}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\r\n    let previousSum = 0;\r\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\r\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\r\n      sizeInConcatAxis[i] = previousSum;\r\n    }\r\n    const uniformData = {sizeInConcatAxis};\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData\r\n    };\r\n  }\r\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\r\n    return `int getTextureWhereDataResides(int index) {\r\n      for(int i=0; i<${numberOfTensors}; i++) {\r\n          if(index < int(sizeInConcatAxis[i])){\r\n              return i;\r\n          }\r\n        }\r\n      }`;\r\n  }\r\n\r\n  // TODO: Implement BinarySearch in GLSL\r\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\r\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\r\n  }\r\n\r\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\r\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n    for (let i = 0; i < numberOfTensors; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      } else if (i === numberOfTensors - 1) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else { return _X${i}(indices); }`);\r\n      } else {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        '\\t' +\r\n        '}');\r\n    return codeLines.join('\\n');\r\n  }\r\n\r\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\r\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\r\n    for (let i = 0; i < arrayRank; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `if (index == ${i}) { return arr[${i}]; }`);\r\n      } else if (i === arrayRank - 1) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else { return arr[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else if (index == ${i}) { return arr[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        '\\t' +\r\n        '}');\r\n\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {Logger} from '../../../instrument';\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {assert, PoolConvUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo} from '../types';\r\nimport {WebGLConv} from './conv';\r\nimport {WebGLIm2ColPacked} from './im2col-pack';\r\nimport {WebGLMatMulPacked} from './matmul-pack';\r\nimport {WebGLReshapePacked} from './reshape-packed';\r\n\r\nexport class WebGLConvPacked extends Conv {\r\n  protected artifacts: Artifact[];\r\n  protected programInfo: ProgramInfo[];\r\n  protected outputShape: number[];\r\n\r\n  private kernelReshape = new WebGLReshapePacked();\r\n  private im2col: WebGLIm2ColPacked;\r\n  private matmul = new WebGLMatMulPacked();\r\n  private outputReshape = new WebGLReshapePacked();\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      for (let i = 2; i < kshape.length; ++i) {\r\n        this.kernelShape.push(kshape[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n\r\n    if (!this.outputShape) {\r\n      this.outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\r\n    }\r\n    if (this.im2col === undefined) {\r\n      this.im2col = new WebGLIm2ColPacked(this.outputShape, kshape, this.dilations, this.pads, this.strides);\r\n    }\r\n    if (this.activation) {\r\n      const attributes = new Attribute(undefined);\r\n      attributes.set('__internal_activation', 'string', (this.activation));\r\n      this.matmul.initialize(attributes);\r\n    }\r\n    // shape for kernel reshape\r\n    const shape =\r\n        new Tensor([2], 'int32', undefined, undefined, new Int32Array([kshape[0], kshape[1] * kshape[2] * kshape[3]]));\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      this.programInfo = [];\r\n      this.programInfo[0] = this.im2col.createProgramInfo(inferenceHandler, [inputs[0], inputs[1]]);\r\n      this.artifacts[0] = programManager.build(this.programInfo[0]);\r\n\r\n      this.programInfo[1] = this.kernelReshape.createProgramInfo(inferenceHandler, [inputs[1], shape]);\r\n      this.artifacts[1] = programManager.build(this.programInfo[1]);\r\n    }\r\n\r\n    // run im2col\r\n    const runDataIm2col = this.im2col.createRunData(inferenceHandler, this.programInfo[0], [inputs[0], inputs[1]]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[0], runDataIm2col);\r\n    programManager.run(this.artifacts[0], runDataIm2col);\r\n    const im2colOutput = runDataIm2col.outputTextureData.tensor;\r\n\r\n    // reshape kernel\r\n    const runDataKernelReshape =\r\n        this.kernelReshape.createRunData(inferenceHandler, this.programInfo[1], [inputs[1], shape]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[1], runDataKernelReshape);\r\n    programManager.run(this.artifacts[1], runDataKernelReshape);\r\n    const kernelReshaped = runDataKernelReshape.outputTextureData.tensor;\r\n\r\n    // run matmul\r\n    const hasBias = (inputs.length === 3);\r\n    assert(this.artifacts.length > 1, () => 'expect at least 2 artifacts created');\r\n    if (this.artifacts.length === 2) {\r\n      this.programInfo[2] = this.matmul.createProgramInfo(\r\n          inferenceHandler, hasBias ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput]);\r\n      this.artifacts[2] = programManager.build(this.programInfo[2]);\r\n    }\r\n    const runDataMatmul = this.matmul.createRunData(\r\n        inferenceHandler, this.programInfo[2],\r\n        hasBias ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[2], runDataMatmul);\r\n    programManager.run(this.artifacts[2], runDataMatmul);\r\n    const matmulOutput = runDataMatmul.outputTextureData.tensor;\r\n\r\n    // reshape output\r\n    const outputShapeTensor = new Tensor(\r\n        [this.outputShape.length], 'int32', undefined, undefined,\r\n        new Int32Array([this.outputShape[0], this.outputShape[1], this.outputShape[2], this.outputShape[3]]));\r\n\r\n    assert(this.artifacts.length > 2, () => 'expect at least 3 artifacts created');\r\n    if (this.artifacts.length === 3) {\r\n      this.programInfo[3] = this.outputReshape.createProgramInfo(inferenceHandler, [matmulOutput, outputShapeTensor]);\r\n      this.artifacts[3] = programManager.build(this.programInfo[3]);\r\n    }\r\n    const runDataOutputReshape =\r\n        this.outputReshape.createRunData(inferenceHandler, this.programInfo[3], [matmulOutput, outputShapeTensor]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[3], runDataOutputReshape);\r\n    programManager.run(this.artifacts[3], runDataOutputReshape);\r\n    return [runDataOutputReshape.outputTextureData.tensor];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {Logger} from '../../../instrument';\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\nimport {WebGLContext} from '../webgl-context';\r\n\r\nimport {WebGLConvPacked} from './conv-pack';\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nexport class WebGLConv extends Conv {\r\n  unpackedGroupedConvImpl: WebGLUnpackedGroupedConv;\r\n  unpackedConvImpl: WebGLUnpackedConv;\r\n  packedConvImpl: WebGLConvPacked;\r\n\r\n  constructor() {\r\n    super();\r\n    this.unpackedGroupedConvImpl = new WebGLUnpackedGroupedConv();\r\n    this.unpackedConvImpl = new WebGLUnpackedConv();\r\n    this.packedConvImpl = new WebGLConvPacked();\r\n  }\r\n\r\n  initialize(attributes: Attribute): void {\r\n    super.initialize(attributes);\r\n    this.unpackedGroupedConvImpl.initialize(attributes);\r\n    this.unpackedConvImpl.initialize(attributes);\r\n    this.packedConvImpl.initialize(attributes);\r\n  }\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const packMode = inferenceHandler.session.pack;\r\n    if (this.group > 1) {\r\n      return this.unpackedGroupedConvImpl.run(inferenceHandler, inputs);\r\n    } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1) {\r\n      return this.packedConvImpl.run(inferenceHandler, inputs);\r\n    } else {\r\n      return this.unpackedConvImpl.run(inferenceHandler, inputs);\r\n    }\r\n  }\r\n\r\n  static calcOutputShape(\r\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\r\n      strides: number[]): number[] {\r\n    const batchSize = inputShape[0];\r\n    const inputSpatialShape = inputShape.slice(2);\r\n    const spatialRank = inputSpatialShape.length;\r\n    const outChannels = kernelShape[0];\r\n    const kernelSpatialShape = kernelShape.slice(2);\r\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n    const outputSpatialShape =\r\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n    return outputShape;\r\n  }\r\n}\r\n\r\nexport class WebGLUnpackedGroupedConv extends Conv implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const hasBias = inputs.length > 2;\r\n    const processBias = hasBias ? 'value += getBias(output_channel);' : '';\r\n    const xShape = inputs[0].dims.slice();\r\n    const wShape = inputs[1].dims.slice();\r\n    const outputChannelsPerGroup = wShape[0] / this.group;\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      for (let i = 2; i < wShape.length; ++i) {\r\n        this.kernelShape.push(wShape[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n    const outputShape = WebGLConv.calcOutputShape(xShape, wShape, this.dilations, this.pads, this.strides);\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\r\n\r\n    const shaderSource = `\r\n    const ivec2 strides = ivec2(${this.strides[0]}, ${this.strides[1]});\r\n    const ivec2 pads = ivec2(${this.pads[0]}, ${this.pads[1]});\r\n    ${activationFunction}\r\n    void main() {\r\n      ivec4 coords = getOutputCoords();\r\n      int batch = coords.x;\r\n      int output_channel = coords.y;\r\n      ivec2 xRCCorner = coords.zw * strides - pads;\r\n      int group_id = output_channel / ${outputChannelsPerGroup};\r\n\r\n      float value = 0.0;\r\n      for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\r\n        int input_channel = group_id * ${wShape[1]} + wInChannel;\r\n        for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\r\n          int xHeight = xRCCorner.x + wHeight * ${this.dilations[0]};\r\n\r\n          if (xHeight < 0 || xHeight >= ${xShape[2]}) {\r\n            continue;\r\n          }\r\n\r\n          for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\r\n            int xWidth = xRCCorner.y + wWidth * ${this.dilations[1]};\r\n            if (xWidth < 0 || xWidth >= ${xShape[3]}) {\r\n              continue;\r\n            }\r\n\r\n            float xVal = getX(batch, input_channel, xWidth, xHeight);\r\n            float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\r\n            value += xVal*wVal;\r\n          }\r\n        }\r\n      }\r\n      ${processBias}\r\n      ${applyActivation}\r\n      ${glsl.output} = vec4(value, .0, .0, .0);\r\n    }\r\n`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLUnpackedConv extends Conv {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfoArray(inferenceHandler, inputs);\r\n      for (let i = 0; i < programInfos.length; ++i) {\r\n        const artifact = inferenceHandler.session.programManager.build(programInfos[i]);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const runDataArray = this.createRunDataArray(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.artifacts[0], runDataArray[0]);\r\n    programManager.run(this.artifacts[0], runDataArray[0]);\r\n    programManager.run(this.artifacts[1], runDataArray[1]);\r\n    return [runDataArray[1].outputTextureData.tensor];\r\n  }\r\n  createProgramInfoArray(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\r\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\r\n    const dotProductProgramInfo =\r\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\r\n    return [im2colProgramInfo, dotProductProgramInfo];\r\n  }\r\n  createRunDataArray(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]):\r\n      RunData[] {\r\n    const k = inputs[1];\r\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\r\n    let kTD = inferenceHandler.getTextureData(k.dataId);\r\n    if (!kTD) {\r\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\r\n      const newKernelData =\r\n          WebGLUnpackedConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\r\n      // hack: should use graph transformer to rewrite initializer K\r\n      kTD = inferenceHandler.createTextureDataFromLayoutBindTensor(\r\n          programInfos[1].inputLayouts[1], k.type, newKernelData, k);\r\n    }\r\n    const runtDataIm2Col = {\r\n      inputTextureDatas: [inferenceHandler.getOrCreateTextureData(inputs[0])],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\r\n    if (b) {\r\n      inputTDs.push(inferenceHandler.getOrCreateTextureData(b));\r\n    }\r\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\r\n    const runDataDotProduct = {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: outputTD,\r\n      uniformData: {},\r\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\r\n        const gl = glContext.gl;\r\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\r\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\r\n        const sharedDimOffsetLocation = artifact.uniformLocations.find(l => l.name === 'sharedDimOffset')!.location;\r\n        let blend = false;\r\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\r\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\r\n          if (k === sharedDimReadSize) {\r\n            blend = true;\r\n            gl.enable(gl.BLEND);\r\n            glContext.checkError();\r\n            gl.blendEquation(gl.FUNC_ADD);\r\n            glContext.checkError();\r\n            gl.blendFunc(gl.ONE, gl.ONE);\r\n            glContext.checkError();\r\n          }\r\n\r\n          gl.uniform1i(sharedDimOffsetLocation, k);\r\n          glContext.checkError();\r\n          glContext.draw();\r\n        }\r\n\r\n        if (blend) {\r\n          gl.disable(gl.BLEND);\r\n          glContext.checkError();\r\n        }\r\n      }\r\n    };\r\n    return [runtDataIm2Col, runDataDotProduct];\r\n  }\r\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\r\n      ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n\r\n    const rank = outputShape.length;\r\n    const im2colDims = WebGLUnpackedConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\r\n\r\n    const shaderSource = `\r\n      const int XC = ${xshape[1]};\r\n      const int XH = ${xshape[2]};\r\n      const int XW = ${xshape[3]};\r\n      const int KH = ${this.kernelShape[0]};\r\n      const int KW = ${this.kernelShape[1]};\r\n      const int dilationH = ${this.dilations[0]};\r\n      const int dilationW = ${this.dilations[1]};\r\n      const int strideH = ${this.strides[0]};\r\n      const int strideW = ${this.strides[1]};\r\n      const int padH = ${this.pads[0]};\r\n      const int padW = ${this.pads[1]};\r\n      const int KHKW = KH*KW;\r\n      const int XCKHKW = XC * KHKW;\r\n      const int outputChannels = 4;\r\n      vec4 process(int indices[${rank}]) {\r\n        int b  = indices[0]; // batch size\r\n        int oh = indices[1] * strideH - padH; //output height\r\n        int ow = indices[2] * strideW - padW; //output width\r\n        int p = indices[3] * outputChannels; //patch\r\n        vec4 value = vec4(0.0);\r\n        for(int i=0; i < outputChannels; ++i) {\r\n          if(p < XCKHKW) {\r\n            int patchC = p / KHKW;\r\n            int patchH = (p - patchC*KHKW) / KW;\r\n            int patchW = (p - patchC*KHKW) - patchH * KW;\r\n            int xh2 = oh + patchH * dilationH;\r\n            int xw2 = ow + patchW * dilationW;\r\n            int x[${xshape.length}];\r\n            x[0] = b;\r\n            x[1] = patchC;\r\n            x[2] = xh2;\r\n            x[3] = xw2;\r\n            if(xh2 >= 0 &&\r\n                xh2 < XH &&\r\n                xw2 >= 0 &&\r\n                xw2 < XW) {\r\n              value[i] = _X(x);\r\n            }\r\n          }\r\n          ++p;\r\n        }\r\n        return value;\r\n      }\r\n      `;\r\n    return {\r\n      name: 'Im2Col',\r\n      inputLayouts: [inferenceHandler.createTextureLayoutFromShape(xshape)],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createDotProductProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\r\n      outputShape: number[]): ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n    const kLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\r\n\r\n    let bLayout: TextureLayout|undefined;\r\n    const rank = outputShape.length;\r\n\r\n    const inputLayouts = [im2colLayout, kLayout];\r\n    if (inputs.length === 3) {\r\n      bLayout = inferenceHandler.createTextureLayoutFromShape(inputs[2].dims.slice());\r\n      inputLayouts.push(bLayout);\r\n    }\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(outputShape);\r\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n    const sharedDim = im2colLayout.shape[3];\r\n    const blendEnabled = inferenceHandler.session.backend.glContext.isBlendSupported && !this.activation;\r\n    const sharedDimReadSize = blendEnabled && inferenceHandler.session.backend.matmulMaxBatchSize ?\r\n        this.calcSharedDimReadSize(inferenceHandler.session.backend.matmulMaxBatchSize, sharedDim) :\r\n        sharedDim;\r\n    const samplers = ['Im2Col', 'K'];\r\n    if (inputs.length === 3) {\r\n      samplers.push('B');\r\n    }\r\n\r\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${activationFunction}\r\n    float process(int indices[${rank}]) {\r\n      int b[1];\r\n      b[0] = indices[1];\r\n      int im2col[${im2colLayout.shape.length}];\r\n      im2col[0] = indices[0];\r\n      im2col[1] = indices[2];\r\n      im2col[2] = indices[3];\r\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\r\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\r\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\r\n      float value = sharedDimOffset == 0 ? ${initValue} : 0.0;\r\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\r\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\r\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\r\n        value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n        ++im2colOffset;\r\n        ++kernelOffset;\r\n      }\r\n      ${applyActivation}\r\n      return value;\r\n    }`;\r\n    return {\r\n      name: 'dotProduct',\r\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\r\n      outputLayout,\r\n      shaderSource,\r\n      samplers,\r\n      variables: [{name: 'sharedDimOffset', type: 'int'}],\r\n      params: {sharedDim, sharedDimReadSize}\r\n    };\r\n  }\r\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\r\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\r\n      return kernel;\r\n    }\r\n    const numFeatureMaps = shape[0];\r\n    const oldRowSize = shape[1] * shape[2] * shape[3];\r\n    const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\r\n    const newSize = numFeatureMaps * newRowSize;\r\n    const buffer = new Float32Array(newSize);\r\n    for (let f = 0; f < numFeatureMaps; ++f) {\r\n      const oldOffset = f * oldRowSize;\r\n      const newOffset = f * newRowSize + f % group * oldRowSize;\r\n      buffer.set(kernel.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\r\n    }\r\n    return buffer;\r\n  }\r\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\r\n    return [\r\n      outputShape[0], outputShape[2], outputShape[3],\r\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\r\n    ];\r\n  }\r\n\r\n  protected calcSharedDimReadSize(preferredBatchSize: number, sharedDim: number): number {\r\n    if (preferredBatchSize <= 0 || sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\r\n      return sharedDim;\r\n    }\r\n    return preferredBatchSize;\r\n  }\r\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\r\n    const preferredRowCount = 64;\r\n    const preferredColCount = 64;\r\n    if (outputLayout.height < preferredRowCount) {\r\n      return undefined;\r\n    }\r\n    return [preferredColCount, preferredRowCount];\r\n  }\r\n  protected artifacts: Artifact[];\r\n  protected readSize = 8;\r\n  protected blockSize = 64;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {DepthToSpace} from '../../../ops/depth-to-space';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData} from '../types';\r\n\r\nimport {reshape} from './reshape';\r\nimport {WebGLTranspose} from './transpose';\r\n\r\nexport class WebGLDepthToSpace extends DepthToSpace {\r\n  protected transposeProgramInfo: ProgramInfo;\r\n\r\n  protected transposeArtifact: Artifact;\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    const transposePerm = this.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\r\n    const firstReshapeShape = this.mode === 'DCR' ?\r\n        [\r\n          inputs[0].dims[0], this.blocksize, this.blocksize, inputs[0].dims[1] / this.blocksizeSqr, inputs[0].dims[2],\r\n          inputs[0].dims[3]\r\n        ] :\r\n        [\r\n          inputs[0].dims[0], inputs[0].dims[1] / this.blocksizeSqr, this.blocksize, this.blocksize, inputs[0].dims[2],\r\n          inputs[0].dims[3]\r\n        ];\r\n\r\n    const transpose = new WebGLTranspose();\r\n    const attributes = new Attribute(undefined);\r\n    attributes.set('perm', 'ints', transposePerm);\r\n    transpose.initialize(attributes);\r\n\r\n    // First reshape\r\n\r\n    const firstReshapedTensor = reshape(inferenceHandler, inputs[0], firstReshapeShape);\r\n\r\n    // transpose\r\n    if (!this.transposeProgramInfo) {\r\n      this.transposeProgramInfo = transpose.createProgramInfo(inferenceHandler, [firstReshapedTensor]);\r\n      this.transposeArtifact = programManager.build(this.transposeProgramInfo);\r\n    }\r\n    const runDataTranspose =\r\n        transpose.createRunData(inferenceHandler, this.transposeProgramInfo, [firstReshapedTensor]);\r\n    inferenceHandler.checkAndUpdateTextureForm(this.transposeArtifact, runDataTranspose);\r\n    programManager.run(this.transposeArtifact, runDataTranspose);\r\n    const transposeOutput = runDataTranspose.outputTextureData.tensor;\r\n\r\n    // Second reshape\r\n    const result = reshape(inferenceHandler, transposeOutput, [\r\n      inputs[0].dims[0], inputs[0].dims[1] / this.blocksizeSqr, inputs[0].dims[2] * this.blocksize,\r\n      inputs[0].dims[3] * this.blocksize\r\n    ]);\r\n    return [result];\r\n  }\r\n\r\n  protected getOutShape(input: Tensor): number[] {\r\n    const batchSize = input.dims[0];\r\n    const inputDepth = input.dims[1];\r\n    const inputHeight = input.dims[2];\r\n    const inputWidth = input.dims[3];\r\n    if (inputDepth % (this.blocksizeSqr) !== 0) {\r\n      throw new Error('Input depth must be divisible by squared blocksize.');\r\n    }\r\n    const outputDepth = inputDepth / this.blocksizeSqr;\r\n    const outputHeight = inputHeight * this.blocksize;\r\n    const outputWidth = inputWidth * this.blocksize;\r\n    return [batchSize, outputDepth, outputHeight, outputWidth];\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Dropout} from '../../../ops/dropout';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLDropout extends Dropout implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (this.testMode) {\r\n      return [inputs[0]];\r\n    }\r\n    throw new Error('Non test mode Dropout is not implemented yet');\r\n  }\r\n  createProgramInfo(_handler: WebGLInferenceHandler, _inputs: Tensor[]): ProgramInfo {\r\n    throw new Error('Non test mode Dropout is not implemented yet');\r\n  }\r\n  createRunData(_handler: WebGLInferenceHandler, _programInfo: ProgramInfo, _inputs: Tensor[]): RunData {\r\n    throw new Error('Non test mode Dropout is not implemented yet');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Elu} from '../../../ops/elu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLElu extends Elu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Flatten} from '../../../ops/flatten';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLFlatten extends Flatten {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\r\n\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {glslRelu, glslSigmoid} from './unary-op';\r\n\r\nexport function getActicationSnippet(activation: string) {\r\n  let activationFunction = '';\r\n  let activationName = '';\r\n  switch (activation) {\r\n    case 'Relu':\r\n      activationName = glslRelu().name;\r\n      activationFunction = glslRelu().body;\r\n      break;\r\n    case 'Sigmoid':\r\n      activationName = glslSigmoid().name;\r\n      activationFunction = glslSigmoid().body;\r\n      break;\r\n    default:\r\n      // TODO: adding other activations that can be fused.\r\n      activationName = '';\r\n      activationFunction = '';\r\n  }\r\n  const applyActivation = activation ? `\r\n  value = ${activationName}(value);` :\r\n                                       '';\r\n  return {activationFunction, applyActivation};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Gather} from '../../../ops/gather';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGather extends Gather implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const indexDataShape = inputs[1].dims.slice();\r\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\r\n    const indexCopyOps: string[] = [];\r\n    for (let i = 0; i < outputShape.length; i++) {\r\n      // outputShape is divided into three parts: A, B, C\r\n      // |0        axis|  axis + indexDataShape.length |          end|\r\n      // |     A       |             B                 |      C      |\r\n      //\r\n      // inputIdx: [A, inputs[1][B], C]\r\n      if (i < axis) {  // A\r\n        outputShape[i] = inputShape[i];\r\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n      } else {\r\n        if (i < axis + indexDataShape.length) {  // B\r\n          outputShape[i] = indexDataShape[i - axis];\r\n          indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\r\n        } else {                                                       // C\r\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\r\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const orank = outputShape.length || 1;\r\n    const irank = inputShape.length;\r\n    const iDrank = indexDataShape.length || 1;\r\n    const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        indexDataIdx[0] = 0;\r\n        ${indexCopyOps.join('\\n        ')}\r\n        int idx = int(_B(indexDataIdx));\r\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\r\n        return _A(inputIdx);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGemm extends Gemm implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims.slice();\r\n    const bShape = inputs[1].dims.slice();\r\n    const [M, N] = GemmUtil.getShapeOfGemmResult(\r\n        aShape, this.transA, bShape, this.transB, inputs.length === 3 ? inputs[2].dims : undefined);\r\n    const oShape = [M, N];\r\n    if (!oShape) {\r\n      throw new Error('Can\\'t use gemm on the given tensors');\r\n    }\r\n    let sharedDim = aShape[aShape.length - 1];\r\n    let line = '';\r\n    if (this.transA) {\r\n      sharedDim = aShape[0];\r\n    }\r\n    if (this.transA && this.transB) {\r\n      line = 'value += _A_T(a) * _B_T(b);';\r\n    } else if (this.transA && !this.transB) {\r\n      line = 'value += _A_T(a) * _B(b);';\r\n    } else if (!this.transA && this.transB) {\r\n      line = 'value += _A(a) * _B_T(b);';\r\n    } else if (!this.transA && !this.transB) {\r\n      line = 'value += _A(a) * _B(b);';\r\n    }\r\n    const rank = oShape.length;\r\n    const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\r\n    const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\r\n    const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          ${declareC}\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          ${broadcastC}\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          ${calculateC}\r\n          return value;\r\n      }`;\r\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(oShape),\r\n      samplers: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\r\n      variables: [{name: 'alpha', type: 'float'}, {name: 'beta', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLIm2ColPacked implements WebGLOperator {\r\n  protected convOutputShape: number[];\r\n  protected kernelShape: number[];\r\n  protected dilations: number[];\r\n  protected pads: number[];\r\n  protected strides: number[];\r\n\r\n  constructor(\r\n      convOutputShape: number[], kernelShape: number[], dilations: number[], pads: number[], strides: number[]) {\r\n    this.convOutputShape = convOutputShape;\r\n    this.kernelShape = kernelShape;\r\n    this.dilations = dilations;\r\n    this.pads = pads;\r\n    this.strides = strides;\r\n  }\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (inputs.length !== 2) {\r\n      throw new Error('Im2Col kernel should have two input tensors');\r\n    }\r\n\r\n    const xshape = inputs[0].dims.slice();\r\n    const wshape = inputs[1].dims.slice();\r\n    const rowDim = 2;\r\n    const colDim = 3;\r\n    const rank = this.convOutputShape.length;\r\n    const im2colShape = [wshape[1] * wshape[2] * wshape[3], this.convOutputShape[2] * this.convOutputShape[3]];\r\n    const kernelSize = wshape[2] * wshape[3];\r\n    const unpackChannel = unpackFromChannel();\r\n    let unrolled = '';\r\n\r\n    for (let row = 0; row <= 1; row++) {\r\n      for (let col = 0; col <= 1; col++) {\r\n        unrolled += `\r\n          blockIndex = rc.x + ${col};\r\n          pos = rc.y + ${row};\r\n\r\n          if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\r\n            offsetY = int(blockIndex / (${this.convOutputShape[rank - 1]})) * ${this.strides[0]} - ${this.pads[0]};\r\n            d0 = offsetY + ${this.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\r\n\r\n            if(d0 < ${xshape[rowDim]} && d0 >= 0) {\r\n              offsetX = imod(blockIndex, ${this.convOutputShape[rank - 1]}) * ${this.strides[1]} - ${this.pads[1]};\r\n              d1 = offsetX + ${this.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\r\n\r\n              if(d1 < ${xshape[colDim]} && d1 >= 0) {\r\n\r\n                ch = int(float(pos)/ ${kernelSize}.);\r\n                  innerDims = vec2(d0, d1);\r\n                  result[${row * 2 + col}] = getChannel(\r\n                    getA(0, ch, int(innerDims.x),\r\n                    int(innerDims.y)), innerDims);\r\n              }\r\n            }\r\n          }\r\n\r\n        `;\r\n      }\r\n    }\r\n\r\n    const shaderSource = `\r\n    ${unpackChannel}\r\n\r\n    void main() {\r\n      ivec2 rc = getOutputCoords();\r\n        vec4 result = vec4(0.0);\r\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\r\n        vec2 innerDims;\r\n        ${unrolled}\r\n        outputColor = result;\r\n    }\r\n          `;\r\n    return {\r\n      name: 'WebGLIm2ColPacked',\r\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(inputs[0], 4, true, xshape, true)],\r\n      outputLayout:\r\n          inferenceHandler.createTextureLayoutFromShape(im2colShape, 4, im2colShape, {isPacked: true, reverseWH: true}),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs =\r\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true)));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ImageScaler} from '../../../ops/image-scaler';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\r\n    const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['X'],\r\n      variables: [{name: 'bias', type: 'float', arrayLength: this.bias.length}, {name: 'scale', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'bias': this.bias, 'scale': this.scale}\r\n    };\r\n  }\r\n  private createGetBiasMethod(numChannels: number): string {\r\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `if (channel == ${i}) { return bias[${i}]; }`);\r\n      } else if (i === numChannels - 1) {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else { return bias[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            '\\t' +\r\n            `else if (channel == ${i}) { return bias[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        '\\t' +\r\n        '}');\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\n\r\nexport class WebGLInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      programInfos.forEach((programInfo) => {\r\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n        this.artifacts.push(artifact);\r\n      });\r\n    }\r\n\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\r\n    return [runDatas[1].outputTextureData.tensor];\r\n  }\r\n\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (!super.checkInputTypes(inputs)) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== 4) {\r\n      // currently webgl implementation only support 4-D input.\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  createMeanAndVarianceProgramInfo(inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout): ProgramInfo {\r\n    const xDims = xLayout.shape;\r\n    const channel = xDims[1];\r\n    const channelSize = xDims[2] * xDims[3];\r\n    const outputShape = [xDims[0], channel];\r\n    const outputUnpackedShape = [xDims[0], channel * 4];\r\n\r\n    const shaderSource = `\r\n    vec4 process(int[2] indices) {\r\n      vec4 v = vec4(0.0);\r\n      int a[4];\r\n      a[0] = indices[0];\r\n      a[1] = indices[1];\r\n      float temp = 0.0;\r\n      for(int a2=0; a2<${xDims[2]}; a2++) {\r\n        a[2] = a2;\r\n        for(int a3=0; a3<${xDims[3]}; a3++) {\r\n          a[3] = a3;\r\n          float x = _X(a);\r\n          temp += x;\r\n        }\r\n      }\r\n      float mean = temp / float(${channelSize});\r\n      temp = 0.0;\r\n      for(int a2=0; a2<${xDims[2]}; a2++) {\r\n        a[2] = a2;\r\n        for(int a3=0; a3<${xDims[3]}; a3++) {\r\n          a[3] = a3;\r\n          float x = _X(a);\r\n          temp += (x - mean) * (x - mean);\r\n        }\r\n      }\r\n      v.r = mean;\r\n      v.g = temp / float(${channelSize});\r\n\r\n      return v;\r\n    }`;\r\n    return {\r\n      inputLayouts: [xLayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape, 4, outputUnpackedShape),\r\n      samplers: ['X'],\r\n      shaderSource,\r\n      name: 'MeanAndVariance',\r\n    };\r\n  }\r\n\r\n  createComputOutputProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, xLayout: TextureLayout, scaleLayout: TextureLayout,\r\n      bLayout: TextureLayout, meanAndVarianceLayout: TextureLayout): ProgramInfo {\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    vec4 get_MeanAndVariance(int[2] mv) {\r\n      int offset = indicesToOffset_MeanAndVariance(mv);\r\n      vec2 coords = offsetToCoords(offset, ${meanAndVarianceLayout.width}, ${meanAndVarianceLayout.height});\r\n      return ${glsl.texture2D}(MeanAndVariance, coords);\r\n    }\r\n\r\n    float process(int[4] indices) {\r\n\r\n          int mv[2];\r\n          mv[0] = indices[0];\r\n          mv[1] = indices[1];\r\n          vec4 mean_and_variance = get_MeanAndVariance(mv);\r\n          float mean = mean_and_variance.r;\r\n          float variance = mean_and_variance.g;\r\n\r\n          int sb[1];\r\n          sb[0] = indices[1];\r\n          float scale = _Scale(sb);\r\n          float b = _B(sb);\r\n\r\n          return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\r\n        }`;\r\n    return {\r\n      inputLayouts: [xLayout, meanAndVarianceLayout, scaleLayout, bLayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(xLayout.shape),\r\n      samplers: ['X', 'MeanAndVariance', 'Scale', 'B'],\r\n      variables: [{name: 'epsilon', type: 'float'}],\r\n      shaderSource,\r\n      name: 'ComputOutput',\r\n    };\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const xLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n    const scaleLayout = inferenceHandler.getOrCreateTextureLayout(inputs[1]);\r\n    const bLayout = inferenceHandler.getOrCreateTextureLayout(inputs[2]);\r\n    const meanAndVarianceProgramInfo = this.createMeanAndVarianceProgramInfo(inferenceHandler, xLayout);\r\n    const computeOutputProgramInfo = this.createComputOutputProgramInfo(\r\n        inferenceHandler, xLayout, scaleLayout, bLayout, meanAndVarianceProgramInfo.outputLayout);\r\n\r\n    const programInfos: ProgramInfo[] = [meanAndVarianceProgramInfo, computeOutputProgramInfo];\r\n    return programInfos;\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const dataType = inputs[0].type;\r\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\r\n    const scaleTD = inferenceHandler.getOrCreateTextureData(inputs[1], programInfos[1].inputLayouts[2]);\r\n    const bTD = inferenceHandler.getOrCreateTextureData(inputs[2], programInfos[1].inputLayouts[3]);\r\n    const runDatas: RunData[] = [];\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\r\n      uniformData: {}\r\n    });\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD, runDatas[0].outputTextureData, scaleTD, bTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, dataType),\r\n      uniformData: {'epsilon': this.epsilon}\r\n    });\r\n    return runDatas;\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {LeakyRelu} from '../../../ops/leaky-relu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\r\n      }\r\n      `;\r\n    return {\r\n      hasMain: true,\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getActicationSnippet} from './fuse-utils';\r\n\r\nexport class WebGLMatMulPacked extends MatMul implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const hasBias = inputs.length > 2;\r\n    const processBias = hasBias ? 'result += getBiasAtOutCoords();' : '';\r\n    const aShape = inputs[0].dims;\r\n    const bShape = inputs[1].dims;\r\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n\r\n    if (!outputShape) {\r\n      throw new Error('Can\\'t use matmul on the given tensors');\r\n    }\r\n    const sharedDim = aShape[aShape.length - 1];\r\n    const sharedDimIndex = Math.ceil(sharedDim / 2);\r\n    const aRank = aShape.length;\r\n    const bRank = bShape.length;\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const coordsDataType = getCoordsDataType(outputShape.length);\r\n    const outRank = outputShape.length;\r\n    const allGlChannels = ['x', 'y', 'z', 'w', 'u', 'v'];\r\n\r\n    const {activationFunction, applyActivation} = getActicationSnippet(this.activation);\r\n    const shaderSource = `\r\n      ${activationFunction}\r\n      void main() {\r\n        ${coordsDataType} rc = getOutputCoords();\r\n        int lastDim = rc.${allGlChannels[outRank - 1]};\r\n        rc.${allGlChannels[outRank - 1]} = rc.${allGlChannels[outRank - 2]};\r\n        rc.${allGlChannels[outRank - 2]} = lastDim;\r\n\r\n        vec4 result = vec4(0);\r\n        for (int i = 0; i < ${sharedDimIndex}; i++) {\r\n          vec4 a = getA(${getA(allGlChannels, aRank)});\r\n          vec4 b = getB(${getB(allGlChannels, bRank)});\r\n          result += (a.rrbb * b.rgrg);\r\n          result += (a.ggaa * b.baba);\r\n        }\r\n        ${processBias}\r\n        ${applyActivation}\r\n        ${glsl.output} = result;\r\n      }`;\r\n    return {\r\n      name: 'WebGLMatMulPacked',\r\n      inputLayouts: inputs.map((t, i) => handler.getOrCreateTextureLayout(t, 4, true, inputs[i].dims, true)),\r\n      outputLayout:\r\n          handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}),\r\n      samplers: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs =\r\n        inputs.map((t) => handler.getOrCreateTextureData(t, handler.getOrCreateTextureLayout(t, 1, false, [], true)));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nfunction getA(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += `rc.${allGlChannels[rank - 2]}, ` +\r\n      'i<<1';\r\n  return res;\r\n}\r\n\r\nfunction getB(allGlChannels: string[], rank: number): string {\r\n  let res = '';\r\n  for (let i = 0; i < rank - 2; i++) {\r\n    res += `rc.${allGlChannels[i]}, `;\r\n  }\r\n  res += 'i<<1, ' +\r\n      `rc.${allGlChannels[rank - 1]}`;\r\n  return res;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {WebGLMatMulPacked} from './matmul-pack';\r\n\r\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\r\n  private usePackedTexture?: boolean;\r\n\r\n  packedImpl: WebGLMatMulPacked;\r\n  unpackedImpl: WebGLUnpackedMatMul;\r\n  constructor() {\r\n    super();\r\n    this.packedImpl = new WebGLMatMulPacked();\r\n    this.unpackedImpl = new WebGLUnpackedMatMul();\r\n  }\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (this.usePackedTexture === undefined) {\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      this.usePackedTexture = !isBroadcast && inferenceHandler.session.pack;\r\n    }\r\n\r\n    if (this.usePackedTexture) {\r\n      return inferenceHandler.run(this.packedImpl, inputs);\r\n    } else {\r\n      return inferenceHandler.run(this.unpackedImpl, inputs);\r\n    }\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (this.usePackedTexture === undefined) {\r\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n      this.usePackedTexture = !isBroadcast && handler.session.pack;\r\n    }\r\n\r\n    if (this.usePackedTexture && inputs[0].dims.length > 1) {\r\n      return this.packedImpl.createProgramInfo(handler, inputs);\r\n    } else {\r\n      return this.unpackedImpl.createProgramInfo(handler, inputs);\r\n    }\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    if (this.usePackedTexture && inputs[0].dims.length > 1) {\r\n      return this.packedImpl.createRunData(handler, programInfo, inputs);\r\n    } else {\r\n      return this.unpackedImpl.createRunData(handler, programInfo, inputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class WebGLUnpackedMatMul extends MatMul implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims;\r\n    const bShape = inputs[1].dims;\r\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n    if (!outputShape) {\r\n      throw new Error('Can\\'t use matmul on the given tensors');\r\n    }\r\n    const rank = outputShape.length;\r\n    const arank = aShape.length;\r\n    const brank = bShape.length;\r\n    const sharedDim = aShape[aShape.length - 1];\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${arank}];\r\n          int b[${brank}];\r\n          bcastMatmulIndices_A(indices, a);\r\n          bcastMatmulIndices_B(indices, b);\r\n\r\n          float value;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${arank - 1}] = k;\r\n              b[${brank - 2}] = k;\r\n              value += _A(a) * _B(b);\r\n          }\r\n          return value;\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {getChannels} from './packing-utils';\r\n\r\nexport class WebGLPack implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (inputs.length !== 1) {\r\n      throw new Error('Pack kernel should have input tensor count to 1.');\r\n    }\r\n\r\n    const inputShape = inputs[0].dims;\r\n\r\n    const outputLayout =\r\n        handler.createTextureLayoutFromShape(inputShape, 4, inputShape, {isPacked: true, reverseWH: true});\r\n    const outputShape = outputLayout.shape;\r\n    const inputRank = inputShape.length;\r\n    const outputRank = outputShape.length;\r\n\r\n    const coordsDataType = getCoordsDataType(outputRank);\r\n    const channels = getChannels('rc', outputRank);\r\n    const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\r\n\r\n    let reversedInputWH;\r\n    if (inputRank === 0) {\r\n      reversedInputWH = [1, 1];\r\n    } else if (inputRank === 1) {\r\n      reversedInputWH = [inputShape[0], 1];\r\n    } else {\r\n      reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\r\n    }\r\n    const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\r\n    const output = getOutput(inputShape, channels);\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          if(${outOfBoundsCondition}) {\r\n            ${glsl.output} = vec4(0);\r\n          } else {\r\n            ${setup}\r\n\r\n            ${glsl.output} = vec4(${output});\r\n          }\r\n        }\r\n      `;\r\n\r\n    return {\r\n      name: 'WebGLPack',\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true)],\r\n      outputLayout,\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: false,\r\n      expectPackedOutputs: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * check output coordinate location and return false if it is outside input's width/height boundary\r\n */\r\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\r\n  if (rank === 1) {\r\n    return `rc > ${shape[0]}`;\r\n  }\r\n\r\n  let cond = '';\r\n  for (let i = rank - 2; i < rank; i++) {\r\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\r\n    if (i < rank - 1) {\r\n      cond += '||';\r\n    }\r\n  }\r\n\r\n  return cond;\r\n}\r\n\r\n/**\r\n * code snippet to sample input texture with output coordiantes\r\n */\r\nfunction getOutput(shape: readonly number[], dims: string[]): string {\r\n  const rank = shape.length;\r\n\r\n  if (rank === 0) {\r\n    return 'getA(), 0, 0, 0';\r\n  }\r\n\r\n  if (rank === 1) {\r\n    return `getA(rc),\r\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\r\n            0, 0`;\r\n  }\r\n\r\n  const coord00 = 'r, c';\r\n  const coord01 = 'r, cp1';\r\n  const coord10 = 'rp1, c';\r\n  const coord11 = 'rp1, cp1';\r\n  let D = '';\r\n  if (rank > 2) {\r\n    for (let i = 0; i < rank - 2; ++i) {\r\n      D = D + `${dims[i]},`;\r\n    }\r\n  }\r\n  return `getA(${D}${coord00}),\r\n          rEdge ? 0. : getA(${D}${coord10}),\r\n          cEdge ? 0. : getA(${D}${coord01}),\r\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\r\n}\r\n\r\n/**\r\n * code snippet to setup 4 coordinates and edge conditions\r\n */\r\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\r\n  if (rank === 0 || rank === 1) {\r\n    return '';\r\n  }\r\n  // rank >= 2 for width+height pack.\r\n  else {\r\n    const setup = `\r\n    int r = ${dims[rank - 2]};\r\n    int c = ${dims[rank - 1]};\r\n    int rp1 = ${dims[rank - 2]} + 1;\r\n    int cp1 = ${dims[rank - 1]} + 1;\r\n    bool rEdge = rp1 >= ${cols};\r\n    bool cEdge = cp1 >= ${rows};\r\n    `;\r\n    return setup;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function getVecChannels(name: string, rank: number): string[] {\r\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\r\n}\r\n\r\nexport function getChannels(name: string, rank: number): string[] {\r\n  if (rank === 1) {\r\n    return [name];\r\n  }\r\n  return getVecChannels(name, rank);\r\n}\r\n\r\nexport function unpackFromChannel(): string {\r\n  return `\r\n    float getChannel(vec4 frag, int dim) {\r\n      int modCoord = imod(dim, 2);\r\n      return modCoord == 0 ? frag.r : frag.g;\r\n    }\r\n\r\n    float getChannel(vec4 frag, vec2 innerDims) {\r\n      vec2 modCoord = mod(innerDims, 2.);\r\n      return modCoord.x == 0. ?\r\n        (modCoord.y == 0. ? frag.r : frag.g) :\r\n        (modCoord.y == 0. ? frag.b : frag.a);\r\n    }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Pad} from '../../../ops/pad';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLPad extends Pad implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\r\n    const rank = outputShape.length;\r\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n    const padFunction = getPadFunction(\r\n        getGlsl(inferenceHandler.session.backend.glContext.version), 'A', alayout, this.mode, this.pads, this.value);\r\n    const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: [alayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nexport function getPadFunction(\r\n    glsl: Glsl, name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\r\n  switch (mode) {\r\n    case 'constant':\r\n      return getPadConstant(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\r\n    case 'reflect':\r\n      return getPadReflect(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    case 'edge':\r\n      return getPadEdge(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n}\r\nfunction getPadConstant(\r\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\r\n    pads: number[], value: number) {\r\n  const rank = shape.length;\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n          k = m[${i}] - ${pads[i]};\r\n          if (k < 0)  return constant;\r\n          if (k >= ${shape[i]}) return constant;\r\n          offset += k * ${strides[i]};\r\n          `;\r\n  }\r\n  return `\r\n        float pad${name}(int m[${rank}]) {\r\n          const float constant = float(${value});\r\n          int offset = 0;\r\n          int k = 0;\r\n          ${block}\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n}\r\nfunction getPadReflect(\r\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\r\n    pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n  }\r\n  return `\r\n      float pad${name}(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n        return value;\r\n      }\r\n      `;\r\n}\r\nfunction getPadEdge(\r\n    glsl: Glsl, name: string, shape: readonly number[], strides: readonly number[], width: number, height: number,\r\n    pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n      k = m[${i}] - ${pads[i]};\r\n      if (k < 0)  k = 0;\r\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n      offset += k * ${strides[i]};\r\n      `;\r\n  }\r\n  return `\r\n    float pad${name}(int m[${rank}]) {\r\n      int offset = 0;\r\n      int k = 0;\r\n      ${block}\r\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n      float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n      return value;\r\n    }\r\n    `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createAveragePoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const kernelSize = ShapeUtil.size(kernelShape);\r\n  const op1 = 'value += _X(x);';\r\n  let op2 = '';\r\n  if (countIncludePad) {\r\n    op2 += `value /= float(${kernelSize});`;\r\n  } else {\r\n    op2 += `value /= float(${kernelSize} - pad);`;\r\n  }\r\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n  const poolingCode = generatePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\r\n  const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createMaxPoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const op1 = `\r\n              value = max(_X(x), value);\r\n      `;\r\n  const op2 = '';\r\n  const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n  const poolingCode = generatePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\r\n  const shaderSource = `\r\n    ${poolingCode}\r\n  `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function generatePoolingCode(\r\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\r\n    startVal: string): string {\r\n  const inputDims = x.shape;\r\n  const rank = x.shape.length;\r\n  if (kernelShape.length <= 2) {\r\n    const kw = kernelShape[kernelShape.length - 1];\r\n    const sw = strides[strides.length - 1];\r\n    const pwStart = pads[pads.length / 2 - 1];\r\n    const pwEnd = pads[pads.length - 1];\r\n    const dimW = inputDims[rank - 1];\r\n    let codeW = '';\r\n    let codeH = '';\r\n    let codeHEnd = '';\r\n    if (pwStart + pwEnd !== 0) {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n                    pad++;\r\n                    continue;\r\n                  }\r\n                  ${op1}\r\n                }`;\r\n    } else {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  ${op1}\r\n                }`;\r\n    }\r\n\r\n    if (kernelShape.length === 2) {\r\n      const kh = kernelShape[kernelShape.length - 2];\r\n      const sh = strides[strides.length - 2];\r\n      const phStart = pads[pads.length / 2 - 2];\r\n      const phEnd = pads[pads.length - 2];\r\n      const dimH = inputDims[rank - 2];\r\n      if (phStart + phEnd !== 0) {\r\n        codeH = `\r\n              for (int j = 0; j < ${kh}; j++) {\r\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                  pad+= ${kw};\r\n                  continue;\r\n                }\r\n            `;\r\n      } else {\r\n        codeH = `\r\n                for (int j = 0; j < ${kh}; j++) {\r\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                `;\r\n      }\r\n      codeHEnd = `\r\n              }\r\n            `;\r\n    }\r\n\r\n    const poolingCode = `\r\n            float process(int indices[${rank}]) {\r\n              int x[${rank}];\r\n              copyVec(indices, x);\r\n\r\n              float value = ${startVal};\r\n              int pad = 0;\r\n              ${codeH}\r\n              ${codeW}\r\n              ${codeHEnd}\r\n              ${op2}\r\n              return value;\r\n            }\r\n          `;\r\n    return poolingCode;\r\n  } else {\r\n    const kernelSize = ShapeUtil.size(kernelShape);\r\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\r\n    const stridesRank = kernelStrides.length;\r\n    const padsRank = pads.length;\r\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n    const copyInputDims = copyArray(inputDims, 'inputDims');\r\n    const copyPads = copyArray(pads, 'pads');\r\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n    const copyStrides = copyArray(strides, 'strides');\r\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\r\n    let padCode = '';\r\n    if (hasPads) {\r\n      padCode = `\r\n                if (x[j] >= inputDims[j] || x[j] < 0) {\r\n                  pad++;\r\n                  isPad = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!isPad) {\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      padCode = `\r\n                  }\r\n                  ${op1}`;\r\n    }\r\n    const poolingCode = `\r\n            ${offsetToIndicesFunction}\r\n            float process(int indices[${rank}]) {\r\n                int x[${rank}];\r\n                copyVec(indices, x);\r\n                int offset[${stridesRank}];\r\n                int pads[${padsRank}];\r\n                int inputDims[${rank}];\r\n                int kernelStrides[${stridesRank}];\r\n                int strides[${stridesRank}];\r\n                ${copyPads}\r\n                ${copyInputDims}\r\n                ${copyStrides}\r\n                ${copyKernelStrides}\r\n\r\n                float value = ${startVal};\r\n                int pad = 0;\r\n                bool isPad = false;\r\n                for (int i = 0; i < ${kernelSize}; i++) {\r\n                    offsetToIndices(i, kernelStrides, offset);\r\n                    isPad = false;\r\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n                      ${padCode}\r\n                }\r\n                ${op2}\r\n\r\n                return value;\r\n            }`;\r\n    return poolingCode;\r\n  }\r\n}\r\n\r\nexport function copyArray(array: readonly number[], arrayName: string): string {\r\n  let block = '';\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n}\r\n\r\nexport function offsetToIndices(rank: number): string {\r\n  return `\r\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n      if (${rank} == 0) {\r\n        return;\r\n      }\r\n      for (int i = 0; i < ${rank} - 1; ++i) {\r\n        indices[i] = offset / strides[i];\r\n        offset -= indices[i] * strides[i];\r\n      }\r\n      indices[${rank} - 1] = offset;\r\n    }`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ReduceBase} from '../../../ops/reduce-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\r\n  abstract getOps(inputs: Tensor[], axes: number[]): string[];\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape: number[] = [];\r\n    const iRank = inputs[0].dims.length || 1;\r\n\r\n    const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n    const axes = ShapeUtil.normalizeAxes(this.axes, inputs[0].dims.length);\r\n    const ops = this.getOps(inputs, axes);  // [init ops, reduce ops, final ops]\r\n    let reduceOps = ops[1];\r\n\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      // if this axis is reduced\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        if (this.keepDims) {\r\n          outputShape.push(1);\r\n        }  // else { remove the axis from outputShape; }\r\n\r\n        // loop over the d-th axis\r\n        reduceOps = `\r\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n          inputIdx[${k}] = j${k};\r\n          ${reduceOps}\r\n        }\r\n        `;\r\n      } else {\r\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n        outputShape.push(inputs[0].dims[k]);\r\n      }\r\n    }\r\n\r\n    const oRank = outputShape.length || 1;\r\n\r\n    const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSum extends WebGLGenericReduce {\r\n  getOps(_inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMean extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    let size = 1.0;\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        size *= inputs[0].dims[k];\r\n      }\r\n    }\r\n\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMax extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMin extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[], axes: number[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceProd extends WebGLGenericReduce {\r\n  getOps(_inputs: Tensor[]): string[] {\r\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\r\n  getOps(_inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\r\n  getOps(_inputs: Tensor[]): string[] {\r\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureData, WebGLOperator} from '../types';\r\nimport {TextureLayout} from '../types';\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLReshapePacked extends Reshape implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (inputs.length !== 2) {\r\n      throw new Error('resize kernel should have input tensor count to 2.');\r\n    }\r\n\r\n    // For packed reshape, we need to re-arrange texel data for output shape.\r\n    // Our pack is designed to pack a 2x2 tile in last h and w dimension, so\r\n    // for the reshaped new tensor, we just need to re-arrange the last h and\r\n    // w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\r\n    // first convert it to 3D by collapsing other dimension to batch dim, then\r\n    // process with the last two dimensions.\r\n    // Note: we only need the shape tensor to calculate output shape, so the\r\n    // content in shape tensor is never uploaded to GPU. It is always kept in CPU.\r\n    // TODO: optimize the algorithm -- in some cases, if the last two dims are\r\n    // the same between input shape and output shape, the packed reshape can be\r\n    // treated as no-op.\r\n    // TODO: the implementation is a bit complicated due to the fact tensor shape is\r\n    // immutable once the tensor is created, plus the tensor shape has a 1-to-1\r\n    // mapping with texture layout. In the future, we may consider relaxing this\r\n    // assumption.\r\n\r\n    const originInputShape = inputs[0].dims;\r\n    this.inputShape3D = processDims3D(inputs[0].dims);\r\n    let inputLayout: TextureLayout;\r\n    inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true, originInputShape, true);\r\n    if (originInputShape.length !== 3) {\r\n      const originalInputLayout = inputLayout;\r\n      // if originShape is not a 3D shape, create texture layout from the processed shape.\r\n      inputLayout = handler.createTextureLayoutFromShape(\r\n          this.inputShape3D, 4, this.inputShape3D, {isPacked: true, reverseWH: true});\r\n      // if the processed input shape produces texture layout differnt from the original\r\n      // one, the run data has to use the processed (3D) input shape later.\r\n      this.needSqueezeInputData =\r\n          (inputLayout.height !== originalInputLayout.height) || (inputLayout.width !== originalInputLayout.width);\r\n    }\r\n\r\n    this.outputShape = ShapeUtil.calculateReshapedDims(originInputShape, inputs[1].integerData);\r\n    const squeezedOutputShape = processDims3D(this.outputShape);\r\n\r\n    this.outputLayout = handler.createTextureLayoutFromShape(\r\n        squeezedOutputShape, 4, squeezedOutputShape, {isPacked: true, reverseWH: true});\r\n\r\n    let mainLoop = '';\r\n    for (let i = 0; i < 4; i++) {\r\n      let outputCoords = '';\r\n      switch (i) {\r\n        case 0:\r\n          outputCoords = 'outputCoords = rc;';\r\n          break;\r\n        case 1:\r\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\r\n          break;\r\n        case 2:\r\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\r\n          break;\r\n        case 3:\r\n          outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\r\n          break;\r\n        default:\r\n          throw new Error();\r\n      }\r\n\r\n      mainLoop += `\r\n        ${outputCoords}\r\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\r\n          int flattenedIndex = getFlattenedIndex(outputCoords);\r\n\r\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\r\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\r\n\r\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\r\n\r\n        ${i > 0 ? '}' : ''}\r\n      `;\r\n    }\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const shaderSource = `\r\n      ${getReshapedInputCoords(this.inputShape3D)}\r\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\r\n      ${unpackFromChannel()}\r\n\r\n      void main() {\r\n        ivec3 rc = getOutputCoords();\r\n\r\n        vec4 result = vec4(0.0);\r\n\r\n        ivec3 outputCoords;\r\n        int rows = ${squeezedOutputShape[2]};\r\n        int cols = ${squeezedOutputShape[1]};\r\n\r\n        ${mainLoop}\r\n        ${glsl.output} = result;\r\n      }\r\n    `;\r\n\r\n    return {\r\n      name: 'WebGLReshapePacked',\r\n      inputLayouts: [inputLayout],\r\n      outputLayout: this.outputLayout,\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    let inputTDs: [TextureData];\r\n    const originalInputLayout = handler.getOrCreateTextureLayout(inputs[0], 1, false, [], false);\r\n    const originalInputTD = handler.getOrCreateTextureData(inputs[0], originalInputLayout, false);\r\n\r\n    if (this.needSqueezeInputData) {\r\n      const squeezedInputLayout: TextureLayout = {\r\n        channels: 1,\r\n        height: originalInputLayout.height,\r\n        width: originalInputLayout.width,\r\n        shape: this.inputShape3D,\r\n        strides: ShapeUtil.computeStrides(this.inputShape3D),\r\n        unpackedShape: this.inputShape3D,\r\n      };\r\n      const squeezedInputTD =\r\n          handler.createSharedTextureData(squeezedInputLayout, inputs[0].type, originalInputTD.texture);\r\n      inputTDs = [squeezedInputTD];\r\n\r\n    } else {\r\n      inputTDs = [originalInputTD];\r\n    }\r\n    let outputLayout = this.outputLayout;\r\n    // Use original output shape for runData output layout.\r\n    outputLayout.shape = this.outputShape;\r\n    outputLayout.unpackedShape = this.outputShape;\r\n    if (outputLayout === undefined) {\r\n      outputLayout = handler.createTextureLayoutFromShape(\r\n          this.outputShape, 4, this.outputShape, {isPacked: true, reverseWH: true});\r\n    }\r\n    // return run data for reshape. Here, we use the original calculate outputLayout to create the real output layout.\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  protected outputShape: readonly number[];\r\n  private inputShape3D: [number, number, number];\r\n  private needSqueezeInputData = false;\r\n  private outputLayout: TextureLayout;\r\n}\r\n\r\nfunction processDims3D(shape: readonly number[]|readonly number[]|Tensor.IntegerType): [number, number, number] {\r\n  if (shape.length === 0) {\r\n    return [1, 1, 1];\r\n  }\r\n  // TODO: squeeze other shapes to 2D case\r\n  const batchDims = shape.length >= 3 ? shape.slice(0, shape.length - 2) : [1];\r\n  let batch = 1;\r\n  for (let i = 0; i < batchDims.length; ++i) {\r\n    batch *= batchDims[i];\r\n  }\r\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n  const coords = ['b', 'r', 'c'];\r\n  const index = 'index';\r\n  const coordsFromIndexSnippet = strides\r\n                                     .map((stride, i) => {\r\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\r\n                                       const line2 = i === strides.length - 1 ?\r\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\r\n                                           `index -= ${coords[i]} * ${stride}`;\r\n                                       return `${line1}; ${line2};`;\r\n                                     })\r\n                                     .join('');\r\n\r\n  return `\r\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\r\n      ${coordsFromIndexSnippet}\r\n      return ivec3(b, r, c);\r\n    }\r\n  `;\r\n}\r\n\r\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\r\n  const strides = ShapeUtil.computeStrides(shape);\r\n\r\n  return `\r\n  int getFlattenedIndex(ivec3 coords) {\r\n    // reverse y, z order\r\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\r\n  }\r\n`;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureLayout} from '../types';\r\nimport {getPackedShape} from '../utils';\r\nimport {WebGLReshapePacked} from './reshape-packed';\r\n\r\nexport class WebGLReshape extends Reshape {\r\n  packedImpl: WebGLReshapePacked;\r\n  constructor() {\r\n    super();\r\n    this.packedImpl = new WebGLReshapePacked();\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (inferenceHandler.session.pack) {\r\n      return inferenceHandler.run(this.packedImpl, inputs);\r\n    } else {\r\n      const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n      const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\r\n      return [reshapedTensor];\r\n    }\r\n  }\r\n}\r\n\r\nexport function reshape(\r\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: readonly number[]): Tensor {\r\n  const inputTD = inferenceHandler.getOrCreateTextureData(input);\r\n  let packedShape = reshapedDims;\r\n  if (inputTD.channels === 4) {\r\n    packedShape = getPackedShape(reshapedDims);\r\n  }\r\n  const newTextureLayout: TextureLayout = {\r\n    channels: inputTD.channels,\r\n    height: inputTD.height,\r\n    width: inputTD.width,\r\n    // handle reshaping into scalar Tensors\r\n    shape: packedShape.length !== 0 ? packedShape : [1],\r\n    strides: ShapeUtil.computeStrides(packedShape),\r\n    unpackedShape: reshapedDims,\r\n  };\r\n\r\n  const newTextureData = inferenceHandler.createSharedTextureData(newTextureLayout, input.type, inputTD.texture);\r\n  return newTextureData.tensor;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Upsample} from '../../../ops/upsample';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\n\r\nimport {unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLResizePacked extends Upsample implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true);\r\n\r\n    const [roi, scales, outputShape] = this.prepareInputs(inputs);\r\n\r\n    const outputLayout =\r\n        handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true});\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    return createResizeProgramInfo(\r\n        glsl, this.mode, inputLayout, outputLayout, scales, roi, this.useExtrapolation, this.extrapolationValue,\r\n        this.cubicCoefficientA, this.excludeOutside, this.coordinateTransformMode);\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTD =\r\n        handler.getOrCreateTextureData(inputs[0], handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true));\r\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type);\r\n    return {inputTextureDatas: [inputTD], outputTextureData: outputTD, uniformData: {}};\r\n  }\r\n\r\n  protected artifacts: Artifact[];\r\n}\r\n\r\nfunction createResizeProgramInfo(\r\n    glsl: Glsl, mode: string, inputLayout: TextureLayout, outputLayout: TextureLayout, scales: readonly number[],\r\n    roi: readonly number[], extrapolationEnabled: boolean, extrapolationValue: number, cubicCoefficientA: number,\r\n    excludeOutside: boolean, coordinateTransformMode: string): ProgramInfo {\r\n  const isSame = scales.every(s => s === 1) && coordinateTransformMode !== 'tf_crop_and_resize';\r\n  if (isSame) {\r\n    return {\r\n      inputLayouts: [inputLayout],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      hasMain: true,\r\n      shaderSource: `void main() {\r\n      vec4 v = ${glsl.texture2D}(X, TexCoords);\r\n      ${glsl.output} = v;\r\n    }`\r\n    };\r\n  }\r\n  const outputShape = outputLayout.unpackedShape;\r\n  const dim = outputShape.length;\r\n  if (dim < 2) {\r\n    throw new Error(`output dimension should be at least 2, but got ${dim}`);\r\n  }\r\n\r\n  const outputHeight = outputShape[dim - 2];\r\n  const outputWidth = outputShape[dim - 1];\r\n\r\n  const inputShape = inputLayout.unpackedShape;\r\n  if (dim !== inputShape.length) {\r\n    throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\r\n  }\r\n  const inputHeight = inputShape[dim - 2];\r\n  const inputWidth = inputShape[dim - 1];\r\n\r\n  const scalesHeight = scales[dim - 2];\r\n  const scalesWidth = scales[dim - 1];\r\n\r\n  let getSourceFracIndex = '';\r\n\r\n  if (mode !== 'linear') {\r\n    // TODO: support other modes\r\n    throw new Error(`resize (packed) does not support mode: '${mode}'`);\r\n  }\r\n  switch (coordinateTransformMode) {\r\n    case 'asymmetric':\r\n      getSourceFracIndex = `\r\n        vec4 getSourceFracIndex(ivec4 coords){\r\n          return vec4(coords) / scaleWHWH;\r\n        }\r\n    `;\r\n      break;\r\n    case 'half_pixel':\r\n      getSourceFracIndex = `\r\n        vec4 getSourceFracIndex(ivec4 coords){\r\n          return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\r\n        }\r\n    `;\r\n      break;\r\n    case 'align_corners':\r\n      getSourceFracIndex = `\r\n        vec4 getSourceFracIndex(ivec4 coords){\r\n          vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0, ${\r\n          outputHeight}.0 - 1.0);\r\n          vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0, ${\r\n          inputHeight}.0 - 1.0);\r\n          vec4 new_scale = original / resized;\r\n          return vec4(coords) * new_scale;\r\n        }\r\n      `;\r\n      break;\r\n    default:\r\n      // TODO:supporting other coordinateTransformModes\r\n      throw new Error(`resize (packed) does not support coordinateTransformMode: '${coordinateTransformMode}'`);\r\n  }\r\n\r\n  const coordsDataType = getCoordsDataType(dim);\r\n  const unpackChannel = unpackFromChannel();\r\n  const shader = `\r\n        const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\r\n        const vec4 scaleWHWH = vec4(${scalesHeight}.0, ${scalesWidth}.0, ${scalesHeight}.0, ${scalesWidth}.0);\r\n        ${unpackChannel}\r\n        ${getSourceFracIndex}\r\n        float getAValue(int x10, int r, int c, int d) {\r\n          return getChannel(getA(x10, r, c, d), vec2(c, d));\r\n        }\r\n        void main() {\r\n          ${coordsDataType} rc = getOutputCoords();\r\n\r\n          int batch = rc[0];\r\n          int depth = rc[1];\r\n\r\n          // retrieve the 4 coordinates that is used in the 4 packed output values.\r\n          ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\r\n\r\n          // calculate the source index in fraction\r\n          vec4 sourceFrac = getSourceFracIndex(coords);\r\n\r\n          // get the lower and upper bound of the 4 values that will be packed into one texel.\r\n          ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\r\n          ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\r\n          ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\r\n          ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\r\n\r\n          bool hasNextRow = rc.w < ${outputHeight - 1};\r\n          bool hasNextCol = rc.z < ${outputWidth - 1};\r\n\r\n          // pack x00, x01, x10, x11's top-left corner into one vec4 structure\r\n          vec4 topLeft = vec4(\r\n            getAValue(batch, depth, x00.x, x00.y),\r\n            hasNextCol ? getAValue(batch, depth, x01.x, x01.y)\r\n                      : 0.0,\r\n            hasNextRow ? getAValue(batch, depth, x10.x, x10.y)\r\n                      : 0.0,\r\n            (hasNextRow && hasNextCol) ?\r\n              getAValue(batch, depth, x11.x, x11.y) : 0.0);\r\n\r\n          // pack x00, x01, x10, x11's top-right corner into one vec4 structure\r\n          vec4 topRight = vec4(\r\n            getAValue(batch, depth, x00.x, x00.w),\r\n            hasNextCol ? getAValue(batch, depth, x01.x, x01.w)\r\n                      : 0.0,\r\n            hasNextRow ? getAValue(batch, depth, x10.x, x10.w)\r\n                      : 0.0,\r\n            (hasNextRow && hasNextCol) ?\r\n              getAValue(batch, depth, x11.x, x11.w) : 0.0);\r\n\r\n          // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\r\n          vec4 bottomLeft = vec4(\r\n            getAValue(batch, depth, x00.z, x00.y),\r\n            hasNextCol ? getAValue(batch, depth, x01.z, x01.y)\r\n                      : 0.0,\r\n            hasNextRow ? getAValue(batch, depth, x10.z, x10.y)\r\n                      : 0.0,\r\n            (hasNextRow && hasNextCol) ?\r\n              getAValue(batch, depth, x11.z, x11.y) : 0.0);\r\n\r\n          // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\r\n          vec4 bottomRight = vec4(\r\n            getAValue(batch, depth, x00.z, x00.w),\r\n            hasNextCol ? getAValue(batch, depth, x01.z, x01.w)\r\n                      : 0.0,\r\n            hasNextRow ? getAValue(batch, depth, x10.z, x10.w)\r\n                      : 0.0,\r\n            (hasNextRow && hasNextCol) ?\r\n              getAValue(batch, depth, x11.z, x11.w) : 0.0);\r\n\r\n          // calculate the interpolation fraction on u and v direction\r\n          vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\r\n          vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\r\n\r\n          vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\r\n          vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\r\n          vec4 newValue = mix(top, bottom, clampFrac.xxzz);\r\n\r\n          ${glsl.output} = vec4(newValue);\r\n        }\r\n      `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout,\r\n    samplers: ['A'],\r\n    shaderSource: shader,\r\n    hasMain: true,\r\n    expectPackedInputs: true,\r\n    expectPackedOutputs: true,\r\n  };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Slice, SliceV10} from '../../../ops/slice';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSlice extends Slice implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createProgramInfo(handler, inputs[0], this.starts, this.ends, this.axes);\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nexport class WebGLSliceV10 extends SliceV10 implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId) ||\r\n        (inputs.length >= 4 && !handler.session.isInitializer(inputs[3].dataId)) ||\r\n        (inputs.length >= 5 && !handler.session.isInitializer(inputs[4].dataId))) {\r\n      throw new Error('dynamic slice attributes are not allowed');\r\n    }\r\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n      throw new Error('currently non-1 steps is not supported for Slice');\r\n    }\r\n    const starts = Array.from(inputs[1].integerData);\r\n    const ends = Array.from(inputs[2].integerData);\r\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n\r\n    return createProgramInfo(handler, inputs[0], starts, ends, axes);\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nfunction createProgramInfo(\r\n    handler: WebGLInferenceHandler, x: Tensor, starts: readonly number[], ends: readonly number[],\r\n    axes: readonly number[]): ProgramInfo {\r\n  if (axes.length === 0) {\r\n    axes = x.dims.slice(0).map((val, ind) => ind);\r\n  }\r\n  axes = ShapeUtil.normalizeAxes(axes, x.dims.length);\r\n  starts = starts.map((start, ind) => {\r\n    if (start > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.normalizeAxis(start, x.dims[axes[ind]]);\r\n  });\r\n  ends = ends.map((end, ind) => {\r\n    if (end > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.normalizeAxis(end, x.dims[axes[ind]]);\r\n  });\r\n\r\n  const outputShape = x.dims.slice();\r\n\r\n  const sliceOps: string[] = [];\r\n  for (let i = 0; i < axes.length; i++) {\r\n    outputShape[axes[i]] = ends[i] - starts[i];\r\n    if (starts[i] > 0) {\r\n      sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\r\n    }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\r\n  }\r\n\r\n  const rank = outputShape.length;\r\n  const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n  return {\r\n    inputLayouts: [handler.getOrCreateTextureLayout(x)],\r\n    outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['A'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nfunction createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n  const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n  return {\r\n    inputTextureDatas: inputTDs,\r\n    outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n    uniformData: {}\r\n  };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\n\r\nexport class WebGLSoftmax extends Softmax {\r\n  constructor() {\r\n    super();\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      programInfos.forEach((pi) => {\r\n        const artifact = inferenceHandler.session.programManager.build(pi);\r\n        this.artifacts.push(artifact);\r\n      });\r\n    }\r\n\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\r\n    // return only the last output\r\n    return [runDatas[runDatas.length - 1].outputTextureData.tensor];\r\n  }\r\n  createSoftMaxProgramInfo(\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\r\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\r\n    const inputShape = input.dims.slice();\r\n    const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n    const outputShape = inputShape;\r\n    const rank = outputShape.length;\r\n    const textureWidth = inputLayout.width;\r\n    const textureHeight = inputLayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\r\n      throw new Error('Dimensionality of the intermediate results should be 1');\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\r\n      throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n    }\r\n\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${D};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max', 'Norm'],\r\n      shaderSource,\r\n      name: 'SoftMax',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a texture that contains the normalization factor for each of the 'N' rows\r\n   */\r\n  createComputScaleProgramInfo(\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\r\n      outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error('Dimensionality of the output should be 1');\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error('Shape of the output should be equal to logical row count');\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1) {\r\n      throw new Error('Dimensionality of the intermediate results should be 1');\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N) {\r\n      throw new Error('Shape of the intermediate results should be equal to logical row count');\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      int logical_row_start_offset = indices[0] * ${D};\r\n\r\n      float norm_factor = 0.0;\r\n      float max = _Max(indices);\r\n      for(int i=0; i<${D}; ++i)\r\n      {\r\n        norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight}))) - max);\r\n      }\r\n\r\n      return norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max'],\r\n      shaderSource,\r\n      name: 'ComputScale',\r\n    };\r\n  }\r\n  /**\r\n   * Create a texture that contains the maximum value of each of the 'N' rows\r\n   */\r\n  createComputeMaxProgramInfo(\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error('Dimensionality of the output should be 1');\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error('Shape of the output should be equal to logical row count');\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n        float process(int[${rank}] indices) {\r\n\r\n          int logical_row_start_offset = indices[0] * ${D};\r\n\r\n          float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\r\n        textureHeight} )));\r\n          for(int i=1; i<${D}; ++i)\r\n          {\r\n            float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight})));\r\n            if(current > max)\r\n              max = current;\r\n          }\r\n\r\n          return max;\r\n        }`;\r\n    return {\r\n      inputLayouts: [xlayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      name: 'ComputeMax',\r\n    };\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const axis = ShapeUtil.normalizeAxis(this.axis, inputShape.length);\r\n    const N = ShapeUtil.sizeToDimension(inputShape, axis);\r\n    const D = ShapeUtil.sizeFromDimension(inputShape, axis);\r\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\r\n    const computeScaleProgramInfo =\r\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\r\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\r\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\r\n\r\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\r\n    return programInfos;\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const dataType = inputs[0].type;\r\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\r\n    const runDatas: RunData[] = [];\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\r\n      uniformData: {}\r\n    });\r\n    for (let i = 1; i < programInfos.length; ++i) {\r\n      runDatas.push({\r\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\r\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\r\n        uniformData: {}\r\n      });\r\n    }\r\n    return runDatas;\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Split} from '../../../ops/split';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil, SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLSplit extends Split {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const axis = ShapeUtil.normalizeAxis(this.axis, inputs[0].dims.length);\r\n      const count = this.getProgramCount(inferenceHandler, inputs, axis);\r\n      for (let i = 0; i < count; ++i) {\r\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], axis, i);\r\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const results: Tensor[] = [];\r\n\r\n    this.artifacts.forEach(artifact => {\r\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\r\n      inferenceHandler.session.programManager.run(artifact, rundata);\r\n      results.push(rundata.outputTextureData.tensor);\r\n    });\r\n    return results;\r\n  }\r\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): number {\r\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, this.split, this.numOutputs);\r\n    return offsets.length;\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, axis: number, index: number): ProgramInfo {\r\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, this.split, this.numOutputs);\r\n    const offset = offsets[index];\r\n    const outputShape = shapes[index];\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${axis}] += ${offset};\r\n        return _A(indices);\r\n      }`;\r\n    return {\r\n      name: 'WebGLSplit',\r\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Squeeze} from '../../../ops/squeeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLSqueeze extends Squeeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSum extends Sum implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const outputShape = inputs[0].dims.slice();\r\n    const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      shaderSource: `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }`,\r\n      hasMain: true\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tile} from '../../../ops/tile';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTile extends Tile implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\r\n\r\n    const tileOps: string[] = [];\r\n    for (let i = 0; i < inputShape.length; i++) {\r\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n    float process(int outputIdx[${rank}]) {\r\n      int inputIdx[${rank}];\r\n      ${tileOps.join('\\n')}\r\n      return _A(inputIdx);\r\n    }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Transpose} from '../../../ops/transpose';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTranspose extends Transpose implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  getOutputShape(inputShapes: Array<readonly number[]>): readonly number[] {\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShapes = inputs.map(t => t.dims.slice());\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    const unpackedOutputShape = this.getOutputShape(inputShapes);\r\n    const rank = inputs[0].dims.length;\r\n    // A dims=[${inputs[0].dims.toString()}]\r\n    // out Dims=[${unpackedOutputShape.toString()}]\r\n    // based on perm=[${perm.toString()}]\r\n    const shaderSource = `\r\n      ${this.getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n    const outputLayout = handler.createTextureLayoutFromShape(unpackedOutputShape, 1, unpackedOutputShape);\r\n    return {inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])], outputLayout, samplers: ['A'], shaderSource};\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\r\n    const outputShape = this.getOutputShape([inputShape]);\r\n    if (!name) {\r\n      name = 'perm';\r\n    }\r\n    return {\r\n      name,\r\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\r\n      type: FunctionType.Positional,\r\n      inputShape,\r\n      outputShape\r\n    };\r\n  }\r\n  protected getAdjustedPerm(inputShape: readonly number[]): number[] {\r\n    let perm = this.perm;\r\n    if (perm && perm.length !== inputShape.length) {\r\n      perm = [...(inputShape.keys())].reverse();\r\n    }\r\n    return perm;\r\n  }\r\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\r\n    const reverseFunc = [];\r\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n    for (let i = 0; i < rank; ++i) {\r\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n    }\r\n    reverseFunc.push('\\t}');\r\n    return reverseFunc.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureLayout} from '../types';\r\n\r\nexport class WebGLUint8Encode {\r\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\r\n    const outputShape = input.shape;\r\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\r\n    const outputLayout: TextureLayout = {\r\n      width,\r\n      height,\r\n      channels: 4,\r\n      shape: outputShape,\r\n      strides: ShapeUtil.computeStrides(outputShape),\r\n      unpackedShape: outputShape\r\n    };\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    // TODO: remove this special script. Use graph transformer instead.\r\n    /**\r\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n     */\r\n    const shaderSource = `\r\n      const float FLOAT_MAX = 1.70141184e38;\r\n      const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n      bool isNaN(float val) {\r\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n      }\r\n\r\n      highp vec4 encodeAsUint8(highp float v) {\r\n        if (isNaN(v)) {\r\n          return vec4(255, 255, 255, 255);\r\n        }\r\n\r\n        highp float av = abs(v);\r\n\r\n        if(av < FLOAT_MIN) {\r\n          return vec4(0.0, 0.0, 0.0, 0.0);\r\n        } else if(v > FLOAT_MAX) {\r\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n        } else if(v < -FLOAT_MAX) {\r\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n        }\r\n\r\n        highp vec4 c = vec4(0,0,0,0);\r\n\r\n        highp float e = floor(log2(av));\r\n        highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n        c[2] = floor(128.0 * m);\r\n        m -= c[2] / 128.0;\r\n        c[1] = floor(32768.0 * m);\r\n        m -= c[1] / 32768.0;\r\n        c[0] = floor(8388608.0 * m);\r\n\r\n        highp float ebias = e + 127.0;\r\n        c[3] = floor(ebias / 2.0);\r\n        ebias -= c[3] * 2.0;\r\n        c[2] += floor(ebias) * 128.0;\r\n\r\n        c[3] += 128.0 * step(0.0, -v);\r\n\r\n        return c / 255.0;\r\n      }\r\n\r\n      void main() {\r\n        float value = ${glsl.texture2D}(X,TexCoords).r;\r\n        ${glsl.output} = encodeAsUint8(value);\r\n      }`;\r\n    const programInfo =\r\n        {name: 'Uint8Encode', inputLayouts: [input], outputLayout, samplers: ['X'], shaderSource, hasMain: true};\r\n    const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n\r\n    const encoder = inferenceHandler.session.backend.glContext.getEncoder('byte', 4);\r\n    const texture =\r\n        inferenceHandler.session.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, encoder);\r\n    const outputTextureData = inferenceHandler.createSharedTextureData(outputLayout, 'uint8', texture);\r\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\r\n\r\n    inferenceHandler.session.programManager.run(artifact, runData);\r\n    return runData.outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {UnaryOp} from '../../../ops/unary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\r\n  constructor(protected typeConstraint: readonly Tensor.DataType[], protected glslFunc: GlslValueFunction) {\r\n    super(typeConstraint);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const inputLayout = handler.session.pack ?\r\n        handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true) :\r\n        handler.getOrCreateTextureLayout(inputs[0]);\r\n\r\n    const outputLayout = handler.session.pack ?\r\n        handler.createTextureLayoutFromShape(outputShape, 4, outputShape, {isPacked: true, reverseWH: true}) :\r\n        handler.createTextureLayoutFromShape(outputShape);\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      void main() {\r\n        vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n        v = ${this.glslFunc.name}(v);\r\n        ${glsl.output} = v;\r\n      }\r\n      `;\r\n\r\n    if (handler.session.pack) {\r\n      return {\r\n        inputLayouts: [inputLayout],\r\n        outputLayout,\r\n        samplers: ['A'],\r\n        shaderSource,\r\n        hasMain: true,\r\n        expectPackedInputs: true,\r\n        expectPackedOutputs: true\r\n      };\r\n    } else {\r\n      return {inputLayouts: [inputLayout], outputLayout, samplers: ['A'], shaderSource, hasMain: true};\r\n    }\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTD = handler.session.pack ?\r\n        handler.getOrCreateTextureData(inputs[0], handler.getOrCreateTextureLayout(inputs[0], 1, false, [], true)) :\r\n        handler.getOrCreateTextureData(inputs[0]);\r\n    return {\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTD.tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = 'indentity_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = 'neg_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = 'not_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = 'relu_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = 'sigmoid_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = 'tanh_';\r\n  const body = `\r\n  float ${name}(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return ${fname}(a);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return ${fname}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\nimport {getCoordsDataType} from '../utils';\r\nimport {getChannels, unpackFromChannel} from './packing-utils';\r\n\r\nexport class WebGLUnpack implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (inputs.length !== 1) {\r\n      throw new Error('Pack kernel should have input tensor count to 1.');\r\n    }\r\n\r\n    const inputTexture = handler.getTextureData(inputs[0].dataId, true);\r\n    if (!inputTexture) {\r\n      throw new Error('packed input texture must exist');\r\n    }\r\n\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0], 4, true);\r\n    const isScalar = (inputLayout.unpackedShape.length === 0);\r\n    const outputLayout = handler.createTextureLayoutFromShape(inputTexture.unpackedShape);\r\n    const outputShape = outputLayout.shape;\r\n    const rank = outputShape.length;\r\n\r\n    const channels = getChannels('rc', rank);\r\n    const innerDims = channels.slice(-2);\r\n    const coordsDataType = getCoordsDataType(rank);\r\n    const unpackChannel = unpackFromChannel();\r\n    const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\r\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${unpackChannel}\r\n    void main() {\r\n      ${coordsDataType} rc = getOutputCoords();\r\n\r\n      // Sample the texture with the coords to get the rgba channel value.\r\n      vec4 packedInput = getA(${sourceCoords});\r\n\r\n      ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\r\n    }\r\n  `;\r\n\r\n    return {\r\n      name: 'WebGLUnpack',\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0], 4, true, inputs[0].dims, true)],\r\n      outputLayout,\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n      expectPackedInputs: true,\r\n      expectPackedOutputs: false,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0], true)];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function getSourceCoords(rank: number, dims: string[]): string {\r\n  if (rank === 1) {\r\n    return 'rc';\r\n  }\r\n\r\n  let coords = '';\r\n  for (let i = 0; i < rank; i++) {\r\n    coords += dims[i];\r\n    if (i < rank - 1) {\r\n      coords += ',';\r\n    }\r\n  }\r\n  return coords;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Unsqueeze} from '../../../ops/unsqueeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLUnsqueeze extends Unsqueeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Upsample} from '../../../ops/upsample';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLUpsample extends Upsample implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\r\n    const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * this.scales[i]));\r\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\r\n    const dim = outputShape.length;\r\n\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n\r\n    const outputPitches = new Array<number>(dim);\r\n    const inputPitches = new Array<number>(dim);\r\n    let precalculatedPitches = `\r\n      int output_pitches[${dim}];\r\n      int input_pitches[${dim}];\r\n      `;\r\n    for (let d = dim - 1; d >= 0; d--) {\r\n      outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\r\n      inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\r\n\r\n      precalculatedPitches += `\r\n      output_pitches[${d}] = ${outputPitches[d]};\r\n      input_pitches[${d}] = ${inputPitches[d]};\r\n      `;\r\n    }\r\n    const getInputFloatFunction = `\r\n    float getInputFloat(int index) {\r\n      vec2 coords = offsetToCoords(index, ${inputLayout.width}, ${inputLayout.height});\r\n      float value = getColorAsFloat(${glsl.texture2D}(X, coords));\r\n      return value;\r\n    }\r\n    `;\r\n\r\n    const shaderSource = this.mode === 'nearest' ?\r\n        // nearest\r\n        `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[${dim}]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int d, m;\r\n        for (int dim = 0; dim < ${dim}; ++dim) {\r\n          d = output_index / output_pitches[dim];\r\n          m = output_index - d * output_pitches[dim];\r\n          output_index = m;\r\n\r\n          if (scales[dim] != 1 && d > 0) {\r\n            int d2 = d / scales[dim];\r\n            m = d - d2 * scales[dim];\r\n            d = d2;\r\n          }\r\n          input_index += input_pitches[dim] * d;\r\n        }\r\n\r\n        return getInputFloat(input_index);\r\n      }` :\r\n        dim === 4 ?\r\n        // bilinear 4D\r\n            `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[4]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int m;\r\n        int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\r\n        index_of_dim0 = output_index / output_pitches[0];\r\n        m = output_index - index_of_dim0 * output_pitches[0];\r\n        index_of_dim1 = m / output_pitches[1];\r\n        m = m - index_of_dim1 * output_pitches[1];\r\n        index_of_dim2 = m / output_pitches[2];\r\n        m = m - index_of_dim2 * output_pitches[2];\r\n        index_of_dim3 = m;\r\n\r\n        int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\r\n        index_of_input_dim2 = index_of_dim2 / scales[2];\r\n        y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\r\n        index_of_input_dim3 = index_of_dim3 / scales[3];\r\n        x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\r\n\r\n        input_index = index_of_dim0 * input_pitches[0] +\r\n                      index_of_dim1 * input_pitches[1] +\r\n                      index_of_input_dim2 * input_pitches[2] +\r\n                      index_of_input_dim3;\r\n\r\n        float x00 = getInputFloat(input_index);\r\n        float x10, x01, x11;\r\n\r\n        bool end_of_dim2 = false;\r\n        if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\r\n          // It's the end in dimension 2\r\n          x01 = x00;\r\n          end_of_dim2 = true;\r\n        } else {\r\n          x01 = getInputFloat(input_index + input_pitches[2]);\r\n        }\r\n\r\n        if (index_of_input_dim3 == (input_pitches[2] - 1)) {\r\n          // It's the end in dimension 3\r\n          x10 = x00;\r\n          x11 = x01;\r\n        }\r\n        else {\r\n          x10 = getInputFloat(input_index + 1);\r\n          x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\r\n        }\r\n\r\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\r\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\r\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\r\n      }` :\r\n            // bilinear 2D\r\n            `\r\n      ${getInputFloatFunction}\r\n      float process(int indices[2]) {\r\n        int input_index = 0;\r\n        int output_index = coordsToOffset(TexCoords, ${outputLayout.width}, ${outputLayout.height});\r\n\r\n        ${precalculatedPitches}\r\n\r\n        int m;\r\n        int index_of_dim0, index_of_dim1;\r\n        index_of_dim0 = output_index / output_pitches[0];\r\n        m = output_index - index_of_dim0 * output_pitches[0];\r\n        index_of_dim1 = m;\r\n\r\n        int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\r\n        index_of_input_dim0 = index_of_dim0 / scales[0];\r\n        y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\r\n        index_of_input_dim1 = index_of_dim1 / scales[1];\r\n        x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\r\n\r\n        input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\r\n\r\n        float x00 = getInputFloat(input_index);\r\n        float x10, x01, x11;\r\n\r\n        bool end_of_dim0 = false;\r\n        if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\r\n          // It's the end in dimension 0\r\n          x01 = x00;\r\n          end_of_dim0 = true;\r\n        } else {\r\n          x01 = getInputFloat(input_index + input_pitches[0]);\r\n        }\r\n\r\n        if (index_of_input_dim1 == (input_pitches[0] - 1)) {\r\n          // It's the end in dimension 1\r\n          x10 = x00;\r\n          x11 = x01;\r\n        }\r\n        else {\r\n          x10 = getInputFloat(input_index + 1);\r\n          x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\r\n        }\r\n\r\n        float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\r\n        float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\r\n        return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\r\n      }`;\r\n    return {\r\n      inputLayouts: [inputLayout],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      shaderSource,\r\n      variables: [{name: 'scales', type: 'int', arrayLength: this.scales.length}]\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {scales: this.scales.map(x => Math.ceil(x))}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {Artifact, ProgramInfo, RunData, TextureData, UniformData, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<unknown, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(\r\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\r\n      public textureLayoutStrategy: TextureLayoutStrategy) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: unknown): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: unknown, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, runData: RunData): void {\r\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(runData.outputTextureData);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData, runData.inputTextureDatas);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.doDraw(buildArtifact, runData);\r\n      });\r\n    }, this.glContext);\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.samplers, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected doDraw(artifact: Artifact, runData: RunData): void {\r\n    if (runData.draw) {\r\n      Logger.verbose('ProgramManager', 'Custom draw function');\r\n      runData.draw(this.glContext, artifact);\r\n    } else {\r\n      this.glContext.draw();\r\n    }\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    const width = td.width;\r\n    const height = td.height;\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, width, height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, uniformData: UniformData, textures: TextureData[]): void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1f(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1i(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData, WebGLOperator} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\r\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\r\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\r\n  initializers: Set<Tensor.Id>;\r\n  packOpCache: Map<string, WebGLOperator>;\r\n  unpackOpCache: Map<string, WebGLOperator>;\r\n  pack?: boolean;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache = new Map();\r\n    this.packOpCache = new Map();\r\n    this.unpackOpCache = new Map();\r\n    this.pack = backend.pack;\r\n    this.pack2unpackMap = new Map();\r\n    this.unpack2packMap = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  addInitializer(tensorId: Tensor.Id): void {\r\n    this.initializers.add(tensorId);\r\n  }\r\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\r\n    if (isPacked) {\r\n      return this.packedTextureDataCache.get(tensorId);\r\n    } else {\r\n      return this.unpackedTextureDataCache.get(tensorId);\r\n    }\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    if (isPacked) {\r\n      this.packedTextureDataCache.set(tensorId, textureData);\r\n    } else {\r\n      this.unpackedTextureDataCache.set(tensorId, textureData);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.packedTextureDataCache = new Map();\r\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.unpackedTextureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    op.initialize(node.attributes, node, graph);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  /* eslint-disable @typescript-eslint/naming-convention */\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer instanceof Uint8Array) {\r\n      return buffer.subarray(0, dataSize);\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\nimport {assert} from '../../util';\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis?: number;\r\n  isPacked?: boolean;\r\n  reverseWH?: boolean;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n\r\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const wh = this.computeTexture(shape, prefs);\r\n    if (prefs && prefs.isPacked) {\r\n      wh[0] /= 2;\r\n      wh[1] /= 2;\r\n    }\r\n\r\n    return wh;\r\n  }\r\n\r\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\r\n    const isPacked = prefs && prefs.isPacked;\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return isPacked ? [2, 2] : [1, 1];\r\n    }\r\n    let maxTextureSize = this.maxTextureSize;\r\n    if (prefs && prefs.breakAxis !== undefined) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    let logShape = shape.slice(0);\r\n    if (isPacked) {\r\n      maxTextureSize = maxTextureSize * 2;\r\n\r\n      // This logic ensures we accurately count the number of packed texels needed\r\n      // to accommodate the tensor. We can only pack values in the same texel if\r\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\r\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\r\n      // fact that the texels containing the third row are half empty.\r\n      logShape = logShape.map(\r\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\r\n\r\n      // Packed texture height is at least 2 (the channel height of a single\r\n      // texel).\r\n      if (logShape.length === 1) {\r\n        logShape = [2, logShape[0]];\r\n      }\r\n    }\r\n\r\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\r\n    if (logShape.length !== 2) {\r\n      const squeezeResult = squeezeShape(logShape);\r\n      logShape = squeezeResult.newShape;\r\n    }\r\n\r\n    const size = sizeFromShape(logShape);\r\n    if (logShape.length <= 1 && size <= maxTextureSize) {\r\n      return [1, size];\r\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\r\n      return logShape as [number, number];\r\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1], logShape[2]];\r\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\r\n        logShape[3] <= maxTextureSize) {\r\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\r\n    } else if (\r\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\r\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\r\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\r\n    } else {\r\n      if (isPacked) {\r\n        // For packed textures size equals the number of channels required to\r\n        // accommodate the texture data. However in order to squarify such that\r\n        // inner dimensions stay even, we rewrite size to equal the number of\r\n        // texels. Then in the return statement we rehydrate the squarified\r\n        // dimensions to channel units.\r\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\r\n      }\r\n      return sizeToSquarishShape(size);\r\n    }\r\n  }\r\n}\r\n\r\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\r\n  const newShape: number[] = [];\r\n  const keptDims: number[] = [];\r\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\r\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\r\n  let j = 0;\r\n  for (let i = 0; i < shape.length; ++i) {\r\n    if (axes != null) {\r\n      if (axes[j] === i && shape[i] !== 1) {\r\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\r\n      }\r\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\r\n        newShape.push(shape[i]);\r\n        keptDims.push(i);\r\n      }\r\n      if (axes[j] <= i) {\r\n        j++;\r\n      }\r\n    }\r\n    if (shape[i] !== 1) {\r\n      newShape.push(shape[i]);\r\n      keptDims.push(i);\r\n    }\r\n  }\r\n  return {newShape, keptDims};\r\n}\r\n\r\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\r\n  const rank = shape.length;\r\n\r\n  // Normalize input\r\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\r\n\r\n  // Check for valid range\r\n  assert(\r\n      axis.every(ax => ax >= -rank && ax < rank),\r\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\r\n          `got axis ${axis}`);\r\n\r\n  // Check for only integers\r\n  assert(\r\n      axis.every(isInt),\r\n      () => 'All values in axis param must be integers but ' +\r\n          `got axis ${axis}`);\r\n\r\n  // Handle negative axis.\r\n  return axis.map(a => a < 0 ? rank + a : a);\r\n}\r\nexport function isInt(a: number): boolean {\r\n  return a % 1 === 0;\r\n}\r\nexport function sizeFromShape(shape: number[]): number {\r\n  if (shape.length === 0) {\r\n    // Scalar.\r\n    return 1;\r\n  }\r\n  let size = shape[0];\r\n  for (let i = 1; i < shape.length; i++) {\r\n    size *= shape[i];\r\n  }\r\n  return size;\r\n}\r\nexport function getRowsCols(shape: number[]): [number, number] {\r\n  if (shape.length === 0) {\r\n    throw Error('Cannot get rows and columns of an empty shape array.');\r\n  }\r\n\r\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\r\n}\r\nexport function sizeToSquarishShape(size: number): [number, number] {\r\n  const width = Math.ceil(Math.sqrt(size));\r\n  return [width, Math.ceil(size / width)];\r\n}\r\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\r\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\r\n      throw new Error('not implemented');\r\n    }\r\n    const width = layout.width;\r\n    const height = layout.height;\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return data instanceof Int16Array ? data : Int16Array.from(data);\r\n      case 'int32':\r\n        return data instanceof Int32Array ? data : Int32Array.from(data);\r\n      case 'int8':\r\n        return data instanceof Int8Array ? data : Int8Array.from(data);\r\n      case 'uint16':\r\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\r\n      case 'uint32':\r\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\r\n      case 'float32':\r\n        return data instanceof Float32Array ? data : Float32Array.from(data);\r\n      case 'float64':\r\n        return data instanceof Float64Array ? data : Float64Array.from(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {assert} from '../../util';\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n\r\nexport async function repeatedTry(\r\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    let tryCount = 0;\r\n\r\n    const tryFn = () => {\r\n      if (checkFn()) {\r\n        resolve();\r\n        return;\r\n      }\r\n\r\n      tryCount++;\r\n\r\n      const nextBackoff = delayFn(tryCount);\r\n\r\n      if (maxCounter != null && tryCount >= maxCounter) {\r\n        reject();\r\n        return;\r\n      }\r\n      setTimeout(tryFn, nextBackoff);\r\n    };\r\n\r\n    tryFn();\r\n  });\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\r\n}\r\n\r\n/**\r\n * Generates the function name from an input sampler name at output coordinates.\r\n * @param samplerName Name of the sampler.\r\n */\r\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\r\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\r\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\r\n}\r\n\r\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\r\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\r\n  // Deep copy.\r\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\r\n  newInputShape = squeezedShape;\r\n  return newInputShape;\r\n}\r\n\r\n/** Returns a list of squeezed parameters for shader functions */\r\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\r\n  return keptDims.map(d => params[d]).join(', ');\r\n}\r\n\r\n/** Returns the data type for different ranks. */\r\nexport function getCoordsDataType(rank: number): string {\r\n  if (rank <= 1) {\r\n    return 'int';\r\n  } else if (rank === 2) {\r\n    return 'ivec2';\r\n  } else if (rank === 3) {\r\n    return 'ivec3';\r\n  } else if (rank === 4) {\r\n    return 'ivec4';\r\n  } else if (rank === 5) {\r\n    return 'ivec5';\r\n  } else if (rank === 6) {\r\n    return 'ivec6';\r\n  } else {\r\n    throw Error(`GPU for rank ${rank} is not yet supported`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  context = context || createNewWebGLContext(contextId);\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const canvas = createCanvas();\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\nimport {repeatedTry} from './utils';\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  // eslint-disable-next-line camelcase\r\n  textureFloatExtension: OES_texture_float|null;\r\n  // eslint-disable-next-line camelcase\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: unknown|null;\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\r\nShader source:\r\n${shaderSource}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\r\n    ]);\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error('both float32 and float16 TextureType are not supported');\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      // eslint-disable-next-line @typescript-eslint/naming-convention\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n\r\n  beginTimer(): WebGLQuery {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      const query = gl2.createQuery() as WebGLQuery;\r\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\r\n      return query;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported.');\r\n    }\r\n  }\r\n\r\n  endTimer() {\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\r\n      return;\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n  }\r\n\r\n  isTimerResultAvailable(query: WebGLQuery): boolean {\r\n    let available = false, disjoint = false;\r\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      const ext = this.disjointTimerQueryWebgl2Extension;\r\n\r\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\r\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n\r\n    return available && !disjoint;\r\n  }\r\n\r\n  getTimerResult(query: WebGLQuery): number {\r\n    let timeElapsed = 0;\r\n    if (this.version === 2) {\r\n      const gl2 = this.gl as WebGL2RenderingContext;\r\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\r\n      gl2.deleteQuery(query);\r\n    } else {\r\n      // TODO: add webgl 1 handling.\r\n      throw new Error('WebGL1 profiling currently not supported');\r\n    }\r\n    // return miliseconds\r\n    return timeElapsed / 1000000;\r\n  }\r\n\r\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\r\n    await repeatedTry(() => this.isTimerResultAvailable(query));\r\n    return this.getTimerResult(query);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const execNodeFn = async () => {\r\n          const op = thisOp.op;\r\n          if (!op.checkInputs(inputTensors)) {\r\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\r\n          }\r\n\r\n          const result = op.run(inferenceHandler, inputTensors);\r\n\r\n          return result;\r\n        };\r\n\r\n        const outputList = await this.profiler.event('node', thisOp.node.name, execNodeFn);\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      this.graph.getOutputIndices().forEach((outputIndex) => {\r\n        const thisValue = this._values[outputIndex];\r\n        if (thisValue === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        // eslint-disable-next-line no-unused-expressions\r\n        thisValue.data;\r\n        output.push(thisValue);\r\n      });\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Attribute} from './attribute';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil, ProtoUtil} from './util';\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: readonly number[];\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: readonly number[];\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: readonly number[];\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: readonly number[];\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Graph {\r\n  getInputIndices(): readonly number[];\r\n  getInputNames(): readonly string[];\r\n  getOutputIndices(): readonly number[];\r\n  getOutputNames(): readonly string[];\r\n  getValues(): readonly Graph.Value[];\r\n  getNodes(): readonly Graph.Node[];\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\r\n      new GraphImpl(graphProto, initializer),\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\r\n    if (_nodeProto instanceof onnx.NodeProto) {\r\n      this.name = _nodeProto.name;\r\n      this.opType = _nodeProto.opType;\r\n      this.attributes = new Attribute(_nodeProto.attribute);\r\n    } else if (_nodeProto instanceof ortFbs.Node) {\r\n      this.name = name ?? _nodeProto.name()!;\r\n      this.opType = _nodeProto.opType()!;\r\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\r\n    }\r\n\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): readonly number[] {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): readonly string[] {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): readonly number[] {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): readonly string[] {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): readonly Graph.Value[] {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): readonly Graph.Node[] {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    if (graph instanceof onnx.GraphProto) {\r\n      this.buildGraphFromOnnxFormat(graph);\r\n    } else if (graph instanceof ortFbs.Graph) {\r\n      this.buildGraphFromOrtFormat(graph);\r\n    } else {\r\n      throw new TypeError('Graph type is not supported.');\r\n    }\r\n  }\r\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    const inputValueNames = [];\r\n    for (let i = 0; i < graph.inputsLength(); i++) {\r\n      const inputName = graph.inputs(i);\r\n      if (dataIndices.has(inputName)) {\r\n        throw new Error(`duplicated input name: ${inputName}`);\r\n      }\r\n      // Find the input typeInfo from nodeargs\r\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\r\n        if (graph.nodeArgs(j)?.name() === inputName) {\r\n          const value = new Value();\r\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\r\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\r\n            throw new Error('Unexpected value type for the nodeArg.');\r\n          }\r\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\r\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\r\n          const shape = valueInfo.shape()!;\r\n          const dims = [];\r\n          for (let k = 0; k < shape.dimLength()!; k++) {\r\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\r\n          }\r\n          value.type = {shape: {dims}, tensorType: type};\r\n          const currentIndex = this._allData.push(value) - 1;\r\n          dataIndices.set(inputName, currentIndex);\r\n          inputValueNames.push(inputName);\r\n        }\r\n      }\r\n    }\r\n    // check initializers\r\n    for (let i = 0; i < graph.initializersLength(); i++) {\r\n      const initializer = graph.initializers(i)!;\r\n      let index = dataIndices.get(initializer.name()!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\r\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\r\n        value.type = {shape: {dims}, tensorType: type};\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(initializer.name()!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    for (let i = 0; i < graph.outputsLength(); i++) {\r\n      const outputName = graph.outputs(i);\r\n      if (dataIndices.has(outputName)) {\r\n        throw new Error(`duplicated output name: ${outputName}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value()) - 1;\r\n      dataIndices.set(outputName, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(outputName);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.nodes) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (let i = 0; i < graph.nodesLength(); i++) {\r\n      const nodeProto = graph.nodes(i);\r\n      let name = nodeProto!.name();\r\n      if (!name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            // an unique name is found. break.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(name)) {\r\n        throw new Error(`duplicated node name: ${name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\r\n      nodesIndices.set(name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i);\r\n      if (nodeProto == null) {\r\n        throw new Error(`No node exists at index ${i}`);\r\n      }\r\n      if (nodeProto?.outputsLength() === 0) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\r\n        const output = nodeProto?.outputs(j);\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType() === 'Constant') {\r\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\r\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\r\n          }\r\n          if (nodeProto.outputsLength() !== 1) {\r\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.nodes(i)!;\r\n\r\n      if (nodeProto.inputsLength() === 0) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\r\n        const input = nodeProto.inputs(j)!;\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error('node outputs should not be initialized');\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error('model graph is cyclic');\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      if (!this._nodes[i].executeNode) {\r\n        // delete this node and shift all subsequent nodes up\r\n        offset++;\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n        this._nodes.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        // update the value table\r\n        this._nodes[i].inputs.forEach(value => {\r\n          const ind = this._allData[value]._to.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allData[value]._to[ind] = i;\r\n          }\r\n        });\r\n        this._nodes[i].outputs.forEach(value => {\r\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\r\n            this._allData[value]._from! = i;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.inputs.length > 1) {\r\n      throw new Error('Node deletion with multiple inputs is not supported. ');\r\n    }\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\r\n    // should not happen\r\n    if (delIndex === -1) {\r\n      throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\r\n    }\r\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error('Dropout nodes should only contain one input. ');\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  isActivation(n: Node): boolean {\r\n    switch (n.opType) {\r\n      // TODO: add other activation methods\r\n      case 'Relu':\r\n      case 'Sigmoid':\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  fuseConvActivationNodes() {\r\n    for (const node of this._nodes) {\r\n      if (node.opType === 'Conv') {\r\n        const next = this._allData[node.outputs[0]]._to;\r\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\r\n          node.attributes.set('__internal_activation', 'string', (this._nodes[next[0]].opType));\r\n          this.deleteNode(next[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Env} from 'onnxruntime-common';\r\n\r\nimport {WebGLContext} from './backends/webgl/webgl-context';\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n    fatal: 'f';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'warning' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n    fatal(content: string): void;\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n  fatal(content: string): void;\r\n  fatal(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n\r\n  /**\r\n   * Set the logger's behavior from ort-common env\r\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\r\n   */\r\n  setWithEnv(env: Env): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      case 'fatal':\r\n        return '\\x1b[101mf\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000,\r\n  fatal: 6000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'warning',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category),\r\n    fatal: log.fatal.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n  export function fatal(content: string): void;\r\n  export function fatal(category: string, content: string): void;\r\n  export function fatal(arg0: string, arg1?: string) {\r\n    log('fatal', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n\r\n  export function setWithEnv(env: Env): void {\r\n    const config: Logger.Config = {};\r\n    if (env.logLevel) {\r\n      config.minimalSeverity = env.logLevel as Logger.Severity;\r\n    }\r\n    set('', config);\r\n  }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void|Promise<void>;\r\n  }\r\n}\r\n// TODO\r\n// class WebGLEvent implements Profiler.Event {}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\r\n\r\n  end() {\r\n    return this.endCallback(this);\r\n  }\r\n\r\n  async checkTimer(): Promise<number> {\r\n    if (this.ctx === undefined || this.timer === undefined) {\r\n      throw new Error('No webgl timer found');\r\n    } else {\r\n      this.ctx.endTimer();\r\n      return this.ctx.waitForQueryAndGetTime(this.timer);\r\n    }\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\r\n      |Promise<T> {\r\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\r\n    let isPromise = false;\r\n\r\n    const res = func();\r\n\r\n    // we consider a then-able object is a promise\r\n    if (res && typeof (res as Promise<T>).then === 'function') {\r\n      isPromise = true;\r\n      return new Promise<T>((resolve, reject) => {\r\n        (res as Promise<T>)\r\n            .then(\r\n                async value => {  // fulfilled\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  resolve(value);\r\n                },\r\n                async reason => {  // rejected\r\n                  if (event) {\r\n                    await event.end();\r\n                  }\r\n                  reject(reason);\r\n                });\r\n      });\r\n    }\r\n    if (!isPromise && event) {\r\n      const eventRes = event.end();\r\n      if (eventRes && typeof eventRes.then === 'function') {\r\n        return new Promise<T>((resolve, reject) => {\r\n          (eventRes).then(\r\n              () => {  // fulfilled\r\n                resolve(res);\r\n              },\r\n              (reason) => {  // rejected\r\n                reject(reason);\r\n              });\r\n        });\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    if (ctx === undefined) {\r\n      const startTime = now();\r\n      this.flush(startTime);\r\n      return new Event(category, name, startTime, e => this.endSync(e));\r\n    } else {\r\n      const timer: WebGLQuery = ctx.beginTimer();\r\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\r\n    }\r\n  }\r\n\r\n  // end the specific event\r\n  private async end(event: Event): Promise<void> {\r\n    const endTime: number = await event.checkTimer();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private endSync(event: Event): void {\r\n    const endTime: number = now();\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\nimport {LongUtil} from './util';\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\r\n    if (!isOrtFormat) {\r\n      // isOrtFormat === false || isOrtFormat === undefined\r\n      try {\r\n        this.loadFromOnnxFormat(buf, graphInitializer);\r\n        return;\r\n      } catch (e) {\r\n        if (isOrtFormat !== undefined) {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.loadFromOrtFormat(buf, graphInitializer);\r\n  }\r\n\r\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets =\r\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\r\n    const fb = new flatbuffers.ByteBuffer(buf);\r\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\r\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n    this._opsets = [];\r\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\r\n      const opsetId = ortModel.opsetImport(i)!;\r\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\r\n    }\r\n\r\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): readonly OpSet[] {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from './attribute';\r\nimport {InferenceHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\nexport interface Operator {\r\n  initialize(attributes: Attribute, node: Graph.Node, graph: Graph): void;\r\n  checkInputs(inputs: Tensor[]): boolean;\r\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n}\r\n\r\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\n// currently this operator supports ONLY 'test' mode\r\n// inputs/outputs and parameters will reflect that\r\n// the operator implementation only supports test mode\r\nexport abstract class BatchNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n    this.momentum = attributes.getFloat('momentum', 0.9);\r\n    this.spatial = attributes.getInt('spatial', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 5) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n    const mean = inputs[3];\r\n    const var_ = inputs[4];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n        var_.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n        var_.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n  protected momentum: number;\r\n  protected spatial: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class BinaryOp implements Operator {\r\n  constructor(\r\n      protected typeConstraint: readonly Tensor.DataType[], protected opType?: string,\r\n      protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Clip implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\r\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected min: number;\r\n  protected max: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Concat implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const inputType = inputs[0].type;\r\n    const inputDimensionality = inputs[0].dims.length;\r\n\r\n    // TODO: Support string concat\r\n    if (inputType === 'string') {\r\n      return false;\r\n    }\r\n\r\n    for (const input of inputs) {\r\n      // make sure types of all inputs match\r\n      if (input.type !== inputType) {\r\n        return false;\r\n      }\r\n\r\n      // make sure the dimensionality of all inputs are the same\r\n      if (input.dims.length !== inputDimensionality) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Conv implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.dilations = attributes.getInts('dilations', [1, 1]);\r\n    this.group = attributes.getInt('group', 1);\r\n    this.kernelShape = attributes.getInts('kernel_shape', []);\r\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n    this.strides = attributes.getInts('strides', [1, 1]);\r\n    this.activation = attributes.getString('__internal_activation', '');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    // Refer to the below link for all input checks\r\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n      return false;\r\n    }\r\n\r\n    // TODO : Need to add support for multi-dimensional conv\r\n    // currently only support 2-dimensional conv\r\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n    const dataChannel = inputs[0].dims[1];\r\n    const filterInChannel = inputs[1].dims[1] * this.group;\r\n    if (dataChannel !== filterInChannel) {\r\n      return false;\r\n    }\r\n\r\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n      return false;\r\n    }\r\n\r\n    const spatialRank = inputs[0].dims.length - 2;\r\n    // wrong dilations dimension\r\n    if (this.dilations.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong strides dimension\r\n    if (this.strides.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong pads dimension\r\n    if (this.pads.length !== spatialRank * 2) {\r\n      return false;\r\n    }\r\n\r\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n    // (the first 2 dims are batch_size and channels)\r\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO : Need to add support for float64\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected dilations: number[];\r\n  protected group: number;\r\n  protected kernelShape: number[];\r\n  protected pads: number[];\r\n  protected strides: number[];\r\n  protected activation: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class DepthToSpace implements Operator {\r\n  constructor() {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    // processing node attributes\r\n    this.blocksize = attributes.getInt('blocksize');\r\n    if (this.blocksize < 1) {\r\n      throw new Error(`blocksize must be >= 1, but got : ${this.blocksize} for DepthToSpace`);\r\n    }\r\n    this.blocksizeSqr = this.blocksize * this.blocksize;\r\n    this.mode = attributes.getString('mode', 'DCR');\r\n    if (DepthToSpace.supportedModes.indexOf(this.mode) < 0) {\r\n      throw new Error(`unrecognized mode: ${this.mode} for DepthToSpace`);\r\n    }\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const inputType = inputs[0].type;\r\n    const inputDimensionality = inputs[0].dims.length;\r\n\r\n    // Input has to be a 4-D tensor\r\n    // TODO: Support string depth-to-space.\r\n    if (inputType === 'string' || inputDimensionality !== 4) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n  protected blocksize: number;\r\n  protected blocksizeSqr: number;\r\n\r\n  private static readonly supportedModes = ['DCR', 'CRD'];\r\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Dropout implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.ratio = attributes.getFloat('ratio', 0.5);\r\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected ratio: number;\r\n  protected testMode: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Elu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 1.0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Flatten implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    const r = inputs[0].dims.length;\r\n    if (r === 0) {\r\n      return false;  // scalar tensor is not supported\r\n    }\r\n\r\n    if (this.axis < -r || this.axis > r) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gather implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    const tensorRank = inputs[0].dims.length;\r\n    if (tensorRank < 1) {\r\n      return false;\r\n    }\r\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gemm implements Operator {\r\n  constructor(isOptionalC: boolean) {\r\n    this.isOptionalC = isOptionalC;\r\n  }\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.transA = attributes.getInt('transA', 0) !== 0;\r\n    this.transB = attributes.getInt('transB', 0) !== 0;\r\n    this.alpha = attributes.getFloat('alpha', 1);\r\n    this.beta = attributes.getFloat('beta', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs) {\r\n      return false;\r\n    }\r\n    if (this.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\r\n      return false;\r\n    }\r\n    if (!this.isOptionalC && inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    // 'C' can be of dimensionality 1 or 2 only\r\n    if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n        (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n      return false;\r\n    }\r\n\r\n    if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected transA: boolean;\r\n  protected transB: boolean;\r\n  protected alpha: number;\r\n  protected beta: number;\r\n\r\n  protected isOptionalC: boolean;  // in opset 11, C becomes optional\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ImageScaler implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.scale = attributes.getFloat('scale');\r\n    this.bias = attributes.getFloats('bias');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected scale: number;\r\n  protected bias: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class InstanceNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class LeakyRelu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 0.01);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class MatMul implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.activation = attributes.getString('__internal_activation', '');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  protected activation: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Pad implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.mode = attributes.getString('mode', 'constant');\r\n    this.value = attributes.getFloat('value', 0.0);\r\n    this.pads = attributes.getInts('pads');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n  protected pads: number[];\r\n  protected value: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nclass PoolBase {\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected ceilMode: number;\r\n  protected countIncludePad: boolean;\r\n  protected kernelShape: number[];\r\n  protected strides: number[];\r\n  protected pads: number[];\r\n}\r\n\r\nexport abstract class AveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode'\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\r\n    }\r\n  }\r\n}\r\n\r\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n  }\r\n}\r\n\r\nexport abstract class MaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n    this.storageOrder = attributes.getInt('storage_order', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n    if (this.storageOrder !== 0) {\r\n      throw new Error('column major storage order is not yet supported for MaxPool');\r\n    }\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\r\n    }\r\n  }\r\n\r\n  protected storageOrder: number;\r\n}\r\n\r\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ReduceBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes', []);\r\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected keepDims: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Reshape implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'int32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Slice implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.starts = attributes.getInts('starts');\r\n    this.ends = attributes.getInts('ends');\r\n    this.axes = attributes.getInts('axes', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected ends: number[];\r\n  protected starts: number[];\r\n}\r\n\r\nexport abstract class SliceV10 implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Softmax implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Split implements Operator {\r\n  constructor(protected numOutputs?: number) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n    this.split = attributes.getInts('split', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected split: number[];\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Squeeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Sum implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    const length = inputs[0].dims.length;\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (length !== inputs[i].dims.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let j = 0; j < length; j++) {\r\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (inputs[0].type !== inputs[i].type) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Tile implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Transpose implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.perm = attributes.getInts('perm', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected perm: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class UnaryOp implements Operator {\r\n  constructor(protected typeConstraint: readonly Tensor.DataType[], protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(_attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Unsqueeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Graph} from '../graph';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Upsample implements Operator {\r\n  constructor(protected opset: number) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute, _node: Graph.Node, _graph: Graph): void {\r\n    this.isResize = (this.opset >= 10);\r\n\r\n    // processing node attributes\r\n    this.mode = attributes.getString('mode', 'nearest');\r\n    if (this.mode !== 'nearest' && this.mode !== 'linear' && (this.opset < 11 || this.mode !== 'cubic')) {\r\n      throw new Error(`unrecognized mode: ${this.mode}`);\r\n    }\r\n\r\n    if (this.opset < 9) {\r\n      this.scales = attributes.getFloats('scales');\r\n      scalesValidataion(this.scales, this.mode, this.isResize);\r\n    }\r\n\r\n    this.extrapolationValue = attributes.getFloat('extrapolation_value', 0.0);\r\n\r\n    this.coordinateTransformMode =\r\n        this.opset > 10 ? attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\r\n    if ([\r\n          'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize',\r\n          'half_pixel'\r\n        ].indexOf(this.coordinateTransformMode) === -1) {\r\n      throw new Error(`coordinate_transform_mode '${this.coordinateTransformMode}' is not supported`);\r\n    }\r\n    this.useExtrapolation = this.needRoiInput = (this.coordinateTransformMode === 'tf_crop_and_resize');\r\n\r\n    this.nearestMode =\r\n        (this.mode === 'nearest' && this.opset >= 11) ? attributes.getString('nearest_mode', 'round_prefer_floor') : '';\r\n    if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(this.nearestMode) === -1) {\r\n      throw new Error(`nearest_mode '${this.nearestMode}' is not supported`);\r\n    }\r\n\r\n    this.cubicCoefficientA = attributes.getFloat('cubic_coeff_a', -0.75);\r\n    this.excludeOutside = attributes.getInt('exclude_outside', 0) !== 0;\r\n    if (this.excludeOutside && this.mode !== 'cubic') {\r\n      throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\r\n    }\r\n\r\n    this.useNearest2xOptimization = (this.opset < 11) ?\r\n        true :\r\n        (this.mode === 'nearest' && this.coordinateTransformMode === 'asymmetric' && this.nearestMode === 'floor');\r\n\r\n    if (this.opset > 10) {\r\n      this.roiInputIdx = 1;\r\n      this.scalesInputIdx = 2;\r\n      this.sizesInputIdx = 3;\r\n    } else if (this.opset === 9) {\r\n      this.scalesInputIdx = 1;\r\n    }\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || (this.opset < 9 && inputs.length !== 1) ||\r\n        (this.opset >= 9 && this.opset < 11 && inputs.length !== 2) ||\r\n        (this.opset >= 11 && inputs.length !== 3 && inputs.length !== 4)) {\r\n      return false;\r\n    }\r\n\r\n    if (this.scales && inputs[0].dims.length !== this.scales.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected prepareInputs(inputs: Tensor[]): [number[], number[], readonly number[]] {\r\n    const x = inputs[0];\r\n    const xDims = x.dims;\r\n\r\n    // get roi data\r\n    let roi = this.roi;\r\n    if (!roi) {\r\n      if (this.needRoiInput) {\r\n        if (this.roiInputIdx <= 0) {\r\n          throw new Error('Invalid roi input index.');\r\n        }\r\n        roi = parseRoiData(inputs[this.roiInputIdx]);\r\n      } else {\r\n        roi = new Array(xDims.length * 2).fill(0);\r\n      }\r\n    }\r\n\r\n    let scales = this.scales;\r\n    let outputSizes: number[]|undefined;\r\n    if (!scales) {\r\n      const scalesTensor = inputs[this.scalesInputIdx];\r\n      if (scalesTensor && scalesTensor.size !== 0) {\r\n        if (inputs[this.sizesInputIdx]) {\r\n          throw new Error('Only one of scales or sizes must be provided as input.');\r\n        }\r\n        scales = parseScalesData(scalesTensor, this.mode, this.isResize);\r\n      } else {\r\n        const sizesTensor = inputs[this.sizesInputIdx];\r\n        if (!sizesTensor || sizesTensor.size === 0) {\r\n          throw new Error('Either scales or sizes MUST be provided as input.');\r\n        }\r\n\r\n        outputSizes = Array.from(sizesTensor.integerData);\r\n        scales = parseScalesDataFromOutputSize(outputSizes, xDims, this.mode, this.isResize);\r\n      }\r\n    } else {\r\n      if (inputs[this.sizesInputIdx]) {\r\n        throw new Error('Only one of scales or sizes must be provided as input.');\r\n      }\r\n    }\r\n\r\n    const yDims = outputSizes || computeOutputShape(scales, xDims);\r\n\r\n    return [roi, scales, yDims];\r\n  }\r\n\r\n  protected isResize: boolean;\r\n  protected mode: string;\r\n  protected scales: number[];\r\n  protected extrapolationValue: number;\r\n  protected coordinateTransformMode: string;\r\n  protected useExtrapolation: boolean;\r\n  protected needRoiInput: boolean;\r\n  protected nearestMode: string;\r\n  protected cubicCoefficientA: number;\r\n  protected excludeOutside: boolean;\r\n  protected useNearest2xOptimization: boolean;\r\n  protected roiInputIdx: number;\r\n  protected scalesInputIdx: number;\r\n  protected sizesInputIdx: number;\r\n  protected roi: number[];\r\n}\r\n\r\nfunction scalesValidataion(scales: number[], mode: string, isResize: boolean) {\r\n  if (!isResize) {\r\n    for (const scale of scales) {\r\n      if (scale < 1) {\r\n        throw new Error('Scale value should be greater than or equal to 1.');\r\n      }\r\n    }\r\n  } else {\r\n    for (const scale of scales) {\r\n      if (scale <= 0) {\r\n        throw new Error('Scale value should be greater than 0.');\r\n      }\r\n    }\r\n  }\r\n  if (mode === 'linear' || mode === 'cubic') {\r\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\r\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') or 4-D inputs\\\r\nwith the corresponding outermost 2 scale values being 1 in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseRoiData(roi: Tensor): number[] {\r\n  return roi.size > 0 ? Array.from(roi.floatData) : [];\r\n}\r\n\r\nexport function parseScalesData(scale: Tensor, mode: string, isResize: boolean): number[] {\r\n  const scales = Array.from(scale.floatData);\r\n  scalesValidataion(scales, mode, isResize);\r\n  return scales;\r\n}\r\n\r\nexport function parseScalesDataFromOutputSize(\r\n    yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] {\r\n  const length = xDims.length;\r\n  const scales = new Array<number>(length);\r\n\r\n  for (let i = 0, end = length; i < end; i++) {\r\n    if (xDims[i] === 0) {\r\n      if (yDims[i] !== 0) {\r\n        throw new Error('Input dim is zero but required output dim is non-zero.');\r\n      }\r\n      scales[i] = 1;\r\n    } else {\r\n      scales[i] = yDims[i] / xDims[i];\r\n    }\r\n  }\r\n  scalesValidataion(scales, mode, isResize);\r\n  return scales;\r\n}\r\n\r\nexport function computeOutputShape(scales: readonly number[], inputDims: readonly number[]): number[] {\r\n  return inputDims.map((dim, i) => Math.floor(dim * scales[i]));\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\n\r\nexport declare namespace OpSet {\r\n  interface OperatorConstructor {\r\n    (node: Graph.Node): Operator;\r\n  }\r\n\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml';\r\n\r\n  /**\r\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\r\n   */\r\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\r\n}\r\n\r\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opConstructor = rule[3];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return opConstructor(node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","// automatically generated by the FlatBuffers compiler, do not modify\r\n/* eslint-disable */\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum AttributeType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    INT = 2,\r\n    STRING = 3,\r\n    TENSOR = 4,\r\n    GRAPH = 5,\r\n    FLOATS = 6,\r\n    INTS = 7,\r\n    STRINGS = 8,\r\n    TENSORS = 9,\r\n    GRAPHS = 10,\r\n    SPARSE_TENSOR = 11,\r\n    SPARSE_TENSORS = 12\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TensorDataType {\r\n    UNDEFINED = 0,\r\n    FLOAT = 1,\r\n    UINT8 = 2,\r\n    INT8 = 3,\r\n    UINT16 = 4,\r\n    INT16 = 5,\r\n    INT32 = 6,\r\n    INT64 = 7,\r\n    STRING = 8,\r\n    BOOL = 9,\r\n    FLOAT16 = 10,\r\n    DOUBLE = 11,\r\n    UINT32 = 12,\r\n    UINT64 = 13,\r\n    COMPLEX64 = 14,\r\n    COMPLEX128 = 15,\r\n    BFLOAT16 = 16\r\n  }\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum NodeType {Primitive = 0, Fused = 1}\r\n}\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\r\n}\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Shape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Shape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Shape= obj\r\n     * @returns Shape\r\n     */\r\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Dimension= obj\r\n     * @returns onnxruntime.experimental.fbs.Dimension\r\n     */\r\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimOffset\r\n     */\r\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, dimOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Shape.startShape(builder);\r\n      Shape.addDim(builder, dimOffset);\r\n      return Shape.endShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Dimension {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Dimension\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Dimension= obj\r\n     * @returns Dimension\r\n     */\r\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\r\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\r\n     */\r\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimension(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimension(\r\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\r\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Dimension.startDimension(builder);\r\n      Dimension.addValue(builder, valueOffset);\r\n      Dimension.addDenotation(builder, denotationOffset);\r\n      return Dimension.endDimension(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class DimensionValue {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns DimensionValue\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param DimensionValue= obj\r\n     * @returns DimensionValue\r\n     */\r\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\r\n     */\r\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dimValue(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    dimParam(): string|null;\r\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startDimensionValue(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\r\n     */\r\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\r\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long dimValue\r\n     */\r\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimParamOffset\r\n     */\r\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimParamOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createDimensionValue(\r\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\r\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      DimensionValue.startDimensionValue(builder);\r\n      DimensionValue.addDimType(builder, dimType);\r\n      DimensionValue.addDimValue(builder, dimValue);\r\n      DimensionValue.addDimParam(builder, dimParamOffset);\r\n      return DimensionValue.endDimensionValue(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TensorTypeAndShape {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TensorTypeAndShape= obj\r\n     * @returns TensorTypeAndShape\r\n     */\r\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\r\n        TensorTypeAndShape {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Shape= obj\r\n     * @returns onnxruntime.experimental.fbs.Shape|null\r\n     */\r\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset shapeOffset\r\n     */\r\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, shapeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensorTypeAndShape(\r\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\r\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\r\n      TensorTypeAndShape.addElemType(builder, elemType);\r\n      TensorTypeAndShape.addShape(builder, shapeOffset);\r\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class MapType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns MapType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param MapType= obj\r\n     * @returns MapType\r\n     */\r\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startMapType(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\r\n     */\r\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueTypeOffset\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, valueTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createMapType(\r\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\r\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      MapType.startMapType(builder);\r\n      MapType.addKeyType(builder, keyType);\r\n      MapType.addValueType(builder, valueTypeOffset);\r\n      return MapType.endMapType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SequenceType {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SequenceType\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SequenceType= obj\r\n     * @returns SequenceType\r\n     */\r\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSequenceType(builder: flatbuffers.Builder) {\r\n      builder.startObject(1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset elemTypeOffset\r\n     */\r\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, elemTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SequenceType.startSequenceType(builder);\r\n      SequenceType.addElemType(builder, elemTypeOffset);\r\n      return SequenceType.endSequenceType(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class EdgeEnd {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns EdgeEnd\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      return this.bb!.readUint32(this.bb_pos);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    srcArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 4);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dstArgIndex(): number {\r\n      return this.bb!.readInt32(this.bb_pos + 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number node_index\r\n     * @param number src_arg_index\r\n     * @param number dst_arg_index\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createEdgeEnd(\r\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\r\n        dst_arg_index: number): flatbuffers.Offset {\r\n      builder.prep(4, 12);\r\n      builder.writeInt32(dst_arg_index);\r\n      builder.writeInt32(src_arg_index);\r\n      builder.writeInt32(node_index);\r\n      return builder.offset();\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class NodeEdge {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns NodeEdge\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param NodeEdge= obj\r\n     * @returns NodeEdge\r\n     */\r\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\r\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\r\n     */\r\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\r\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNodeEdge(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number nodeIndex\r\n     */\r\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\r\n      builder.addFieldInt32(0, nodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputEdgesOffset\r\n     */\r\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputEdgesOffset\r\n     */\r\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(12, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNodeEdge(\r\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\r\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      NodeEdge.startNodeEdge(builder);\r\n      NodeEdge.addNodeIndex(builder, nodeIndex);\r\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\r\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\r\n      return NodeEdge.endNodeEdge(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Node {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Node\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Node= obj\r\n     * @returns Node\r\n     */\r\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sinceVersion(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    index(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    opType(): string|null;\r\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    opType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.NodeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.NodeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    executionProviderType(): string|null;\r\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Attribute= obj\r\n     * @returns onnxruntime.experimental.fbs.Attribute\r\n     */\r\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\r\n        |null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    attributesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    inputArgCounts(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputArgCountsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Int32Array\r\n     */\r\n    inputArgCountsArray(): Int32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ?\r\n          new Int32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    implicitInputs(index: number): string;\r\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    implicitInputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startNode(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number sinceVersion\r\n     */\r\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\r\n      builder.addFieldInt32(3, sinceVersion, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number index\r\n     */\r\n    static addIndex(builder: flatbuffers.Builder, index: number) {\r\n      builder.addFieldInt32(4, index, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opTypeOffset\r\n     */\r\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, opTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.NodeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\r\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset executionProviderTypeOffset\r\n     */\r\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset attributesOffset\r\n     */\r\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, attributesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputArgCountsOffset\r\n     */\r\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset implicitInputsOffset\r\n     */\r\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createNode(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\r\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Node.startNode(builder);\r\n      Node.addName(builder, nameOffset);\r\n      Node.addDocString(builder, docStringOffset);\r\n      Node.addDomain(builder, domainOffset);\r\n      Node.addSinceVersion(builder, sinceVersion);\r\n      Node.addIndex(builder, index);\r\n      Node.addOpType(builder, opTypeOffset);\r\n      Node.addType(builder, type);\r\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\r\n      Node.addInputs(builder, inputsOffset);\r\n      Node.addOutputs(builder, outputsOffset);\r\n      Node.addAttributes(builder, attributesOffset);\r\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\r\n      Node.addImplicitInputs(builder, implicitInputsOffset);\r\n      return Node.endNode(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class ValueInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns ValueInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param ValueInfo= obj\r\n     * @returns ValueInfo\r\n     */\r\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\r\n     */\r\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startValueInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset typeOffset\r\n     */\r\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, typeOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createValueInfo(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      ValueInfo.startValueInfo(builder);\r\n      ValueInfo.addName(builder, nameOffset);\r\n      ValueInfo.addDocString(builder, docStringOffset);\r\n      ValueInfo.addType(builder, typeOffset);\r\n      return ValueInfo.endValueInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class TypeInfo {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns TypeInfo\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param TypeInfo= obj\r\n     * @returns TypeInfo\r\n     */\r\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    denotation(): string|null;\r\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\r\n     */\r\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Table obj\r\n     * @returns ?flatbuffers.Table\r\n     */\r\n    value<T extends flatbuffers.Table>(obj: T): T|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTypeInfo(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset denotationOffset\r\n     */\r\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, denotationOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\r\n     */\r\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\r\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valueOffset\r\n     */\r\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, valueOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTypeInfo(\r\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\r\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      TypeInfo.startTypeInfo(builder);\r\n      TypeInfo.addDenotation(builder, denotationOffset);\r\n      TypeInfo.addValueType(builder, valueType);\r\n      TypeInfo.addValue(builder, valueOffset);\r\n      return TypeInfo.endTypeInfo(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class OperatorSetId {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns OperatorSetId\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param OperatorSetId= obj\r\n     * @returns OperatorSetId\r\n     */\r\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    version(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startOperatorSetId(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long version\r\n     */\r\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\r\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createOperatorSetId(\r\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\r\n      OperatorSetId.startOperatorSetId(builder);\r\n      OperatorSetId.addDomain(builder, domainOffset);\r\n      OperatorSetId.addVersion(builder, version);\r\n      return OperatorSetId.endOperatorSetId(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Tensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Tensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Tensor= obj\r\n     * @returns Tensor\r\n     */\r\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.TensorDataType\r\n     */\r\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    rawData(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    rawDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint8Array\r\n     */\r\n    rawDataArray(): Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ?\r\n          new Uint8Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    stringData(index: number): string;\r\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringDataLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(6);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\r\n     */\r\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\r\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset rawDataOffset\r\n     */\r\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, rawDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(1, data.length, 1);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt8(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(1, numElems, 1);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringDataOffset\r\n     */\r\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, stringDataOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createTensor(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\r\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Tensor.startTensor(builder);\r\n      Tensor.addName(builder, nameOffset);\r\n      Tensor.addDocString(builder, docStringOffset);\r\n      Tensor.addDims(builder, dimsOffset);\r\n      Tensor.addDataType(builder, dataType);\r\n      Tensor.addRawData(builder, rawDataOffset);\r\n      Tensor.addStringData(builder, stringDataOffset);\r\n      return Tensor.endTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SparseTensor {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SparseTensor\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SparseTensor= obj\r\n     * @returns SparseTensor\r\n     */\r\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    dims(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    dimsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSparseTensor(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset valuesOffset\r\n     */\r\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, valuesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset indicesOffset\r\n     */\r\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, indicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset dimsOffset\r\n     */\r\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, dimsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSparseTensor(\r\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\r\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SparseTensor.startSparseTensor(builder);\r\n      SparseTensor.addValues(builder, valuesOffset);\r\n      SparseTensor.addIndices(builder, indicesOffset);\r\n      SparseTensor.addDims(builder, dimsOffset);\r\n      return SparseTensor.endSparseTensor(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Attribute {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Attribute\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Attribute= obj\r\n     * @returns Attribute\r\n     */\r\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    name(): string|null;\r\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    name(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns onnxruntime.experimental.fbs.AttributeType\r\n     */\r\n    type(): onnxruntime.experimental.fbs.AttributeType {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\r\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    f(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    i(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    s(): string|null;\r\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    s(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor|null\r\n     */\r\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    floats(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    floatsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Float32Array\r\n     */\r\n    floatsArray(): Float32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ?\r\n          new Float32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    ints(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    intsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 22);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    strings(index: number): string;\r\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    stringsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 24);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    tensorsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 26);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph\r\n     */\r\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    graphsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 28);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startAttribute(builder: flatbuffers.Builder) {\r\n      builder.startObject(13);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nameOffset\r\n     */\r\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param onnxruntime.experimental.fbs.AttributeType type\r\n     */\r\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\r\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number f\r\n     */\r\n    static addF(builder: flatbuffers.Builder, f: number) {\r\n      builder.addFieldFloat32(3, f, 0.0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long i\r\n     */\r\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\r\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sOffset\r\n     */\r\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, sOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tOffset\r\n     */\r\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, tOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset gOffset\r\n     */\r\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, gOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset floatsOffset\r\n     */\r\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, floatsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addFloat32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset intsOffset\r\n     */\r\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(9, intsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset stringsOffset\r\n     */\r\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(10, stringsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset tensorsOffset\r\n     */\r\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(11, tensorsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphsOffset\r\n     */\r\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(12, graphsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createAttribute(\r\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\r\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\r\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\r\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\r\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Attribute.startAttribute(builder);\r\n      Attribute.addName(builder, nameOffset);\r\n      Attribute.addDocString(builder, docStringOffset);\r\n      Attribute.addType(builder, type);\r\n      Attribute.addF(builder, f);\r\n      Attribute.addI(builder, i);\r\n      Attribute.addS(builder, sOffset);\r\n      Attribute.addT(builder, tOffset);\r\n      Attribute.addG(builder, gOffset);\r\n      Attribute.addFloats(builder, floatsOffset);\r\n      Attribute.addInts(builder, intsOffset);\r\n      Attribute.addStrings(builder, stringsOffset);\r\n      Attribute.addTensors(builder, tensorsOffset);\r\n      Attribute.addGraphs(builder, graphsOffset);\r\n      return Attribute.endAttribute(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Graph {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Graph\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Graph= obj\r\n     * @returns Graph\r\n     */\r\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Tensor= obj\r\n     * @returns onnxruntime.experimental.fbs.Tensor\r\n     */\r\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    initializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\r\n     * @returns onnxruntime.experimental.fbs.ValueInfo\r\n     */\r\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeArgsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.Node= obj\r\n     * @returns onnxruntime.experimental.fbs.Node\r\n     */\r\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    maxNodeIndex(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\r\n     * @returns onnxruntime.experimental.fbs.NodeEdge\r\n     */\r\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeEdgesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    inputs(index: number): string;\r\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    inputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array\r\n     */\r\n    outputs(index: number): string;\r\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\r\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    outputsLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\r\n     * @returns onnxruntime.experimental.fbs.SparseTensor\r\n     */\r\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\r\n        onnxruntime.experimental.fbs.SparseTensor|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    sparseInitializersLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startGraph(builder: flatbuffers.Builder) {\r\n      builder.startObject(8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset initializersOffset\r\n     */\r\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, initializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeArgsOffset\r\n     */\r\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodesOffset\r\n     */\r\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, nodesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number maxNodeIndex\r\n     */\r\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\r\n      builder.addFieldInt32(3, maxNodeIndex, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeEdgesOffset\r\n     */\r\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset inputsOffset\r\n     */\r\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(5, inputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset outputsOffset\r\n     */\r\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, outputsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sparseInitializersOffset\r\n     */\r\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createGraph(\r\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\r\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\r\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\r\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Graph.startGraph(builder);\r\n      Graph.addInitializers(builder, initializersOffset);\r\n      Graph.addNodeArgs(builder, nodeArgsOffset);\r\n      Graph.addNodes(builder, nodesOffset);\r\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\r\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\r\n      Graph.addInputs(builder, inputsOffset);\r\n      Graph.addOutputs(builder, outputsOffset);\r\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\r\n      return Graph.endGraph(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class Model {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns Model\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param Model= obj\r\n     * @returns Model\r\n     */\r\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    irVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\r\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\r\n     */\r\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\r\n        onnxruntime.experimental.fbs.OperatorSetId|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    opsetImportLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerName(): string|null;\r\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    producerVersion(): string|null;\r\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 10);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    domain(): string|null;\r\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    domain(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 12);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @returns flatbuffers.Long\r\n     */\r\n    modelVersion(): flatbuffers.Long {\r\n      let offset = this.bb!.__offset(this.bb_pos, 14);\r\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    docString(): string|null;\r\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    docString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 16);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Graph= obj\r\n     * @returns onnxruntime.experimental.fbs.Graph|null\r\n     */\r\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 18);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphDocString(): string|null;\r\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 20);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startModel(builder: flatbuffers.Builder) {\r\n      builder.startObject(9);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long irVersion\r\n     */\r\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset opsetImportOffset\r\n     */\r\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, opsetImportOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerNameOffset\r\n     */\r\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, producerNameOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset producerVersionOffset\r\n     */\r\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(3, producerVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset domainOffset\r\n     */\r\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(4, domainOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Long modelVersion\r\n     */\r\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\r\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset docStringOffset\r\n     */\r\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(6, docStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphOffset\r\n     */\r\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(7, graphOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphDocStringOffset\r\n     */\r\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createModel(\r\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\r\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\r\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\r\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      Model.startModel(builder);\r\n      Model.addIrVersion(builder, irVersion);\r\n      Model.addOpsetImport(builder, opsetImportOffset);\r\n      Model.addProducerName(builder, producerNameOffset);\r\n      Model.addProducerVersion(builder, producerVersionOffset);\r\n      Model.addDomain(builder, domainOffset);\r\n      Model.addModelVersion(builder, modelVersion);\r\n      Model.addDocString(builder, docStringOffset);\r\n      Model.addGraph(builder, graphOffset);\r\n      Model.addGraphDocString(builder, graphDocStringOffset);\r\n      return Model.endModel(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class KernelCreateInfos {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns KernelCreateInfos\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param KernelCreateInfos= obj\r\n     * @returns KernelCreateInfos\r\n     */\r\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\r\n        KernelCreateInfos {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns number\r\n     */\r\n    nodeIndices(index: number): number|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    nodeIndicesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @returns Uint32Array\r\n     */\r\n    nodeIndicesArray(): Uint32Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ?\r\n          new Uint32Array(\r\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\r\n              this.bb!.__vector_len(this.bb_pos + offset)) :\r\n          null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @returns flatbuffers.Long\r\n     */\r\n    kernelDefHashes(index: number): flatbuffers.Long|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\r\n                      this.bb!.createLong(0, 0);\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    kernelDefHashesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset nodeIndicesOffset\r\n     */\r\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<number> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt32(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelDefHashesOffset\r\n     */\r\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Long> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\r\n      builder.startVector(8, data.length, 8);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addInt64(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(8, numElems, 8);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createKernelCreateInfos(\r\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\r\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      KernelCreateInfos.startKernelCreateInfos(builder);\r\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\r\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\r\n      return KernelCreateInfos.endKernelCreateInfos(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SubGraphSessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SubGraphSessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SubGraphSessionState= obj\r\n     * @returns SubGraphSessionState\r\n     */\r\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\r\n        SubGraphSessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    graphId(): string|null;\r\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset graphIdOffset\r\n     */\r\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, graphIdOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      builder.requiredField(offset, 4);  // graph_id\r\n      return offset;\r\n    }\r\n\r\n    static createSubGraphSessionState(\r\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SubGraphSessionState.startSubGraphSessionState(builder);\r\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\r\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\r\n      return SubGraphSessionState.endSubGraphSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class SessionState {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns SessionState\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param SessionState= obj\r\n     * @returns SessionState\r\n     */\r\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\r\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\r\n     */\r\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param number index\r\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\r\n     */\r\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\r\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\r\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @returns number\r\n     */\r\n    subGraphSessionStatesLength(): number {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startSessionState(builder: flatbuffers.Builder) {\r\n      builder.startObject(2);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset kernelsOffset\r\n     */\r\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, kernelsOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\r\n     */\r\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param Array.<flatbuffers.Offset> data\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\r\n        flatbuffers.Offset {\r\n      builder.startVector(4, data.length, 4);\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        builder.addOffset(data[i]);\r\n      }\r\n      return builder.endVector();\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param number numElems\r\n     */\r\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\r\n      builder.startVector(4, numElems, 4);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    static createSessionState(\r\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\r\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      SessionState.startSessionState(builder);\r\n      SessionState.addKernels(builder, kernelsOffset);\r\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\r\n      return SessionState.endSessionState(builder);\r\n    }\r\n  }\r\n}\r\n/**\r\n * @constructor\r\n */\r\nexport namespace onnxruntime.experimental.fbs {\r\n  export class InferenceSession {\r\n    bb: flatbuffers.ByteBuffer|null = null;\r\n\r\n    bb_pos = 0;\r\n    /**\r\n     * @param number i\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns InferenceSession\r\n     */\r\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\r\n      this.bb_pos = i;\r\n      this.bb = bb;\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @param InferenceSession= obj\r\n     * @returns InferenceSession\r\n     */\r\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\r\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\r\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.ByteBuffer bb\r\n     * @returns boolean\r\n     */\r\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\r\n      return bb.__has_identifier('ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Encoding= optionalEncoding\r\n     * @returns string|Uint8Array|null\r\n     */\r\n    ortVersion(): string|null;\r\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\r\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 4);\r\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.Model= obj\r\n     * @returns onnxruntime.experimental.fbs.Model|null\r\n     */\r\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 6);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param onnxruntime.experimental.fbs.SessionState= obj\r\n     * @returns onnxruntime.experimental.fbs.SessionState|null\r\n     */\r\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\r\n      let offset = this.bb!.__offset(this.bb_pos, 8);\r\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\r\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\r\n                      null;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     */\r\n    static startInferenceSession(builder: flatbuffers.Builder) {\r\n      builder.startObject(3);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset ortVersionOffset\r\n     */\r\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(0, ortVersionOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset modelOffset\r\n     */\r\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(1, modelOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset sessionStateOffset\r\n     */\r\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\r\n      builder.addFieldOffset(2, sessionStateOffset, 0);\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @returns flatbuffers.Offset\r\n     */\r\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\r\n      let offset = builder.endObject();\r\n      return offset;\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM');\r\n    }\r\n\r\n    /**\r\n     * @param flatbuffers.Builder builder\r\n     * @param flatbuffers.Offset offset\r\n     */\r\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\r\n      builder.finish(offset, 'ORTM', true);\r\n    }\r\n\r\n    static createInferenceSession(\r\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\r\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\r\n      InferenceSession.startInferenceSession(builder);\r\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\r\n      InferenceSession.addModel(builder, modelOffset);\r\n      InferenceSession.addSessionState(builder, sessionStateOffset);\r\n      return InferenceSession.endInferenceSession(builder);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\r\nimport {Session} from './session';\r\nimport {Tensor as OnnxjsTensor} from './tensor';\r\n\r\nexport class OnnxjsSessionHandler implements SessionHandler {\r\n  constructor(private session: Session) {\r\n    this.inputNames = this.session.inputNames;\r\n    this.outputNames = this.session.outputNames;\r\n  }\r\n\r\n  async dispose(): Promise<void> {}\r\n  inputNames: readonly string[];\r\n  outputNames: readonly string[];\r\n  async run(\r\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\r\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\r\n    const inputMap = new Map<string, OnnxjsTensor>();\r\n    for (const name in feeds) {\r\n      if (Object.hasOwnProperty.call(feeds, name)) {\r\n        const feed = feeds[name];\r\n        inputMap.set(\r\n            name,\r\n            new OnnxjsTensor(\r\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\r\n                feed.data as OnnxjsTensor.NumberType));\r\n      }\r\n    }\r\n    const outputMap = await this.session.run(inputMap);\r\n    const output: SessionHandler.ReturnType = {};\r\n    outputMap.forEach((tensor, name) => {\r\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\r\n    });\r\n    return output;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {resolveBackend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<readonly number[]>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  get inputNames(): readonly string[] {\r\n    return this._model.graph.getInputNames();\r\n  }\r\n  get outputNames(): readonly string[] {\r\n    return this._model.graph.getOutputNames();\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await resolveBackend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        const isOrtFormat = arg.endsWith('.ort');\r\n        if (typeof fetch === 'undefined') {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(Buffer.from(buf), isOrtFormat);\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(new Uint8Array(buf), isOrtFormat);\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(arr);\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\r\n      boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error('expected number of outputs do not match number of generated outputs');\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {Guid} from 'guid-typescript';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\n\r\nimport ortFbs = onnxruntime.experimental.fbs;\r\n\r\nimport {ProtoUtil, ShapeUtil} from './util';\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export type Id = Guid;\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError('data type is not string');\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError('data type is not float (float32, float64)');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError('type cannot be non-number (string)');\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\r\n    //      asynchronous way. should implement this function when enabling webgl async read data.\r\n\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: readonly number[];\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): readonly number[] {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: readonly number[],\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Guid = Guid.create()) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError('Input dims doesn\\'t match data length.');\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError('cache should be a string array');\r\n      }\r\n\r\n      if (empty) {\r\n        cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\r\n        value.data[i] = buf.toString();\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error('array length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n\r\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\r\n    if (!ortTensor) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\r\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\r\n        value.data[i] = ortTensor.stringData(i);\r\n      }\r\n\r\n    } else if (\r\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource = new DataView(\r\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\r\n      const elementSize = sizeofProto(ortTensor.dataType());\r\n      const length = ortTensor.rawDataLength() / elementSize;\r\n\r\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\r\n        throw new Error('invalid buffer length');\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error('buffer length mismatch');\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (\r\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\r\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {flatbuffers} from 'flatbuffers';\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {onnxruntime} from './ort-schema/ort-generated';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Evaluates the given expression and asserts error message if condition is unmet.\r\nexport function assert(expr: boolean, msg: () => string) {\r\n  if (!expr) {\r\n    throw new Error(typeof msg === 'string' ? msg : msg());\r\n  }\r\n}\r\n\r\nexport class ArrayUtil {\r\n  /**\r\n   * Verifies if 2 input arrays contain the same elements.\r\n   * @param n1 Array 1\r\n   * @param n2 Array 2\r\n   * @returns Whether these 2 are equal\r\n   */\r\n  static arraysEqual(\r\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array,\r\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\r\n      Float32Array|Float64Array) {\r\n    if (n1.length !== n2.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < n1.length; i++) {\r\n      if (n1[i] !== n2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\r\n      [readonly number[], readonly number[]] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]), b.get([])));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]);\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]);\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA);\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB);\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Determine the broadcasted dims in input shape based on the given output shape.\r\n   * Note that this function only returns the broadcasted dims.\r\n   * @param inputShape The input shape\r\n   * @param outputShape The output shape\r\n   * @returns The broadcasted dims in input shape.\r\n   */\r\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\r\n    const inRank = inputShape.length;\r\n    const dims: number[] = [];\r\n    for (let i = 0; i < inRank; i++) {\r\n      const dim = inRank - 1 - i;\r\n      const a = inputShape[dim] || 1;\r\n      const b = outputShape[outputShape.length - 1 - i] || 1;\r\n      if (b > 1 && a === 1) {\r\n        dims.unshift(dim);\r\n      }\r\n    }\r\n    return dims;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error('sourceIndex out of bounds');\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error('targetIndex out of bounds');\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error('source indices to be copied are outside bounds');\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error('target array is too small to hold result');\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\r\n      biasShape?: readonly number[]): readonly number[] {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error('shape need to be of size 2');\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error('dimension mismatch');\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error('invalid shape specified');\r\n    }\r\n\r\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error('gemm: invalid bias shape for broadcast');\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\r\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\r\n    switch (type) {\r\n      case 'int8':\r\n        return onnx.TensorProto.DataType.INT8;\r\n      case 'uint8':\r\n        return onnx.TensorProto.DataType.UINT8;\r\n      case 'bool':\r\n        return onnx.TensorProto.DataType.BOOL;\r\n      case 'int16':\r\n        return onnx.TensorProto.DataType.INT16;\r\n      case 'uint16':\r\n        return onnx.TensorProto.DataType.UINT16;\r\n      case 'int32':\r\n        return onnx.TensorProto.DataType.INT32;\r\n      case 'uint32':\r\n        return onnx.TensorProto.DataType.UINT32;\r\n      case 'float32':\r\n        return onnx.TensorProto.DataType.FLOAT;\r\n      case 'float64':\r\n        return onnx.TensorProto.DataType.DOUBLE;\r\n      case 'string':\r\n        return onnx.TensorProto.DataType.STRING;\r\n      case 'int64':\r\n        return onnx.TensorProto.DataType.INT64;\r\n      case 'uint64':\r\n        return onnx.TensorProto.DataType.UINT64;\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${type}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n\r\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\r\n    const dims = [];\r\n    for (let i = 0; i < tensor.dimsLength(); i++) {\r\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\r\n    }\r\n    return dims;\r\n  }\r\n\r\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\r\n    const attributes = [];\r\n    for (let i = 0; i < node.attributesLength(); i++) {\r\n      attributes.push(node.attributes(i)!);\r\n    }\r\n    return attributes;\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  static longToNumber(n: Long|flatbuffers.Long|number) {\r\n    if (Long.isLong(n)) {\r\n      return n.toNumber();\r\n    } else if (n instanceof flatbuffers.Long) {\r\n      return Long.fromValue({low: n.low, high: n.high, unsigned: true}).toNumber();\r\n    }\r\n    return n;\r\n  }\r\n  static isLong(n: unknown) {\r\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: readonly number[]): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: readonly number[], axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // eslint-disable-next-line max-len\r\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: readonly number[]): readonly number[] {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * normailze axis of range [-r, r) into [0, r).\r\n   */\r\n  static normalizeAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\r\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error('Index incrementing unsupported for scalar Tensor');\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error('Incorrect axis to increment on');\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(\r\n      originalDims: readonly number[], shapeHints: number[]|readonly number[]|Tensor.IntegerType): readonly number[] {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error('cannot reshape to a scalar Tensor');\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n < 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis, in the range [-r, r]\r\n   */\r\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\r\n    if (axis < 0) {\r\n      axis += dims.length;\r\n    }\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error('squeeze an axis of size different than 1');\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = ShapeUtil.normalizeAxis(axes[i], dims.length);\r\n      if (axis >= outputDims.length) {\r\n        throw new Error('\\'axes\\' has an out of range axis');\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error('\\'axes\\' has a duplicate axis');\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error('sourceIndex out of bounds');\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error('targetIndex out of bounds');\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error('source indices to be copied are outside bounds');\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error('target array is too small to hold result');\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error('cannot split tensor to equal sized parts');\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\r\n      pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error('strides should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error('pad should be greater than or equal to 1');\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error('kernel shapes need to be greater than 0');\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error('pads should be smaller than kernel');\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: readonly number[], strides: number[], dilations: number[], kernelShape: number[], pads: number[],\r\n      autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], kernelShape: number[], pads: number[],\r\n      autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error('input shape must be of size greater than 0');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    // TODO: support dilations for pool operators\r\n    const dilations = new Array<number>(kernelShape.length).fill(1);\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\r\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\r\n          } else {\r\n            const legacyTargetSize = (inSize + stride - 1) / stride;\r\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n            pads[padHeadIndex] =\r\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n          }\r\n        default:\r\n          throw new Error('Unsupported AutoPad type');\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {getInstance} from './wasm-factory';\r\n\r\ninterface ExtraOptionsHandler {\r\n  (name: string, value: string): void;\r\n}\r\n\r\nexport const iterateExtraOptions =\r\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\r\n     handler: ExtraOptionsHandler): void => {\r\n      if (typeof options == 'object' && options !== null) {\r\n        if (seen.has(options)) {\r\n          throw new Error('Circular reference in options');\r\n        } else {\r\n          seen.add(options);\r\n        }\r\n      }\r\n\r\n      Object.entries(options).forEach(([key, value]) => {\r\n        const name = (prefix) ? prefix + key : key;\r\n        if (typeof value === 'object') {\r\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\r\n        } else if (typeof value === 'string' || typeof value === 'number') {\r\n          handler(name, value.toString());\r\n        } else if (typeof value === 'boolean') {\r\n          handler(name, (value) ? '1' : '0');\r\n        } else {\r\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\r\n        }\r\n      });\r\n    };\r\n\r\nexport const allocWasmString = (data: string, allocs: number[]): number => {\r\n  const wasm = getInstance();\r\n\r\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\r\n  const dataOffset = wasm._malloc(dataLength);\r\n  wasm.stringToUTF8(data, dataOffset, dataLength);\r\n  allocs.push(dataOffset);\r\n\r\n  return dataOffset;\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {allocWasmString, iterateExtraOptions} from './options-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let runOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const runOptions: InferenceSession.RunOptions = options || {};\r\n\r\n  try {\r\n    if (options?.logSeverityLevel === undefined) {\r\n      runOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      runOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    if (options?.terminate === undefined) {\r\n      runOptions.terminate = false;\r\n    }\r\n\r\n    let tagDataOffset = 0;\r\n    if (options?.tag !== undefined) {\r\n      tagDataOffset = allocWasmString(options.tag, allocs);\r\n    }\r\n\r\n    runOptionsHandle = wasm._OrtCreateRunOptions(\r\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\r\n    if (runOptionsHandle === 0) {\r\n      throw new Error('Can\\'t create run options');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [runOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (runOptionsHandle !== 0) {\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n    }\r\n    allocs.forEach(wasm._free);\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {onnx} from 'onnx-proto';\r\nimport {env, InferenceSession, SessionHandler, Tensor, TypedTensor} from 'onnxruntime-common';\r\n\r\nimport {setRunOptions} from './run-options';\r\nimport {setSessionOptions} from './session-options';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nlet ortInit: boolean;\r\n\r\nconst tensorDataTypeStringToEnum = (type: string): onnx.TensorProto.DataType => {\r\n  switch (type) {\r\n    case 'int8':\r\n      return onnx.TensorProto.DataType.INT8;\r\n    case 'uint8':\r\n      return onnx.TensorProto.DataType.UINT8;\r\n    case 'bool':\r\n      return onnx.TensorProto.DataType.BOOL;\r\n    case 'int16':\r\n      return onnx.TensorProto.DataType.INT16;\r\n    case 'uint16':\r\n      return onnx.TensorProto.DataType.UINT16;\r\n    case 'int32':\r\n      return onnx.TensorProto.DataType.INT32;\r\n    case 'uint32':\r\n      return onnx.TensorProto.DataType.UINT32;\r\n    case 'float32':\r\n      return onnx.TensorProto.DataType.FLOAT;\r\n    case 'float64':\r\n      return onnx.TensorProto.DataType.DOUBLE;\r\n    case 'string':\r\n      return onnx.TensorProto.DataType.STRING;\r\n    case 'int64':\r\n      return onnx.TensorProto.DataType.INT64;\r\n    case 'uint64':\r\n      return onnx.TensorProto.DataType.UINT64;\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${type}`);\r\n  }\r\n};\r\n\r\nconst tensorDataTypeEnumToString = (typeProto: onnx.TensorProto.DataType): Tensor.Type => {\r\n  switch (typeProto) {\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return 'int8';\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return 'uint8';\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 'bool';\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 'int16';\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return 'uint16';\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return 'int32';\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 'uint32';\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return 'float32';\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return 'float64';\r\n    case onnx.TensorProto.DataType.STRING:\r\n      return 'string';\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return 'int32';\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 'uint32';\r\n\r\n    default:\r\n      throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n  }\r\n};\r\n\r\nconst numericTensorTypeToTypedArray = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\r\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\r\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\r\n      switch (type) {\r\n        case 'float32':\r\n          return Float32Array;\r\n        case 'uint8':\r\n          return Uint8Array;\r\n        case 'int8':\r\n          return Int8Array;\r\n        case 'uint16':\r\n          return Uint16Array;\r\n        case 'int16':\r\n          return Int16Array;\r\n        case 'int32':\r\n          return Int32Array;\r\n        case 'bool':\r\n          return Uint8Array;\r\n        case 'float64':\r\n          return Float64Array;\r\n        case 'uint32':\r\n          return Uint32Array;\r\n        case 'int64':\r\n          return BigInt64Array;\r\n        case 'uint64':\r\n          return BigUint64Array;\r\n        default:\r\n          throw new Error(`unsupported type: ${type}`);\r\n      }\r\n    };\r\n\r\nconst getLogLevel = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\r\n  switch (logLevel) {\r\n    case 'verbose':\r\n      return 0;\r\n    case 'info':\r\n      return 1;\r\n    case 'warning':\r\n      return 2;\r\n    case 'error':\r\n      return 3;\r\n    case 'fatal':\r\n      return 4;\r\n    default:\r\n      throw new Error(`unsupported logging level: ${logLevel}`);\r\n  }\r\n};\r\n\r\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\r\n  private sessionHandle: number;\r\n\r\n  inputNames: string[];\r\n  private inputNamesUTF8Encoded: number[];\r\n  outputNames: string[];\r\n  private outputNamesUTF8Encoded: number[];\r\n\r\n  loadModel(model: Uint8Array, options?: InferenceSession.SessionOptions): void {\r\n    const wasm = getInstance();\r\n    if (!ortInit) {\r\n      const errorCode = wasm._OrtInit(env.wasm.numThreads!, getLogLevel(env.logLevel!));\r\n      if (errorCode !== 0) {\r\n        throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\r\n      }\r\n      ortInit = true;\r\n    }\r\n\r\n    const modelDataOffset = wasm._malloc(model.byteLength);\r\n    let sessionOptionsHandle = 0;\r\n    let allocs: number[] = [];\r\n\r\n    try {\r\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\r\n\r\n      wasm.HEAPU8.set(model, modelDataOffset);\r\n      this.sessionHandle = wasm._OrtCreateSession(modelDataOffset, model.byteLength, sessionOptionsHandle);\r\n      if (this.sessionHandle === 0) {\r\n        throw new Error('Can\\'t create a session');\r\n      }\r\n    } finally {\r\n      wasm._free(modelDataOffset);\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n      allocs.forEach(wasm._free);\r\n    }\r\n\r\n    const inputCount = wasm._OrtGetInputCount(this.sessionHandle);\r\n    const outputCount = wasm._OrtGetOutputCount(this.sessionHandle);\r\n\r\n    this.inputNames = [];\r\n    this.inputNamesUTF8Encoded = [];\r\n    this.outputNames = [];\r\n    this.outputNamesUTF8Encoded = [];\r\n    for (let i = 0; i < inputCount; i++) {\r\n      const name = wasm._OrtGetInputName(this.sessionHandle, i);\r\n      if (name === 0) {\r\n        throw new Error('Can\\'t get an input name');\r\n      }\r\n      this.inputNamesUTF8Encoded.push(name);\r\n      this.inputNames.push(wasm.UTF8ToString(name));\r\n    }\r\n    for (let i = 0; i < outputCount; i++) {\r\n      const name = wasm._OrtGetOutputName(this.sessionHandle, i);\r\n      if (name === 0) {\r\n        throw new Error('Can\\'t get an output name');\r\n      }\r\n      this.outputNamesUTF8Encoded.push(name);\r\n      this.outputNames.push(wasm.UTF8ToString(name));\r\n    }\r\n  }\r\n\r\n  async dispose(): Promise<void> {\r\n    const wasm = getInstance();\r\n    if (this.inputNamesUTF8Encoded) {\r\n      this.inputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n      this.inputNamesUTF8Encoded = [];\r\n    }\r\n    if (this.outputNamesUTF8Encoded) {\r\n      this.outputNamesUTF8Encoded.forEach(wasm._OrtFree);\r\n      this.outputNamesUTF8Encoded = [];\r\n    }\r\n    if (this.sessionHandle) {\r\n      wasm._OrtReleaseSession(this.sessionHandle);\r\n      this.sessionHandle = 0;\r\n    }\r\n  }\r\n\r\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\r\n      Promise<SessionHandler.ReturnType> {\r\n    const wasm = getInstance();\r\n\r\n    const inputArray: Tensor[] = [];\r\n    const inputIndices: number[] = [];\r\n    Object.entries(feeds).forEach(kvp => {\r\n      const name = kvp[0];\r\n      const tensor = kvp[1];\r\n      const index = this.inputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid input '${name}'`);\r\n      }\r\n      if (tensor.type === 'string') {\r\n        // TODO: support string tensor\r\n        throw new TypeError('string tensor is not supported');\r\n      }\r\n      inputArray.push(tensor);\r\n      inputIndices.push(index);\r\n    });\r\n\r\n    const outputIndices: number[] = [];\r\n    Object.entries(fetches).forEach(kvp => {\r\n      const name = kvp[0];\r\n      // TODO: support pre-allocated output\r\n      const index = this.outputNames.indexOf(name);\r\n      if (index === -1) {\r\n        throw new Error(`invalid output '${name}'`);\r\n      }\r\n      outputIndices.push(index);\r\n    });\r\n\r\n    const inputCount = inputIndices.length;\r\n    const outputCount = outputIndices.length;\r\n\r\n    let runOptionsHandle = 0;\r\n    let allocs: number[] = [];\r\n\r\n    const inputValues: number[] = [];\r\n    const inputDataOffsets: number[] = [];\r\n\r\n    try {\r\n      [runOptionsHandle, allocs] = setRunOptions(options);\r\n\r\n      // create input tensors\r\n      for (let i = 0; i < inputCount; i++) {\r\n        const data = inputArray[i].data;\r\n        if (Array.isArray(data)) {\r\n          // string tensor\r\n          throw new TypeError('string tensor is not supported');\r\n        } else {\r\n          const dataOffset = wasm._malloc(data.byteLength);\r\n          inputDataOffsets.push(dataOffset);\r\n          wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength), dataOffset);\r\n\r\n          const dims = inputArray[i].dims;\r\n\r\n          const stack = wasm.stackSave();\r\n          const dimsOffset = wasm.stackAlloc(4 * dims.length);\r\n          try {\r\n            let dimIndex = dimsOffset / 4;\r\n            dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\r\n            const tensor = wasm._OrtCreateTensor(\r\n                tensorDataTypeStringToEnum(inputArray[i].type), dataOffset, data.byteLength, dimsOffset, dims.length);\r\n            if (tensor === 0) {\r\n              throw new Error('Can\\'t create a tensor');\r\n            }\r\n            inputValues.push(tensor);\r\n          } finally {\r\n            wasm.stackRestore(stack);\r\n          }\r\n        }\r\n      }\r\n\r\n      const beforeRunStack = wasm.stackSave();\r\n      const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\r\n      const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\r\n      const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\r\n      const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\r\n\r\n      try {\r\n        let inputValuesIndex = inputValuesOffset / 4;\r\n        let inputNamesIndex = inputNamesOffset / 4;\r\n        let outputValuesIndex = outputValuesOffset / 4;\r\n        let outputNamesIndex = outputNamesOffset / 4;\r\n        for (let i = 0; i < inputCount; i++) {\r\n          wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\r\n          wasm.HEAPU32[inputNamesIndex++] = this.inputNamesUTF8Encoded[inputIndices[i]];\r\n        }\r\n        for (let i = 0; i < outputCount; i++) {\r\n          wasm.HEAPU32[outputValuesIndex++] = 0;\r\n          wasm.HEAPU32[outputNamesIndex++] = this.outputNamesUTF8Encoded[outputIndices[i]];\r\n        }\r\n\r\n        // support RunOptions\r\n        let errorCode = wasm._OrtRun(\r\n            this.sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\r\n            outputValuesOffset, runOptionsHandle);\r\n\r\n        const output: {[name: string]: Tensor} = {};\r\n\r\n        if (errorCode === 0) {\r\n          for (let i = 0; i < outputCount; i++) {\r\n            const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\r\n\r\n            const beforeGetTensorDataStack = wasm.stackSave();\r\n            // stack allocate 4 pointer value\r\n            const tensorDataOffset = wasm.stackAlloc(4 * 4);\r\n            try {\r\n              errorCode = wasm._OrtGetTensorData(\r\n                  tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\r\n              if (errorCode !== 0) {\r\n                throw new Error(`Can't get a tensor data. error code = ${errorCode}`);\r\n              }\r\n              let tensorDataIndex = tensorDataOffset / 4;\r\n              const dataType = wasm.HEAPU32[tensorDataIndex++];\r\n              const dataOffset: number = wasm.HEAPU32[tensorDataIndex++];\r\n              const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\r\n              const dimsLength = wasm.HEAPU32[tensorDataIndex++];\r\n              const dims = [];\r\n              for (let i = 0; i < dimsLength; i++) {\r\n                dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\r\n              }\r\n              wasm._OrtFree(dimsOffset);\r\n\r\n              const type = tensorDataTypeEnumToString(dataType);\r\n              if (type === 'string') {\r\n                // string tensor\r\n                throw new TypeError('string tensor is not supported');\r\n              } else {\r\n                const typedArray = numericTensorTypeToTypedArray(type);\r\n                const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\r\n                const t = new Tensor(type, new typedArray(size), dims) as TypedTensor<Exclude<Tensor.Type, 'string'>>;\r\n                new Uint8Array(t.data.buffer, t.data.byteOffset, t.data.byteLength)\r\n                    .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + t.data.byteLength));\r\n                output[this.outputNames[outputIndices[i]]] = t;\r\n              }\r\n            } finally {\r\n              wasm.stackRestore(beforeGetTensorDataStack);\r\n              wasm._OrtReleaseTensor(tensor);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (errorCode === 0) {\r\n          return output;\r\n        } else {\r\n          throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\r\n        }\r\n      } finally {\r\n        wasm.stackRestore(beforeRunStack);\r\n      }\r\n    } finally {\r\n      inputValues.forEach(wasm._OrtReleaseTensor);\r\n      inputDataOffsets.forEach(wasm._free);\r\n\r\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\r\n      allocs.forEach(wasm._free);\r\n    }\r\n  }\r\n\r\n  startProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n\r\n  endProfiling(): void {\r\n    // TODO: implement profiling\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {InferenceSession} from 'onnxruntime-common';\r\n\r\nimport {allocWasmString, iterateExtraOptions} from './options-utils';\r\nimport {getInstance} from './wasm-factory';\r\n\r\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\r\n  switch (graphOptimizationLevel) {\r\n    case 'disabled':\r\n      return 0;\r\n    case 'basic':\r\n      return 1;\r\n    case 'extended':\r\n      return 2;\r\n    case 'all':\r\n      return 99;\r\n    default:\r\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\r\n  }\r\n};\r\n\r\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\r\n  switch (executionMode) {\r\n    case 'sequential':\r\n      return 0;\r\n    case 'parallel':\r\n      return 1;\r\n    default:\r\n      throw new Error(`unsupported execution mode: ${executionMode}`);\r\n  }\r\n};\r\n\r\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\r\n  const wasm = getInstance();\r\n  let sessionOptionsHandle = 0;\r\n  const allocs: number[] = [];\r\n\r\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\r\n\r\n  try {\r\n    if (options?.graphOptimizationLevel === undefined) {\r\n      sessionOptions.graphOptimizationLevel = 'all';\r\n    }\r\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel!);\r\n\r\n    if (options?.enableCpuMemArena === undefined) {\r\n      sessionOptions.enableCpuMemArena = true;\r\n    }\r\n\r\n    if (options?.enableMemPattern === undefined) {\r\n      sessionOptions.enableMemPattern = true;\r\n    }\r\n\r\n    if (options?.executionMode === undefined) {\r\n      sessionOptions.executionMode = 'sequential';\r\n    }\r\n    const executionMode = getExecutionMode(sessionOptions.executionMode!);\r\n\r\n    let logIdDataOffset = 0;\r\n    if (options?.logId !== undefined) {\r\n      logIdDataOffset = allocWasmString(options.logId, allocs);\r\n    }\r\n\r\n    if (options?.logSeverityLevel === undefined) {\r\n      sessionOptions.logSeverityLevel = 2;  // Default to warning\r\n    } else if (\r\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\r\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\r\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\r\n    }\r\n\r\n    if (options?.logVerbosityLevel === undefined) {\r\n      sessionOptions.logVerbosityLevel = 0;  // Default to 0\r\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\r\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\r\n    }\r\n\r\n    // TODO: Support profiling\r\n    sessionOptions.enableProfiling = false;\r\n\r\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\r\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena!, !!sessionOptions.enableMemPattern!, executionMode,\r\n        sessionOptions.enableProfiling, 0, logIdDataOffset, sessionOptions.logSeverityLevel!,\r\n        sessionOptions.logVerbosityLevel!);\r\n    if (sessionOptionsHandle === 0) {\r\n      throw new Error('Can\\'t create session options');\r\n    }\r\n\r\n    if (options?.extra !== undefined) {\r\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\r\n        const keyDataOffset = allocWasmString(key, allocs);\r\n        const valueDataOffset = allocWasmString(value, allocs);\r\n\r\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\r\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\r\n        }\r\n      });\r\n    }\r\n\r\n    return [sessionOptionsHandle, allocs];\r\n  } catch (e) {\r\n    if (sessionOptionsHandle !== 0) {\r\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\r\n    }\r\n    allocs.forEach(wasm._free);\r\n    throw e;\r\n  }\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {env} from 'onnxruntime-common';\r\nimport * as path from 'path';\r\n\r\nimport {OrtWasmModule} from './binding/ort-wasm';\r\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\r\nimport ortWasmFactoryThreaded from './binding/ort-wasm-threaded.js';\r\nimport ortWasmFactory from './binding/ort-wasm.js';\r\n\r\nlet wasm: OrtWasmModule;\r\nlet initialized = false;\r\nlet initializing = false;\r\nlet aborted = false;\r\n\r\nconst isMultiThreadSupported = (): boolean => {\r\n  try {\r\n    // Test for transferability of SABs (for browsers. needed for Firefox)\r\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\r\n    if (typeof MessageChannel !== 'undefined') {\r\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\r\n    }\r\n\r\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\r\n    // This typed array is a WebAssembly program containing threaded instructions.\r\n    return WebAssembly.validate(new Uint8Array([\r\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\r\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\r\n    ]));\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const initializeWebAssembly = async(): Promise<void> => {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\r\n  }\r\n  if (aborted) {\r\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  // wasm flags are already initialized\r\n  const timeout = env.wasm.initTimeout!;\r\n  const numThreads = env.wasm.numThreads!;\r\n\r\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\r\n  let isTimeout = false;\r\n\r\n  const tasks: Array<Promise<void>> = [];\r\n\r\n  // promise for timeout\r\n  if (timeout > 0) {\r\n    tasks.push(new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        isTimeout = true;\r\n        resolve();\r\n      }, timeout);\r\n    }));\r\n  }\r\n\r\n  // promise for module initialization\r\n  tasks.push(new Promise((resolve, reject) => {\r\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\r\n    const config: Partial<OrtWasmModule> = {};\r\n\r\n    if (useThreads) {\r\n      if (typeof Blob === 'undefined') {\r\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\r\n      } else {\r\n        const scriptSourceCode =\r\n            `var ortWasmThreaded=(function(){var _scriptDir;return ${ortWasmFactoryThreaded.toString()}})();`;\r\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\r\n        config.locateFile = (fileName: string, scriptDirectory: string) => {\r\n          if (fileName.endsWith('.worker.js')) {\r\n            return URL.createObjectURL(new Blob(\r\n                [\r\n                  // This require() function is handled by webpack to load file content of the corresponding .worker.js\r\n                  // eslint-disable-next-line @typescript-eslint/no-require-imports\r\n                  require('./binding/ort-wasm-threaded.worker.js')\r\n                ],\r\n                {type: 'text/javascript'}));\r\n          }\r\n          return scriptDirectory + fileName;\r\n        };\r\n      }\r\n    }\r\n\r\n    factory(config).then(\r\n        // wasm module initialized successfully\r\n        module => {\r\n          initializing = false;\r\n          initialized = true;\r\n          wasm = module;\r\n          resolve();\r\n        },\r\n        // wasm module failed to initialize\r\n        (what) => {\r\n          initializing = false;\r\n          aborted = true;\r\n          reject(what);\r\n        });\r\n  }));\r\n\r\n  await Promise.race(tasks);\r\n\r\n  if (isTimeout) {\r\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\r\n  }\r\n};\r\n\r\nexport const getInstance = (): OrtWasmModule => {\r\n  if (initialized) {\r\n    return wasm;\r\n  }\r\n\r\n  throw new Error('WebAssembly is not initialized yet.');\r\n};\r\n\r\nexport const dispose = (): void => {\r\n  if (initialized && !initializing && !aborted) {\r\n    initializing = true;\r\n\r\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\r\n\r\n    initializing = false;\r\n    initialized = false;\r\n    aborted = true;\r\n  }\r\n};\r\n","module.exports = require(\"fs\");;","module.exports = require(\"os\");;","module.exports = require(\"path\");;","module.exports = require(\"perf_hooks\");;","module.exports = require(\"util\");;","module.exports = require(\"worker_threads\");;","module.exports = require(\"onnxruntime-common\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6018);\n"],"sourceRoot":""}