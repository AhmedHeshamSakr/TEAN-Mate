{"version":3,"file":"sidebar.7cb6ddf4fbb12a783319.hot-update.js","mappings":"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","sources":["webpack://tean-mate/./2-features/STT/ArtyomHandller.js","webpack://tean-mate/webpack/runtime/getFullHash"],"sourcesContent":["import Artyom from '/node_modules/artyom.js/build/artyom.windows'\n\nexport default class ArtyomAssistant {\n    static instance = null;\n    \n    // Singleton pattern ensures only one instance exists\n    static getInstance() {\n      if (!this.instance) {\n        this.instance = new ArtyomAssistant();\n      }\n      return this.instance;\n    }\n  \n    constructor() {\n      // Prevent multiple instantiations\n      if (ArtyomAssistant.instance) {\n        return ArtyomAssistant.instance;\n      }\n  \n      // Initialize core speech recognition\n      this.artyom = typeof Artyom === 'function' \n      ? new Artyom()  : window.Artyom  ? new window.Artyom() : null;\n\n\n      this.isListening = false;\n      // Set up a default help command\n      this.setupDefaultCommands();\n      // Store the instance\n      ArtyomAssistant.instance = this;\n    }\n  \n    // Configure default voice commands\n    setupDefaultCommands() {\n      this.artyom.addCommands({\n        indexes: [\"hello\", \"help\"],\n        action: () => {\n          console.log(\"Default command triggered!\");\n          // Optionally speak a response\n          this.artyom.say(\"How can I assist you today?\");\n        }\n      });\n      console.log(\"ArtyomAssistant initialized with default commands.\");\n    }\n  \n    // Robust method for adding voice commands\n    addCommand(command, callback) {\n      try {\n        // Ensure valid input\n        if (!command || !callback) {\n          throw new Error(\"Both command and callback must be provided.\");\n        }\n  \n        // Support single or multiple commands\n        const commands = Array.isArray(command) ? command : [command];\n        \n        this.artyom.addCommands({\n          indexes: commands,\n          action: (...args) => {\n            try {\n              // Wrap callback to add error handling\n              callback(...args);\n            } catch (callbackError) {\n              console.error(`Error in command callback:`, callbackError);\n              // Optional: Provide voice feedback about the error\n              this.artyom.say(\"Sorry, there was an error processing your command.\");\n            }\n          }\n        });\n  \n        console.log(`Added command(s): ${commands.join(\", \")}`);\n      } catch (err) {\n        console.error(\"Error adding command(s):\", err.message);\n        // Provide user feedback about command addition failure\n        this.showErrorNotification(\"Could not add voice command\");\n      }\n    }\n  \n    // Comprehensive microphone permission and speech recognition setup\n    startListening() {\n      // Check if already listening to prevent duplicate initialization\n      if (this.isListening) {\n        console.warn(\"Speech recognition is already active.\");\n        return Promise.resolve();\n      }\n  \n      // Return a promise to handle async permission and initialization\n      return new Promise((resolve, reject) => {\n        // First, check microphone permissions\n        navigator.permissions.query({ name: 'microphone' })\n          .then((permissionStatus) => {\n            switch(permissionStatus.state) {\n              case 'granted':\n                this.initializeSpeechRecognition(resolve, reject);\n                break;\n              case 'prompt':\n                this.requestMicrophonePermission(resolve, reject);\n                break;\n              case 'denied':\n                this.handleMicrophoneDenied(reject);\n                break;\n            }\n          })\n          .catch((error) => {\n            console.error('Permission check failed:', error);\n            this.handleMicrophoneDenied(reject);\n          });\n      });\n    }\n  \n    // Request microphone access explicitly\n    requestMicrophonePermission(resolve, reject) {\n      navigator.mediaDevices.getUserMedia({ audio: true })\n        .then(() => this.initializeSpeechRecognition(resolve, reject))\n        .catch((error) => {\n          console.error('Microphone permission denied:', error);\n          this.handleMicrophoneDenied(reject);\n        });\n    }\n  \n    // Initialize Artyom speech recognition\n    initializeSpeechRecognition(resolve, reject) {\n      this.artyom.initialize({\n        lang: \"en-US\",\n        continuous: true,\n        listen: true,\n        debug: true,\n        recognitionFallback: true,\n        executionKeyword: null\n      })\n      .then(() => {\n        this.isListening = true;\n        console.log(\"Speech recognition initialized successfully\");\n        this.showSuccessNotification(\"Speech recognition activated\");\n        resolve();\n      })\n      .catch((error) => {\n        console.error('Speech recognition initialization failed:', error);\n        this.showErrorNotification(\"Could not start speech recognition\");\n        reject(error);\n      });\n    }\n  \n    // Comprehensive stop listening method\n    stopListening() {\n      // Check if already stopped\n      if (!this.isListening) {\n        console.warn(\"Speech recognition is not currently active.\");\n        return Promise.resolve();\n      }\n  \n      return this.artyom.fatality()\n        .then(() => {\n          this.isListening = false;\n          console.log(\"Speech recognition stopped successfully\");\n          this.showSuccessNotification(\"Speech recognition deactivated\");\n        })\n        .catch((err) => {\n          console.error(\"Error stopping speech recognition:\", err.message);\n          this.showErrorNotification(\"Could not stop speech recognition\");\n        });\n    }\n  \n    // Toggle listening state\n    toggleListening() {\n      return this.isListening ? this.stopListening() : this.startListening();\n    }\n  \n    // User notification methods (can be customized)\n    showSuccessNotification(message) {\n      // Implement your preferred notification method\n      console.log(`✅ ${message}`);\n      // Could use browser notifications, custom UI, or voice feedback\n    }\n  \n    showErrorNotification(message) {\n      // Implement your preferred error notification method\n      console.error(`❌ ${message}`);\n      // Could use browser notifications, custom UI, or voice feedback\n    }\n  \n    // Handle microphone permission denial\n    handleMicrophoneDenied(reject) {\n      const errorMessage = `\n        Microphone access is required for Speech-to-Text.\n        Please:\n        1. Check your browser settings\n        2. Ensure microphone permissions are granted\n        3. Reload the extension\n      `;\n      \n      console.error(errorMessage);\n      this.showErrorNotification(errorMessage);\n      \n      // Reject the promise to signal initialization failure\n      reject(new Error('Microphone access denied'));\n    }\n  \n    // Getter for listening state\n    isArtyomListening() {\n      return this.isListening;\n    }\n  }","__webpack_require__.h = () => (\"577e6e7e38af9a8faed2\")"],"names":["Artyom","ArtyomAssistant","_classCallCheck","instance","artyom","window","isListening","setupDefaultCommands","_createClass","key","value","_this","addCommands","indexes","action","console","log","say","addCommand","command","callback","_this2","Error","commands","_Array$isArray","apply","arguments","callbackError","error","concat","join","err","message","showErrorNotification","startListening","_this3","warn","_Promise","resolve","reject","navigator","permissions","query","name","then","permissionStatus","state","initializeSpeechRecognition","requestMicrophonePermission","handleMicrophoneDenied","_this4","mediaDevices","getUserMedia","audio","_this5","initialize","lang","continuous","listen","debug","recognitionFallback","executionKeyword","showSuccessNotification","stopListening","_this6","fatality","toggleListening","errorMessage","isArtyomListening","getInstance","_defineProperty","default"],"sourceRoot":""}